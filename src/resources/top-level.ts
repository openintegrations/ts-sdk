// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import * as TopLevelAPI from './top-level';
import { OffsetPagination, type OffsetPaginationParams } from '../core/pagination';

export type ListConnectionConfigsResponsesOffsetPagination = OffsetPagination<ListConnectionConfigsResponse>;

export type ListConnectionsResponsesOffsetPagination = OffsetPagination<ListConnectionsResponse>;

export type ListConnectorsResponsesOffsetPagination = OffsetPagination<ListConnectorsResponse>;

export type ListConnnectorConfigsResponsesOffsetPagination = OffsetPagination<ListConnnectorConfigsResponse>;

export type ListCustomersResponsesOffsetPagination = OffsetPagination<ListCustomersResponse>;

export type ListEventsResponsesOffsetPagination = OffsetPagination<ListEventsResponse>;

export interface Connector {
  name: string;

  auth_type?: 'BASIC' | 'OAUTH1' | 'OAUTH2' | 'OAUTH2CC' | 'API_KEY' | 'CUSTOM';

  display_name?: string;

  has_openint_credentials?: boolean;

  logo_url?: string;

  openint_allowed_scopes?: Array<string>;

  openint_default_scopes?: Array<string>;

  platforms?: Array<'web' | 'mobile' | 'desktop' | 'local' | 'cloud'>;

  required_scopes?: Array<string>;

  schemas?: Connector.Schemas;

  scopes?: Array<Connector.Scope>;

  stage?: 'alpha' | 'beta' | 'ga' | 'hidden';
}

export namespace Connector {
  export interface Schemas {
    connect_input?: unknown;

    connect_output?: unknown;

    connection_settings?: unknown;

    connector_config?: unknown;

    integration_data?: unknown;

    pre_connect_input?: unknown;

    webhook_input?: unknown;
  }

  export interface Scope {
    scope: string;

    description?: string;

    display_name?: string;
  }
}

export interface Integration {
  id: string;

  connector_name:
    | 'accelo'
    | 'acme-apikey'
    | 'acme-oauth2'
    | 'adobe'
    | 'adyen'
    | 'aircall'
    | 'airtable'
    | 'amazon'
    | 'apaleo'
    | 'apollo'
    | 'asana'
    | 'attio'
    | 'auth0'
    | 'autodesk'
    | 'aws'
    | 'bamboohr'
    | 'basecamp'
    | 'battlenet'
    | 'bigcommerce'
    | 'bitbucket'
    | 'bitly'
    | 'blackbaud'
    | 'boldsign'
    | 'box'
    | 'braintree'
    | 'brex'
    | 'calendly'
    | 'clickup'
    | 'close'
    | 'coda'
    | 'confluence'
    | 'contentful'
    | 'contentstack'
    | 'copper'
    | 'coros'
    | 'datev'
    | 'deel'
    | 'dialpad'
    | 'digitalocean'
    | 'discord'
    | 'docusign'
    | 'dropbox'
    | 'ebay'
    | 'egnyte'
    | 'envoy'
    | 'eventbrite'
    | 'exist'
    | 'facebook'
    | 'factorial'
    | 'figma'
    | 'finch'
    | 'firebase'
    | 'fitbit'
    | 'foreceipt'
    | 'fortnox'
    | 'freshbooks'
    | 'front'
    | 'github'
    | 'gitlab'
    | 'gong'
    | 'google-calendar'
    | 'google-docs'
    | 'google-drive'
    | 'google-mail'
    | 'google-sheet'
    | 'gorgias'
    | 'grain'
    | 'greenhouse'
    | 'gumroad'
    | 'gusto'
    | 'harvest'
    | 'heron'
    | 'highlevel'
    | 'hubspot'
    | 'instagram'
    | 'intercom'
    | 'jira'
    | 'keap'
    | 'lever'
    | 'linear'
    | 'linkedin'
    | 'linkhut'
    | 'lunchmoney'
    | 'mailchimp'
    | 'mercury'
    | 'merge'
    | 'miro'
    | 'monday'
    | 'moota'
    | 'mural'
    | 'namely'
    | 'nationbuilder'
    | 'netsuite'
    | 'notion'
    | 'odoo'
    | 'okta'
    | 'onebrick'
    | 'openledger'
    | 'osu'
    | 'oura'
    | 'outreach'
    | 'pagerduty'
    | 'pandadoc'
    | 'payfit'
    | 'paypal'
    | 'pennylane'
    | 'pinterest'
    | 'pipedrive'
    | 'plaid'
    | 'podium'
    | 'postgres'
    | 'productboard'
    | 'qualtrics'
    | 'quickbooks'
    | 'ramp'
    | 'reddit'
    | 'sage'
    | 'salesforce'
    | 'salesloft'
    | 'saltedge'
    | 'segment'
    | 'servicem8'
    | 'servicenow'
    | 'sharepoint'
    | 'sharepoint-onprem'
    | 'shopify'
    | 'signnow'
    | 'slack'
    | 'smartsheet'
    | 'snowflake'
    | 'splitwise'
    | 'spotify'
    | 'squarespace'
    | 'squareup'
    | 'stackexchange'
    | 'strava'
    | 'stripe'
    | 'teamwork'
    | 'teller'
    | 'ticktick'
    | 'timely'
    | 'todoist'
    | 'toggl'
    | 'tremendous'
    | 'tsheetsteam'
    | 'tumblr'
    | 'twenty'
    | 'twinfield'
    | 'twitch'
    | 'twitter'
    | 'typeform'
    | 'uber'
    | 'venmo'
    | 'vimeo'
    | 'wakatime'
    | 'wealthbox'
    | 'webflow'
    | 'whoop'
    | 'wise'
    | 'wordpress'
    | 'wrike'
    | 'xero'
    | 'yahoo'
    | 'yandex'
    | 'yodlee'
    | 'zapier'
    | 'zendesk'
    | 'zenefits'
    | 'zoho'
    | 'zoho-desk'
    | 'zoom';

  created_at: string;

  external: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

  name: string;

  standard: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

  updated_at: string;

  auth_type?: string | null;

  category?: string | null;

  logo_url?: string | null;

  platforms?: Array<'web' | 'mobile' | 'desktop'> | null;

  stage?: 'alpha' | 'beta' | 'ga' | null;

  version?: string | null;
}

export interface CheckConnectionResponse {
  id: string;

  status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

  status_message?: string | null;
}

export type CreateConnectionResponse =
  | CreateConnectionResponse.ConnectorAcceloDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAcmeApikeyDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAcmeOauth2DiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAdobeDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAdyenDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAircallDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAmazonDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorApaleoDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAsanaDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAttioDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAuth0DiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAutodeskDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAwsDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorBamboohrDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorBasecampDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorBattlenetDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorBigcommerceDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorBitbucketDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorBitlyDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorBlackbaudDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorBoldsignDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorBoxDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorBraintreeDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorCalendlyDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorClickupDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorCloseDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorConfluenceDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorContentfulDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorContentstackDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorCopperDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorCorosDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorDatevDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorDeelDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorDialpadDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorDigitaloceanDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorDiscordDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorDocusignDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorDropboxDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorEbayDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorEgnyteDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorEnvoyDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorEventbriteDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorExistDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorFacebookDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorFactorialDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorFigmaDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorFitbitDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorFortnoxDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorFreshbooksDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorFrontDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGitHubDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGitlabDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGongDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGoogleCalendarDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGoogleDocsDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGoogleDriveDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGoogleMailDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGoogleSheetDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGorgiasDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGrainDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGumroadDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGustoDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorHarvestDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorHighlevelDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorHubspotDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorInstagramDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorIntercomDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorJiraDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorKeapDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorLeverDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorLinearDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorLinkedinDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorLinkhutDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorMailchimpDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorMiroDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorMondayDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorMuralDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorNamelyDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorNationbuilderDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorNetsuiteDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorNotionDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorOdooDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorOktaDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorOsuDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorOuraDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorOutreachDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorPagerdutyDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorPandadocDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorPayfitDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorPaypalDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorPennylaneDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorPinterestDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorPipedriveDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorPodiumDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorProductboardDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorQualtricsDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorQuickbooksDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorRedditDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSageDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSalesforceDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSalesloftDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSegmentDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorServicem8DiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorServicenowDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSharepointDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorShopifyDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSignnowDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSlackDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSmartsheetDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSnowflakeDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSpotifyDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSquarespaceDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSquareupDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorStackexchangeDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorStravaDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTeamworkDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTicktickDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTimelyDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTodoistDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTremendousDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTsheetsteamDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTumblrDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTwinfieldDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTwitchDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTwitterDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTypeformDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorUberDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorVimeoDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorWakatimeDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorWealthboxDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorWebflowDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorWhoopDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorWordpressDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorWrikeDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorXeroDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorYahooDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorYandexDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorZapierDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorZendeskDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorZenefitsDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorZohoDeskDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorZohoDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorZoomDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorAirtableDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorApolloDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorBrexDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorCodaDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorFinchDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorFirebaseDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorForeceiptDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorGreenhouseDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorHeronDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorLunchmoneyDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorMercuryDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorMergeDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorMootaDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorOnebrickDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorOpenledgerDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorPlaidDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorPostgresDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorRampDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSaltedgeDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSharepointOnpremDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorSplitwiseDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorStripeDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTellerDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTogglDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorTwentyDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorVenmoDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorWiseDiscriminatedConnectionSettings
  | CreateConnectionResponse.ConnectorYodleeDiscriminatedConnectionSettings;

export namespace CreateConnectionResponse {
  export interface ConnectorAcceloDiscriminatedConnectionSettings {
    connector_name: 'accelo';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAcceloDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAcceloDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Accelo account (e.g., https://domain.api.accelo.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAcmeApikeyDiscriminatedConnectionSettings {
    connector_name: 'acme-apikey';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAcmeApikeyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAcmeApikeyDiscriminatedConnectionSettings {
    export interface Settings {
      api_key: string;
    }
  }

  export interface ConnectorAcmeOauth2DiscriminatedConnectionSettings {
    connector_name: 'acme-oauth2';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAcmeOauth2DiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAcmeOauth2DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAdobeDiscriminatedConnectionSettings {
    connector_name: 'adobe';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAdobeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAdobeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAdyenDiscriminatedConnectionSettings {
    connector_name: 'adyen';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAdyenDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAdyenDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The environment to use (e.g., live|test)
       */
      environment: string;

      oauth: Settings.OAuth;

      /**
       * The resource to use for your various requests (e.g.,
       * https://kyc-(live|test).adyen.com)
       */
      resource: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAircallDiscriminatedConnectionSettings {
    connector_name: 'aircall';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAircallDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAircallDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAmazonDiscriminatedConnectionSettings {
    connector_name: 'amazon';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAmazonDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAmazonDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension for your Amazon account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorApaleoDiscriminatedConnectionSettings {
    connector_name: 'apaleo';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorApaleoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorApaleoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAsanaDiscriminatedConnectionSettings {
    connector_name: 'asana';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAsanaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAsanaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAttioDiscriminatedConnectionSettings {
    connector_name: 'attio';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAttioDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAttioDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAuth0DiscriminatedConnectionSettings {
    connector_name: 'auth0';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAuth0DiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAuth0DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Auth0 account (e.g., https://domain.auth0.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAutodeskDiscriminatedConnectionSettings {
    connector_name: 'autodesk';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAutodeskDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAutodeskDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAwsDiscriminatedConnectionSettings {
    connector_name: 'aws';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAwsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAwsDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API subdomain to the API you want to connect to (e.g.,
       * https://cognito-idp.us-east-2.amazonaws.com)
       */
      apiSubdomain: string;

      /**
       * The domain extension of your AWS account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * The subdomain of your AWS account (e.g., https://domain.amazoncognito.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBamboohrDiscriminatedConnectionSettings {
    connector_name: 'bamboohr';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBamboohrDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBamboohrDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your BambooHR account (e.g., https://domain.bamboohr.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBasecampDiscriminatedConnectionSettings {
    connector_name: 'basecamp';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBasecampDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBasecampDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * Your Account ID (e.g., 5899981)
       */
      accountId: string;

      /**
       * The details of your app (e.g., example-subdomain)
       */
      appDetails: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBattlenetDiscriminatedConnectionSettings {
    connector_name: 'battlenet';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBattlenetDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBattlenetDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to where you will access your API (e.g., https://us.api.blizzard.com)
       */
      apiDomain: string;

      /**
       * The domain extension of your Battle.net account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBigcommerceDiscriminatedConnectionSettings {
    connector_name: 'bigcommerce';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBigcommerceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBigcommerceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account UUID of your BigCommerce account (e.g.,
       * 123e4567-e89b-12d3-a456-426614174000)
       */
      accountUuid: string;

      oauth: Settings.OAuth;

      /**
       * The store hash of your BigCommerce account (e.g., Example123)
       */
      storeHash: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBitbucketDiscriminatedConnectionSettings {
    connector_name: 'bitbucket';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBitbucketDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBitbucketDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBitlyDiscriminatedConnectionSettings {
    connector_name: 'bitly';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBitlyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBitlyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBlackbaudDiscriminatedConnectionSettings {
    connector_name: 'blackbaud';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBlackbaudDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBlackbaudDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBoldsignDiscriminatedConnectionSettings {
    connector_name: 'boldsign';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBoldsignDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBoldsignDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBoxDiscriminatedConnectionSettings {
    connector_name: 'box';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBoxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBoxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBraintreeDiscriminatedConnectionSettings {
    connector_name: 'braintree';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBraintreeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBraintreeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCalendlyDiscriminatedConnectionSettings {
    connector_name: 'calendly';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCalendlyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCalendlyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorClickupDiscriminatedConnectionSettings {
    connector_name: 'clickup';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorClickupDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorClickupDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCloseDiscriminatedConnectionSettings {
    connector_name: 'close';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCloseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCloseDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorConfluenceDiscriminatedConnectionSettings {
    connector_name: 'confluence';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorConfluenceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorConfluenceDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorContentfulDiscriminatedConnectionSettings {
    connector_name: 'contentful';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorContentfulDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorContentfulDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Contentful account (e.g., https://domain.contentful.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorContentstackDiscriminatedConnectionSettings {
    connector_name: 'contentstack';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorContentstackDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorContentstackDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to where you will access your API (e.g.,
       * https://eu-api.contentstack.com)
       */
      apiDomain: string;

      /**
       * The app ID of your Contentstack account (e.g., example-subdomain)
       */
      appId: string;

      oauth: Settings.OAuth;

      /**
       * The subdomain of your Contentstack account (e.g.,
       * https://domain.contentstack.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCopperDiscriminatedConnectionSettings {
    connector_name: 'copper';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCopperDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCopperDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCorosDiscriminatedConnectionSettings {
    connector_name: 'coros';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCorosDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCorosDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDatevDiscriminatedConnectionSettings {
    connector_name: 'datev';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDatevDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDatevDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDeelDiscriminatedConnectionSettings {
    connector_name: 'deel';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDeelDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDeelDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDialpadDiscriminatedConnectionSettings {
    connector_name: 'dialpad';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDialpadDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDialpadDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDigitaloceanDiscriminatedConnectionSettings {
    connector_name: 'digitalocean';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDigitaloceanDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDigitaloceanDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDiscordDiscriminatedConnectionSettings {
    connector_name: 'discord';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDiscordDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDiscordDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDocusignDiscriminatedConnectionSettings {
    connector_name: 'docusign';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDocusignDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDocusignDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDropboxDiscriminatedConnectionSettings {
    connector_name: 'dropbox';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDropboxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDropboxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEbayDiscriminatedConnectionSettings {
    connector_name: 'ebay';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEbayDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEbayDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEgnyteDiscriminatedConnectionSettings {
    connector_name: 'egnyte';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEgnyteDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEgnyteDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Egnyte account (e.g., https://domain.egnyte.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEnvoyDiscriminatedConnectionSettings {
    connector_name: 'envoy';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEnvoyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEnvoyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEventbriteDiscriminatedConnectionSettings {
    connector_name: 'eventbrite';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEventbriteDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEventbriteDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorExistDiscriminatedConnectionSettings {
    connector_name: 'exist';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorExistDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorExistDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFacebookDiscriminatedConnectionSettings {
    connector_name: 'facebook';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFacebookDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFacebookDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFactorialDiscriminatedConnectionSettings {
    connector_name: 'factorial';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFactorialDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFactorialDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFigmaDiscriminatedConnectionSettings {
    connector_name: 'figma';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFigmaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFigmaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFitbitDiscriminatedConnectionSettings {
    connector_name: 'fitbit';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFitbitDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFitbitDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFortnoxDiscriminatedConnectionSettings {
    connector_name: 'fortnox';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFortnoxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFortnoxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFreshbooksDiscriminatedConnectionSettings {
    connector_name: 'freshbooks';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFreshbooksDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFreshbooksDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFrontDiscriminatedConnectionSettings {
    connector_name: 'front';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFrontDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFrontDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGitHubDiscriminatedConnectionSettings {
    connector_name: 'github';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGitHubDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGitHubDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGitlabDiscriminatedConnectionSettings {
    connector_name: 'gitlab';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGitlabDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGitlabDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGongDiscriminatedConnectionSettings {
    connector_name: 'gong';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGongDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGongDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The base URL of your Gong account (e.g., example)
       */
      api_base_url_for_customer: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleCalendarDiscriminatedConnectionSettings {
    connector_name: 'google-calendar';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleCalendarDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleCalendarDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleDocsDiscriminatedConnectionSettings {
    connector_name: 'google-docs';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleDocsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDocsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleDriveDiscriminatedConnectionSettings {
    connector_name: 'google-drive';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleDriveDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDriveDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleMailDiscriminatedConnectionSettings {
    connector_name: 'google-mail';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleMailDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleMailDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleSheetDiscriminatedConnectionSettings {
    connector_name: 'google-sheet';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleSheetDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleSheetDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGorgiasDiscriminatedConnectionSettings {
    connector_name: 'gorgias';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGorgiasDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGorgiasDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Gorgias account (e.g., https://domain.gorgias.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGrainDiscriminatedConnectionSettings {
    connector_name: 'grain';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGrainDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGrainDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGumroadDiscriminatedConnectionSettings {
    connector_name: 'gumroad';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGumroadDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGumroadDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGustoDiscriminatedConnectionSettings {
    connector_name: 'gusto';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGustoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGustoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHarvestDiscriminatedConnectionSettings {
    connector_name: 'harvest';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorHarvestDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorHarvestDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The details of your app (e.g., example-subdomain)
       */
      appDetails: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHighlevelDiscriminatedConnectionSettings {
    connector_name: 'highlevel';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorHighlevelDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorHighlevelDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHubspotDiscriminatedConnectionSettings {
    connector_name: 'hubspot';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorHubspotDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorHubspotDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorInstagramDiscriminatedConnectionSettings {
    connector_name: 'instagram';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorInstagramDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorInstagramDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorIntercomDiscriminatedConnectionSettings {
    connector_name: 'intercom';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorIntercomDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorIntercomDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorJiraDiscriminatedConnectionSettings {
    connector_name: 'jira';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorJiraDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorJiraDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorKeapDiscriminatedConnectionSettings {
    connector_name: 'keap';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorKeapDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorKeapDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLeverDiscriminatedConnectionSettings {
    connector_name: 'lever';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLeverDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLeverDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinearDiscriminatedConnectionSettings {
    connector_name: 'linear';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLinearDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLinearDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinkedinDiscriminatedConnectionSettings {
    connector_name: 'linkedin';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLinkedinDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLinkedinDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinkhutDiscriminatedConnectionSettings {
    connector_name: 'linkhut';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLinkhutDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLinkhutDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMailchimpDiscriminatedConnectionSettings {
    connector_name: 'mailchimp';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMailchimpDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMailchimpDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The data center for your account (e.g., us6)
       */
      dc: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMiroDiscriminatedConnectionSettings {
    connector_name: 'miro';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMiroDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMiroDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMondayDiscriminatedConnectionSettings {
    connector_name: 'monday';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMondayDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMondayDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMuralDiscriminatedConnectionSettings {
    connector_name: 'mural';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMuralDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMuralDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNamelyDiscriminatedConnectionSettings {
    connector_name: 'namely';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNamelyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNamelyDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The name of your Namely company (e.g., example)
       */
      company: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNationbuilderDiscriminatedConnectionSettings {
    connector_name: 'nationbuilder';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNationbuilderDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNationbuilderDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account ID of your NationBuilder account (e.g., example-subdomain)
       */
      accountId: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNetsuiteDiscriminatedConnectionSettings {
    connector_name: 'netsuite';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNetsuiteDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNetsuiteDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account ID of your NetSuite account (e.g., tstdrv231585)
       */
      accountId: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNotionDiscriminatedConnectionSettings {
    connector_name: 'notion';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNotionDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNotionDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOdooDiscriminatedConnectionSettings {
    connector_name: 'odoo';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOdooDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOdooDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The domain of your Odoo account (e.g., https://example-subdomain)
       */
      serverUrl: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOktaDiscriminatedConnectionSettings {
    connector_name: 'okta';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOktaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOktaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Okta account (e.g., https://domain.okta.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOsuDiscriminatedConnectionSettings {
    connector_name: 'osu';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOsuDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOsuDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOuraDiscriminatedConnectionSettings {
    connector_name: 'oura';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOuraDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOuraDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOutreachDiscriminatedConnectionSettings {
    connector_name: 'outreach';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOutreachDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOutreachDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPagerdutyDiscriminatedConnectionSettings {
    connector_name: 'pagerduty';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPagerdutyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPagerdutyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPandadocDiscriminatedConnectionSettings {
    connector_name: 'pandadoc';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPandadocDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPandadocDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPayfitDiscriminatedConnectionSettings {
    connector_name: 'payfit';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPayfitDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPayfitDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPaypalDiscriminatedConnectionSettings {
    connector_name: 'paypal';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPaypalDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPaypalDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPennylaneDiscriminatedConnectionSettings {
    connector_name: 'pennylane';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPennylaneDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPennylaneDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPinterestDiscriminatedConnectionSettings {
    connector_name: 'pinterest';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPinterestDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPinterestDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPipedriveDiscriminatedConnectionSettings {
    connector_name: 'pipedrive';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPipedriveDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPipedriveDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API URL of your Pipedrive account (e.g., example)
       */
      api_domain: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPodiumDiscriminatedConnectionSettings {
    connector_name: 'podium';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPodiumDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPodiumDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API version of your Podium account (e.g., example-subdomain)
       */
      apiVersion: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorProductboardDiscriminatedConnectionSettings {
    connector_name: 'productboard';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorProductboardDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorProductboardDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorQualtricsDiscriminatedConnectionSettings {
    connector_name: 'qualtrics';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorQualtricsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorQualtricsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Qualtrics account (e.g., https://domain.qualtrics.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorQuickbooksDiscriminatedConnectionSettings {
    connector_name: 'quickbooks';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorQuickbooksDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorQuickbooksDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorRedditDiscriminatedConnectionSettings {
    connector_name: 'reddit';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorRedditDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorRedditDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSageDiscriminatedConnectionSettings {
    connector_name: 'sage';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSageDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSageDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSalesforceDiscriminatedConnectionSettings {
    connector_name: 'salesforce';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSalesforceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSalesforceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The instance URL of your Salesforce account (e.g., example)
       */
      instance_url: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSalesloftDiscriminatedConnectionSettings {
    connector_name: 'salesloft';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSalesloftDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSalesloftDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSegmentDiscriminatedConnectionSettings {
    connector_name: 'segment';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSegmentDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSegmentDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorServicem8DiscriminatedConnectionSettings {
    connector_name: 'servicem8';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorServicem8DiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorServicem8DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorServicenowDiscriminatedConnectionSettings {
    connector_name: 'servicenow';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorServicenowDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorServicenowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your ServiceNow account (e.g., https://domain.service-now.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSharepointDiscriminatedConnectionSettings {
    connector_name: 'sharepoint';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSharepointDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSharepointDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorShopifyDiscriminatedConnectionSettings {
    connector_name: 'shopify';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorShopifyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorShopifyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Shopify account (e.g., https://domain.myshopify.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSignnowDiscriminatedConnectionSettings {
    connector_name: 'signnow';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSignnowDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSignnowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSlackDiscriminatedConnectionSettings {
    connector_name: 'slack';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSlackDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSlackDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSmartsheetDiscriminatedConnectionSettings {
    connector_name: 'smartsheet';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSmartsheetDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSmartsheetDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSnowflakeDiscriminatedConnectionSettings {
    connector_name: 'snowflake';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSnowflakeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSnowflakeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The domain of your Snowflake account (e.g., https://example-subdomain)
       */
      snowflake_account_url: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSpotifyDiscriminatedConnectionSettings {
    connector_name: 'spotify';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSpotifyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSpotifyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSquarespaceDiscriminatedConnectionSettings {
    connector_name: 'squarespace';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSquarespaceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSquarespaceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The user agent of your custom app (e.g., example-subdomain)
       */
      customappDescription: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSquareupDiscriminatedConnectionSettings {
    connector_name: 'squareup';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSquareupDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSquareupDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorStackexchangeDiscriminatedConnectionSettings {
    connector_name: 'stackexchange';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorStackexchangeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorStackexchangeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorStravaDiscriminatedConnectionSettings {
    connector_name: 'strava';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorStravaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorStravaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTeamworkDiscriminatedConnectionSettings {
    connector_name: 'teamwork';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTeamworkDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTeamworkDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTicktickDiscriminatedConnectionSettings {
    connector_name: 'ticktick';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTicktickDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTicktickDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTimelyDiscriminatedConnectionSettings {
    connector_name: 'timely';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTimelyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTimelyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTodoistDiscriminatedConnectionSettings {
    connector_name: 'todoist';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTodoistDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTodoistDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTremendousDiscriminatedConnectionSettings {
    connector_name: 'tremendous';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTremendousDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTremendousDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTsheetsteamDiscriminatedConnectionSettings {
    connector_name: 'tsheetsteam';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTsheetsteamDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTsheetsteamDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTumblrDiscriminatedConnectionSettings {
    connector_name: 'tumblr';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTumblrDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTumblrDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwinfieldDiscriminatedConnectionSettings {
    connector_name: 'twinfield';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwinfieldDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwinfieldDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The cluster to your Twinfield instance (e.g., https://accounting.twinfield.com)
       */
      cluster: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwitchDiscriminatedConnectionSettings {
    connector_name: 'twitch';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwitchDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwitchDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwitterDiscriminatedConnectionSettings {
    connector_name: 'twitter';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwitterDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwitterDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTypeformDiscriminatedConnectionSettings {
    connector_name: 'typeform';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTypeformDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTypeformDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorUberDiscriminatedConnectionSettings {
    connector_name: 'uber';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorUberDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorUberDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorVimeoDiscriminatedConnectionSettings {
    connector_name: 'vimeo';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorVimeoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorVimeoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWakatimeDiscriminatedConnectionSettings {
    connector_name: 'wakatime';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWakatimeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWakatimeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWealthboxDiscriminatedConnectionSettings {
    connector_name: 'wealthbox';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWealthboxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWealthboxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWebflowDiscriminatedConnectionSettings {
    connector_name: 'webflow';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWebflowDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWebflowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWhoopDiscriminatedConnectionSettings {
    connector_name: 'whoop';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWhoopDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWhoopDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWordpressDiscriminatedConnectionSettings {
    connector_name: 'wordpress';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWordpressDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWordpressDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWrikeDiscriminatedConnectionSettings {
    connector_name: 'wrike';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWrikeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWrikeDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain of your Wrike account (e.g., https://example-subdomain)
       */
      host: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorXeroDiscriminatedConnectionSettings {
    connector_name: 'xero';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorXeroDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorXeroDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorYahooDiscriminatedConnectionSettings {
    connector_name: 'yahoo';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorYahooDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorYahooDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to the API you want to connect to (e.g.,
       * https://fantasysports.yahooapis.com)
       */
      apiDomain: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorYandexDiscriminatedConnectionSettings {
    connector_name: 'yandex';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorYandexDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorYandexDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZapierDiscriminatedConnectionSettings {
    connector_name: 'zapier';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZapierDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZapierDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZendeskDiscriminatedConnectionSettings {
    connector_name: 'zendesk';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZendeskDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZendeskDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Zendesk account (e.g., https://domain.zendesk.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZenefitsDiscriminatedConnectionSettings {
    connector_name: 'zenefits';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZenefitsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZenefitsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZohoDeskDiscriminatedConnectionSettings {
    connector_name: 'zoho-desk';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZohoDeskDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZohoDeskDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension of your Zoho account (e.g., https://accounts.zoho.com/)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZohoDiscriminatedConnectionSettings {
    connector_name: 'zoho';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZohoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZohoDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension of your Zoho account (e.g., https://accounts.zoho.com/)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZoomDiscriminatedConnectionSettings {
    connector_name: 'zoom';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZoomDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZoomDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAirtableDiscriminatedConnectionSettings {
    connector_name: 'airtable';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAirtableDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAirtableDiscriminatedConnectionSettings {
    export interface Settings {
      airtableBase: string;

      apiKey: string;
    }
  }

  export interface ConnectorApolloDiscriminatedConnectionSettings {
    connector_name: 'apollo';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorApolloDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorApolloDiscriminatedConnectionSettings {
    export interface Settings {
      api_key: string;
    }
  }

  export interface ConnectorBrexDiscriminatedConnectionSettings {
    connector_name: 'brex';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBrexDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBrexDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;
    }
  }

  export interface ConnectorCodaDiscriminatedConnectionSettings {
    connector_name: 'coda';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCodaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCodaDiscriminatedConnectionSettings {
    export interface Settings {
      apiKey: string;
    }
  }

  export interface ConnectorFinchDiscriminatedConnectionSettings {
    connector_name: 'finch';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFinchDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFinchDiscriminatedConnectionSettings {
    export interface Settings {
      access_token: string;
    }
  }

  export interface ConnectorFirebaseDiscriminatedConnectionSettings {
    connector_name: 'firebase';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?:
      | ConnectorFirebaseDiscriminatedConnectionSettings.UnionMember0
      | ConnectorFirebaseDiscriminatedConnectionSettings.UnionMember1;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFirebaseDiscriminatedConnectionSettings {
    export interface UnionMember0 {
      role: 'admin';

      serviceAccount: UnionMember0.ServiceAccount;
    }

    export namespace UnionMember0 {
      export interface ServiceAccount {
        project_id: string;

        [k: string]: unknown;
      }
    }

    export interface UnionMember1 {
      authData: UnionMember1.UnionMember0 | UnionMember1.UnionMember1 | UnionMember1.UnionMember2;

      firebaseConfig: UnionMember1.FirebaseConfig;

      role: 'user';
    }

    export namespace UnionMember1 {
      export interface UnionMember0 {
        method: 'userJson';

        userJson: UnionMember0.UserJson;
      }

      export namespace UnionMember0 {
        export interface UserJson {
          appName: string;

          stsTokenManager: { [key: string]: unknown };

          uid: string;

          [k: string]: unknown;
        }
      }

      export interface UnionMember1 {
        customToken: string;

        method: 'customToken';
      }

      export interface UnionMember2 {
        email: string;

        method: 'emailPassword';

        password: string;
      }

      export interface FirebaseConfig {
        apiKey: string;

        appId: string;

        authDomain: string;

        databaseURL: string;

        projectId: string;

        measurementId?: string;

        messagingSenderId?: string;

        storageBucket?: string;
      }
    }
  }

  export interface ConnectorForeceiptDiscriminatedConnectionSettings {
    connector_name: 'foreceipt';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorForeceiptDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorForeceiptDiscriminatedConnectionSettings {
    export interface Settings {
      envName: 'staging' | 'production';

      _id?: unknown;

      credentials?: unknown;
    }
  }

  export interface ConnectorGreenhouseDiscriminatedConnectionSettings {
    connector_name: 'greenhouse';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGreenhouseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGreenhouseDiscriminatedConnectionSettings {
    export interface Settings {
      apiKey: string;
    }
  }

  export interface ConnectorHeronDiscriminatedConnectionSettings {
    connector_name: 'heron';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorLunchmoneyDiscriminatedConnectionSettings {
    connector_name: 'lunchmoney';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorMercuryDiscriminatedConnectionSettings {
    connector_name: 'mercury';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorMergeDiscriminatedConnectionSettings {
    connector_name: 'merge';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMergeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMergeDiscriminatedConnectionSettings {
    export interface Settings {
      accountToken: string;

      accountDetails?: unknown;
    }
  }

  export interface ConnectorMootaDiscriminatedConnectionSettings {
    connector_name: 'moota';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorOnebrickDiscriminatedConnectionSettings {
    connector_name: 'onebrick';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOnebrickDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOnebrickDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;
    }
  }

  export interface ConnectorOpenledgerDiscriminatedConnectionSettings {
    connector_name: 'openledger';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOpenledgerDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOpenledgerDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * Your entity's identifier, aka customer ID
       */
      entity_id: string;
    }
  }

  export interface ConnectorPlaidDiscriminatedConnectionSettings {
    connector_name: 'plaid';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPlaidDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPlaidDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;

      institution?: unknown;

      item?: unknown;

      itemId?: string | null;

      status?: unknown;

      webhookItemError?: null;
    }
  }

  export interface ConnectorPostgresDiscriminatedConnectionSettings {
    connector_name: 'postgres';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPostgresDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPostgresDiscriminatedConnectionSettings {
    export interface Settings {
      databaseURL?: string;
    }
  }

  export interface ConnectorRampDiscriminatedConnectionSettings {
    connector_name: 'ramp';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorRampDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorRampDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken?: string | null;

      startAfterTransactionId?: string | null;
    }
  }

  export interface ConnectorSaltedgeDiscriminatedConnectionSettings {
    connector_name: 'saltedge';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorSharepointOnpremDiscriminatedConnectionSettings {
    connector_name: 'sharepoint-onprem';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSharepointOnpremDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSharepointOnpremDiscriminatedConnectionSettings {
    export interface Settings {
      password: string;

      site_url: string;

      username: string;
    }
  }

  export interface ConnectorSplitwiseDiscriminatedConnectionSettings {
    connector_name: 'splitwise';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSplitwiseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSplitwiseDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;

      currentUser?: Settings.CurrentUser | null;
    }

    export namespace Settings {
      export interface CurrentUser {
        id: number;

        country_code: string;

        custom_picture: boolean;

        date_format: string;

        default_currency: string;

        default_group_id: number;

        email: string;

        first_name: string;

        force_refresh_at: string;

        last_name: string;

        locale: string;

        notifications: CurrentUser.Notifications;

        notifications_count: number;

        notifications_read: string;

        picture: CurrentUser.Picture;

        registration_status: string;
      }

      export namespace CurrentUser {
        export interface Notifications {
          added_as_friend: boolean;

          added_to_group: boolean;

          announcements: boolean;

          bills: boolean;

          expense_added: boolean;

          expense_updated: boolean;

          monthly_summary: boolean;

          payments: boolean;
        }

        export interface Picture {
          large?: string | null;

          medium?: string | null;

          original?: string | null;

          small?: string | null;

          xlarge?: string | null;

          xxlarge?: string | null;
        }
      }
    }
  }

  export interface ConnectorStripeDiscriminatedConnectionSettings {
    connector_name: 'stripe';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorStripeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorStripeDiscriminatedConnectionSettings {
    export interface Settings {
      secretKey: string;
    }
  }

  export interface ConnectorTellerDiscriminatedConnectionSettings {
    connector_name: 'teller';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTellerDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTellerDiscriminatedConnectionSettings {
    export interface Settings {
      token: string;
    }
  }

  export interface ConnectorTogglDiscriminatedConnectionSettings {
    connector_name: 'toggl';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTogglDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTogglDiscriminatedConnectionSettings {
    export interface Settings {
      apiToken: string;

      email?: string | null;

      password?: string | null;
    }
  }

  export interface ConnectorTwentyDiscriminatedConnectionSettings {
    connector_name: 'twenty';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwentyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwentyDiscriminatedConnectionSettings {
    export interface Settings {
      access_token: string;
    }
  }

  export interface ConnectorVenmoDiscriminatedConnectionSettings {
    connector_name: 'venmo';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorVenmoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorVenmoDiscriminatedConnectionSettings {
    export interface Settings {
      credentials?: unknown;

      me?: unknown;
    }
  }

  export interface ConnectorWiseDiscriminatedConnectionSettings {
    connector_name: 'wise';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWiseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWiseDiscriminatedConnectionSettings {
    export interface Settings {
      envName: 'sandbox' | 'live';

      apiToken?: string | null;
    }
  }

  export interface ConnectorYodleeDiscriminatedConnectionSettings {
    connector_name: 'yodlee';

    id?: string;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorYodleeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorYodleeDiscriminatedConnectionSettings {
    export interface Settings {
      loginName: string;

      providerAccountId: number | string;

      accessToken?: Settings.AccessToken | null;

      provider?: null;

      providerAccount?: Settings.ProviderAccount | null;

      user?: null;
    }

    export namespace Settings {
      export interface AccessToken {
        accessToken: string;

        expiresIn: number;

        issuedAt: string;
      }

      export interface ProviderAccount {
        id: number;

        aggregationSource: string;

        createdDate: string;

        dataset: Array<unknown>;

        isManual: boolean;

        providerId: number;

        status:
          | 'LOGIN_IN_PROGRESS'
          | 'USER_INPUT_REQUIRED'
          | 'IN_PROGRESS'
          | 'PARTIAL_SUCCESS'
          | 'SUCCESS'
          | 'FAILED';

        isDeleted?: boolean | null;
      }
    }
  }
}

export type CreateConnnectorConfigResponse =
  | CreateConnnectorConfigResponse.ConnectorAcceloDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAcmeApikeyDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAcmeOauth2DiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAdobeDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAdyenDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAircallDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAmazonDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorApaleoDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAsanaDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAttioDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAuth0DiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAutodeskDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAwsDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorBamboohrDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorBasecampDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorBattlenetDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorBigcommerceDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorBitbucketDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorBitlyDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorBlackbaudDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorBoldsignDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorBoxDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorBraintreeDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorCalendlyDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorClickupDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorCloseDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorConfluenceDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorContentfulDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorContentstackDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorCopperDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorCorosDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorDatevDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorDeelDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorDialpadDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorDigitaloceanDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorDiscordDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorDocusignDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorDropboxDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorEbayDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorEgnyteDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorEnvoyDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorEventbriteDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorExistDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorFacebookDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorFactorialDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorFigmaDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorFitbitDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorFortnoxDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorFreshbooksDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorFrontDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGitHubDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGitlabDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGongDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGoogleCalendarDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGoogleDocsDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGoogleDriveDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGoogleMailDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGoogleSheetDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGorgiasDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGrainDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGumroadDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGustoDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorHarvestDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorHighlevelDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorHubspotDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorInstagramDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorIntercomDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorJiraDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorKeapDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorLeverDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorLinearDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorLinkedinDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorLinkhutDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorMailchimpDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorMiroDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorMondayDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorMuralDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorNamelyDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorNationbuilderDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorNetsuiteDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorNotionDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorOdooDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorOktaDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorOsuDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorOuraDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorOutreachDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorPagerdutyDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorPandadocDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorPayfitDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorPaypalDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorPennylaneDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorPinterestDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorPipedriveDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorPodiumDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorProductboardDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorQualtricsDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorQuickbooksDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorRedditDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSageDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSalesforceDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSalesloftDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSegmentDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorServicem8DiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorServicenowDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSharepointDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorShopifyDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSignnowDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSlackDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSmartsheetDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSnowflakeDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSpotifyDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSquarespaceDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSquareupDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorStackexchangeDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorStravaDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTeamworkDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTicktickDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTimelyDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTodoistDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTremendousDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTsheetsteamDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTumblrDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTwinfieldDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTwitchDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTwitterDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTypeformDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorUberDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorVimeoDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorWakatimeDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorWealthboxDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorWebflowDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorWhoopDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorWordpressDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorWrikeDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorXeroDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorYahooDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorYandexDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorZapierDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorZendeskDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorZenefitsDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorZohoDeskDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorZohoDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorZoomDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorAirtableDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorApolloDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorBrexDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorCodaDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorFinchDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorFirebaseDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorForeceiptDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorGreenhouseDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorHeronDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorLunchmoneyDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorMercuryDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorMergeDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorMootaDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorOnebrickDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorOpenledgerDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorPlaidDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorPostgresDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorRampDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSaltedgeDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSharepointOnpremDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorSplitwiseDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorStripeDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTellerDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTogglDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorTwentyDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorVenmoDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorWiseDiscriminatedConnectorConfig
  | CreateConnnectorConfigResponse.ConnectorYodleeDiscriminatedConnectorConfig;

export namespace CreateConnnectorConfigResponse {
  export interface ConnectorAcceloDiscriminatedConnectorConfig {
    config: ConnectorAcceloDiscriminatedConnectorConfig.Config;

    connector_name: 'accelo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAcceloDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAcmeApikeyDiscriminatedConnectorConfig {
    /**
     * Base configuration for api key connector
     */
    config: unknown;

    connector_name: 'acme-apikey';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorAcmeOauth2DiscriminatedConnectorConfig {
    config: ConnectorAcmeOauth2DiscriminatedConnectorConfig.Config;

    connector_name: 'acme-oauth2';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAcmeOauth2DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAdobeDiscriminatedConnectorConfig {
    config: ConnectorAdobeDiscriminatedConnectorConfig.Config;

    connector_name: 'adobe';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAdobeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAdyenDiscriminatedConnectorConfig {
    config: ConnectorAdyenDiscriminatedConnectorConfig.Config;

    connector_name: 'adyen';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAdyenDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAircallDiscriminatedConnectorConfig {
    config: ConnectorAircallDiscriminatedConnectorConfig.Config;

    connector_name: 'aircall';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAircallDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAmazonDiscriminatedConnectorConfig {
    config: ConnectorAmazonDiscriminatedConnectorConfig.Config;

    connector_name: 'amazon';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAmazonDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorApaleoDiscriminatedConnectorConfig {
    config: ConnectorApaleoDiscriminatedConnectorConfig.Config;

    connector_name: 'apaleo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorApaleoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAsanaDiscriminatedConnectorConfig {
    config: ConnectorAsanaDiscriminatedConnectorConfig.Config;

    connector_name: 'asana';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAsanaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAttioDiscriminatedConnectorConfig {
    config: ConnectorAttioDiscriminatedConnectorConfig.Config;

    connector_name: 'attio';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAttioDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAuth0DiscriminatedConnectorConfig {
    config: ConnectorAuth0DiscriminatedConnectorConfig.Config;

    connector_name: 'auth0';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAuth0DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAutodeskDiscriminatedConnectorConfig {
    config: ConnectorAutodeskDiscriminatedConnectorConfig.Config;

    connector_name: 'autodesk';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAutodeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAwsDiscriminatedConnectorConfig {
    config: ConnectorAwsDiscriminatedConnectorConfig.Config;

    connector_name: 'aws';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAwsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBamboohrDiscriminatedConnectorConfig {
    config: ConnectorBamboohrDiscriminatedConnectorConfig.Config;

    connector_name: 'bamboohr';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBamboohrDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBasecampDiscriminatedConnectorConfig {
    config: ConnectorBasecampDiscriminatedConnectorConfig.Config;

    connector_name: 'basecamp';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBasecampDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBattlenetDiscriminatedConnectorConfig {
    config: ConnectorBattlenetDiscriminatedConnectorConfig.Config;

    connector_name: 'battlenet';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBattlenetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBigcommerceDiscriminatedConnectorConfig {
    config: ConnectorBigcommerceDiscriminatedConnectorConfig.Config;

    connector_name: 'bigcommerce';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBigcommerceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBitbucketDiscriminatedConnectorConfig {
    config: ConnectorBitbucketDiscriminatedConnectorConfig.Config;

    connector_name: 'bitbucket';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBitbucketDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBitlyDiscriminatedConnectorConfig {
    config: ConnectorBitlyDiscriminatedConnectorConfig.Config;

    connector_name: 'bitly';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBitlyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBlackbaudDiscriminatedConnectorConfig {
    config: ConnectorBlackbaudDiscriminatedConnectorConfig.Config;

    connector_name: 'blackbaud';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBlackbaudDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBoldsignDiscriminatedConnectorConfig {
    config: ConnectorBoldsignDiscriminatedConnectorConfig.Config;

    connector_name: 'boldsign';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBoldsignDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBoxDiscriminatedConnectorConfig {
    config: ConnectorBoxDiscriminatedConnectorConfig.Config;

    connector_name: 'box';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBoxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBraintreeDiscriminatedConnectorConfig {
    config: ConnectorBraintreeDiscriminatedConnectorConfig.Config;

    connector_name: 'braintree';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBraintreeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCalendlyDiscriminatedConnectorConfig {
    config: ConnectorCalendlyDiscriminatedConnectorConfig.Config;

    connector_name: 'calendly';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCalendlyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorClickupDiscriminatedConnectorConfig {
    config: ConnectorClickupDiscriminatedConnectorConfig.Config;

    connector_name: 'clickup';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorClickupDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCloseDiscriminatedConnectorConfig {
    config: ConnectorCloseDiscriminatedConnectorConfig.Config;

    connector_name: 'close';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCloseDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorConfluenceDiscriminatedConnectorConfig {
    config: ConnectorConfluenceDiscriminatedConnectorConfig.Config;

    connector_name: 'confluence';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorConfluenceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorContentfulDiscriminatedConnectorConfig {
    config: ConnectorContentfulDiscriminatedConnectorConfig.Config;

    connector_name: 'contentful';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorContentfulDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorContentstackDiscriminatedConnectorConfig {
    config: ConnectorContentstackDiscriminatedConnectorConfig.Config;

    connector_name: 'contentstack';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorContentstackDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCopperDiscriminatedConnectorConfig {
    config: ConnectorCopperDiscriminatedConnectorConfig.Config;

    connector_name: 'copper';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCopperDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCorosDiscriminatedConnectorConfig {
    config: ConnectorCorosDiscriminatedConnectorConfig.Config;

    connector_name: 'coros';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCorosDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDatevDiscriminatedConnectorConfig {
    config: ConnectorDatevDiscriminatedConnectorConfig.Config;

    connector_name: 'datev';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDatevDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDeelDiscriminatedConnectorConfig {
    config: ConnectorDeelDiscriminatedConnectorConfig.Config;

    connector_name: 'deel';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDeelDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDialpadDiscriminatedConnectorConfig {
    config: ConnectorDialpadDiscriminatedConnectorConfig.Config;

    connector_name: 'dialpad';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDialpadDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDigitaloceanDiscriminatedConnectorConfig {
    config: ConnectorDigitaloceanDiscriminatedConnectorConfig.Config;

    connector_name: 'digitalocean';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDigitaloceanDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDiscordDiscriminatedConnectorConfig {
    config: ConnectorDiscordDiscriminatedConnectorConfig.Config;

    connector_name: 'discord';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDiscordDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDocusignDiscriminatedConnectorConfig {
    config: ConnectorDocusignDiscriminatedConnectorConfig.Config;

    connector_name: 'docusign';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDocusignDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDropboxDiscriminatedConnectorConfig {
    config: ConnectorDropboxDiscriminatedConnectorConfig.Config;

    connector_name: 'dropbox';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDropboxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEbayDiscriminatedConnectorConfig {
    config: ConnectorEbayDiscriminatedConnectorConfig.Config;

    connector_name: 'ebay';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEbayDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEgnyteDiscriminatedConnectorConfig {
    config: ConnectorEgnyteDiscriminatedConnectorConfig.Config;

    connector_name: 'egnyte';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEgnyteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEnvoyDiscriminatedConnectorConfig {
    config: ConnectorEnvoyDiscriminatedConnectorConfig.Config;

    connector_name: 'envoy';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEnvoyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEventbriteDiscriminatedConnectorConfig {
    config: ConnectorEventbriteDiscriminatedConnectorConfig.Config;

    connector_name: 'eventbrite';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEventbriteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorExistDiscriminatedConnectorConfig {
    config: ConnectorExistDiscriminatedConnectorConfig.Config;

    connector_name: 'exist';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorExistDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFacebookDiscriminatedConnectorConfig {
    config: ConnectorFacebookDiscriminatedConnectorConfig.Config;

    connector_name: 'facebook';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFacebookDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFactorialDiscriminatedConnectorConfig {
    config: ConnectorFactorialDiscriminatedConnectorConfig.Config;

    connector_name: 'factorial';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFactorialDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFigmaDiscriminatedConnectorConfig {
    config: ConnectorFigmaDiscriminatedConnectorConfig.Config;

    connector_name: 'figma';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFigmaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFitbitDiscriminatedConnectorConfig {
    config: ConnectorFitbitDiscriminatedConnectorConfig.Config;

    connector_name: 'fitbit';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFitbitDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFortnoxDiscriminatedConnectorConfig {
    config: ConnectorFortnoxDiscriminatedConnectorConfig.Config;

    connector_name: 'fortnox';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFortnoxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFreshbooksDiscriminatedConnectorConfig {
    config: ConnectorFreshbooksDiscriminatedConnectorConfig.Config;

    connector_name: 'freshbooks';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFreshbooksDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFrontDiscriminatedConnectorConfig {
    config: ConnectorFrontDiscriminatedConnectorConfig.Config;

    connector_name: 'front';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFrontDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGitHubDiscriminatedConnectorConfig {
    config: ConnectorGitHubDiscriminatedConnectorConfig.Config;

    connector_name: 'github';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGitHubDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGitlabDiscriminatedConnectorConfig {
    config: ConnectorGitlabDiscriminatedConnectorConfig.Config;

    connector_name: 'gitlab';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGitlabDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGongDiscriminatedConnectorConfig {
    config: ConnectorGongDiscriminatedConnectorConfig.Config;

    connector_name: 'gong';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGongDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleCalendarDiscriminatedConnectorConfig {
    config: ConnectorGoogleCalendarDiscriminatedConnectorConfig.Config;

    connector_name: 'google-calendar';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleCalendarDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleDocsDiscriminatedConnectorConfig {
    config: ConnectorGoogleDocsDiscriminatedConnectorConfig.Config;

    connector_name: 'google-docs';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDocsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleDriveDiscriminatedConnectorConfig {
    config: ConnectorGoogleDriveDiscriminatedConnectorConfig.Config;

    connector_name: 'google-drive';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDriveDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleMailDiscriminatedConnectorConfig {
    config: ConnectorGoogleMailDiscriminatedConnectorConfig.Config;

    connector_name: 'google-mail';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleMailDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleSheetDiscriminatedConnectorConfig {
    config: ConnectorGoogleSheetDiscriminatedConnectorConfig.Config;

    connector_name: 'google-sheet';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleSheetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGorgiasDiscriminatedConnectorConfig {
    config: ConnectorGorgiasDiscriminatedConnectorConfig.Config;

    connector_name: 'gorgias';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGorgiasDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGrainDiscriminatedConnectorConfig {
    config: ConnectorGrainDiscriminatedConnectorConfig.Config;

    connector_name: 'grain';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGrainDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGumroadDiscriminatedConnectorConfig {
    config: ConnectorGumroadDiscriminatedConnectorConfig.Config;

    connector_name: 'gumroad';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGumroadDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGustoDiscriminatedConnectorConfig {
    config: ConnectorGustoDiscriminatedConnectorConfig.Config;

    connector_name: 'gusto';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGustoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHarvestDiscriminatedConnectorConfig {
    config: ConnectorHarvestDiscriminatedConnectorConfig.Config;

    connector_name: 'harvest';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHarvestDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHighlevelDiscriminatedConnectorConfig {
    config: ConnectorHighlevelDiscriminatedConnectorConfig.Config;

    connector_name: 'highlevel';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHighlevelDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHubspotDiscriminatedConnectorConfig {
    config: ConnectorHubspotDiscriminatedConnectorConfig.Config;

    connector_name: 'hubspot';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHubspotDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorInstagramDiscriminatedConnectorConfig {
    config: ConnectorInstagramDiscriminatedConnectorConfig.Config;

    connector_name: 'instagram';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorInstagramDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorIntercomDiscriminatedConnectorConfig {
    config: ConnectorIntercomDiscriminatedConnectorConfig.Config;

    connector_name: 'intercom';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorIntercomDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorJiraDiscriminatedConnectorConfig {
    config: ConnectorJiraDiscriminatedConnectorConfig.Config;

    connector_name: 'jira';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorJiraDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorKeapDiscriminatedConnectorConfig {
    config: ConnectorKeapDiscriminatedConnectorConfig.Config;

    connector_name: 'keap';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorKeapDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLeverDiscriminatedConnectorConfig {
    config: ConnectorLeverDiscriminatedConnectorConfig.Config;

    connector_name: 'lever';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLeverDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinearDiscriminatedConnectorConfig {
    config: ConnectorLinearDiscriminatedConnectorConfig.Config;

    connector_name: 'linear';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinearDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinkedinDiscriminatedConnectorConfig {
    config: ConnectorLinkedinDiscriminatedConnectorConfig.Config;

    connector_name: 'linkedin';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinkedinDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinkhutDiscriminatedConnectorConfig {
    config: ConnectorLinkhutDiscriminatedConnectorConfig.Config;

    connector_name: 'linkhut';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinkhutDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMailchimpDiscriminatedConnectorConfig {
    config: ConnectorMailchimpDiscriminatedConnectorConfig.Config;

    connector_name: 'mailchimp';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMailchimpDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMiroDiscriminatedConnectorConfig {
    config: ConnectorMiroDiscriminatedConnectorConfig.Config;

    connector_name: 'miro';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMiroDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMondayDiscriminatedConnectorConfig {
    config: ConnectorMondayDiscriminatedConnectorConfig.Config;

    connector_name: 'monday';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMondayDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMuralDiscriminatedConnectorConfig {
    config: ConnectorMuralDiscriminatedConnectorConfig.Config;

    connector_name: 'mural';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMuralDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNamelyDiscriminatedConnectorConfig {
    config: ConnectorNamelyDiscriminatedConnectorConfig.Config;

    connector_name: 'namely';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNamelyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNationbuilderDiscriminatedConnectorConfig {
    config: ConnectorNationbuilderDiscriminatedConnectorConfig.Config;

    connector_name: 'nationbuilder';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNationbuilderDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNetsuiteDiscriminatedConnectorConfig {
    config: ConnectorNetsuiteDiscriminatedConnectorConfig.Config;

    connector_name: 'netsuite';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNetsuiteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNotionDiscriminatedConnectorConfig {
    config: ConnectorNotionDiscriminatedConnectorConfig.Config;

    connector_name: 'notion';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNotionDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOdooDiscriminatedConnectorConfig {
    config: ConnectorOdooDiscriminatedConnectorConfig.Config;

    connector_name: 'odoo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOdooDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOktaDiscriminatedConnectorConfig {
    config: ConnectorOktaDiscriminatedConnectorConfig.Config;

    connector_name: 'okta';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOktaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOsuDiscriminatedConnectorConfig {
    config: ConnectorOsuDiscriminatedConnectorConfig.Config;

    connector_name: 'osu';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOsuDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOuraDiscriminatedConnectorConfig {
    config: ConnectorOuraDiscriminatedConnectorConfig.Config;

    connector_name: 'oura';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOuraDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOutreachDiscriminatedConnectorConfig {
    config: ConnectorOutreachDiscriminatedConnectorConfig.Config;

    connector_name: 'outreach';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOutreachDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPagerdutyDiscriminatedConnectorConfig {
    config: ConnectorPagerdutyDiscriminatedConnectorConfig.Config;

    connector_name: 'pagerduty';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPagerdutyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPandadocDiscriminatedConnectorConfig {
    config: ConnectorPandadocDiscriminatedConnectorConfig.Config;

    connector_name: 'pandadoc';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPandadocDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPayfitDiscriminatedConnectorConfig {
    config: ConnectorPayfitDiscriminatedConnectorConfig.Config;

    connector_name: 'payfit';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPayfitDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPaypalDiscriminatedConnectorConfig {
    config: ConnectorPaypalDiscriminatedConnectorConfig.Config;

    connector_name: 'paypal';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPaypalDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPennylaneDiscriminatedConnectorConfig {
    config: ConnectorPennylaneDiscriminatedConnectorConfig.Config;

    connector_name: 'pennylane';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPennylaneDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPinterestDiscriminatedConnectorConfig {
    config: ConnectorPinterestDiscriminatedConnectorConfig.Config;

    connector_name: 'pinterest';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPinterestDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPipedriveDiscriminatedConnectorConfig {
    config: ConnectorPipedriveDiscriminatedConnectorConfig.Config;

    connector_name: 'pipedrive';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPipedriveDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPodiumDiscriminatedConnectorConfig {
    config: ConnectorPodiumDiscriminatedConnectorConfig.Config;

    connector_name: 'podium';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPodiumDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorProductboardDiscriminatedConnectorConfig {
    config: ConnectorProductboardDiscriminatedConnectorConfig.Config;

    connector_name: 'productboard';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorProductboardDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorQualtricsDiscriminatedConnectorConfig {
    config: ConnectorQualtricsDiscriminatedConnectorConfig.Config;

    connector_name: 'qualtrics';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorQualtricsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorQuickbooksDiscriminatedConnectorConfig {
    config: ConnectorQuickbooksDiscriminatedConnectorConfig.Config;

    connector_name: 'quickbooks';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorQuickbooksDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorRedditDiscriminatedConnectorConfig {
    config: ConnectorRedditDiscriminatedConnectorConfig.Config;

    connector_name: 'reddit';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorRedditDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSageDiscriminatedConnectorConfig {
    config: ConnectorSageDiscriminatedConnectorConfig.Config;

    connector_name: 'sage';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSageDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSalesforceDiscriminatedConnectorConfig {
    config: ConnectorSalesforceDiscriminatedConnectorConfig.Config;

    connector_name: 'salesforce';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSalesforceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSalesloftDiscriminatedConnectorConfig {
    config: ConnectorSalesloftDiscriminatedConnectorConfig.Config;

    connector_name: 'salesloft';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSalesloftDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSegmentDiscriminatedConnectorConfig {
    config: ConnectorSegmentDiscriminatedConnectorConfig.Config;

    connector_name: 'segment';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSegmentDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorServicem8DiscriminatedConnectorConfig {
    config: ConnectorServicem8DiscriminatedConnectorConfig.Config;

    connector_name: 'servicem8';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorServicem8DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorServicenowDiscriminatedConnectorConfig {
    config: ConnectorServicenowDiscriminatedConnectorConfig.Config;

    connector_name: 'servicenow';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorServicenowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSharepointDiscriminatedConnectorConfig {
    config: ConnectorSharepointDiscriminatedConnectorConfig.Config;

    connector_name: 'sharepoint';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSharepointDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorShopifyDiscriminatedConnectorConfig {
    config: ConnectorShopifyDiscriminatedConnectorConfig.Config;

    connector_name: 'shopify';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorShopifyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSignnowDiscriminatedConnectorConfig {
    config: ConnectorSignnowDiscriminatedConnectorConfig.Config;

    connector_name: 'signnow';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSignnowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSlackDiscriminatedConnectorConfig {
    config: ConnectorSlackDiscriminatedConnectorConfig.Config;

    connector_name: 'slack';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSlackDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSmartsheetDiscriminatedConnectorConfig {
    config: ConnectorSmartsheetDiscriminatedConnectorConfig.Config;

    connector_name: 'smartsheet';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSmartsheetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSnowflakeDiscriminatedConnectorConfig {
    config: ConnectorSnowflakeDiscriminatedConnectorConfig.Config;

    connector_name: 'snowflake';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSnowflakeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSpotifyDiscriminatedConnectorConfig {
    config: ConnectorSpotifyDiscriminatedConnectorConfig.Config;

    connector_name: 'spotify';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSpotifyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSquarespaceDiscriminatedConnectorConfig {
    config: ConnectorSquarespaceDiscriminatedConnectorConfig.Config;

    connector_name: 'squarespace';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSquarespaceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSquareupDiscriminatedConnectorConfig {
    config: ConnectorSquareupDiscriminatedConnectorConfig.Config;

    connector_name: 'squareup';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSquareupDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorStackexchangeDiscriminatedConnectorConfig {
    config: ConnectorStackexchangeDiscriminatedConnectorConfig.Config;

    connector_name: 'stackexchange';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStackexchangeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorStravaDiscriminatedConnectorConfig {
    config: ConnectorStravaDiscriminatedConnectorConfig.Config;

    connector_name: 'strava';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStravaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTeamworkDiscriminatedConnectorConfig {
    config: ConnectorTeamworkDiscriminatedConnectorConfig.Config;

    connector_name: 'teamwork';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTeamworkDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTicktickDiscriminatedConnectorConfig {
    config: ConnectorTicktickDiscriminatedConnectorConfig.Config;

    connector_name: 'ticktick';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTicktickDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTimelyDiscriminatedConnectorConfig {
    config: ConnectorTimelyDiscriminatedConnectorConfig.Config;

    connector_name: 'timely';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTimelyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTodoistDiscriminatedConnectorConfig {
    config: ConnectorTodoistDiscriminatedConnectorConfig.Config;

    connector_name: 'todoist';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTodoistDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTremendousDiscriminatedConnectorConfig {
    config: ConnectorTremendousDiscriminatedConnectorConfig.Config;

    connector_name: 'tremendous';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTremendousDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTsheetsteamDiscriminatedConnectorConfig {
    config: ConnectorTsheetsteamDiscriminatedConnectorConfig.Config;

    connector_name: 'tsheetsteam';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTsheetsteamDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTumblrDiscriminatedConnectorConfig {
    config: ConnectorTumblrDiscriminatedConnectorConfig.Config;

    connector_name: 'tumblr';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTumblrDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwinfieldDiscriminatedConnectorConfig {
    config: ConnectorTwinfieldDiscriminatedConnectorConfig.Config;

    connector_name: 'twinfield';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwinfieldDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwitchDiscriminatedConnectorConfig {
    config: ConnectorTwitchDiscriminatedConnectorConfig.Config;

    connector_name: 'twitch';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwitchDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwitterDiscriminatedConnectorConfig {
    config: ConnectorTwitterDiscriminatedConnectorConfig.Config;

    connector_name: 'twitter';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwitterDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTypeformDiscriminatedConnectorConfig {
    config: ConnectorTypeformDiscriminatedConnectorConfig.Config;

    connector_name: 'typeform';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTypeformDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorUberDiscriminatedConnectorConfig {
    config: ConnectorUberDiscriminatedConnectorConfig.Config;

    connector_name: 'uber';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorUberDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorVimeoDiscriminatedConnectorConfig {
    config: ConnectorVimeoDiscriminatedConnectorConfig.Config;

    connector_name: 'vimeo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorVimeoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWakatimeDiscriminatedConnectorConfig {
    config: ConnectorWakatimeDiscriminatedConnectorConfig.Config;

    connector_name: 'wakatime';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWakatimeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWealthboxDiscriminatedConnectorConfig {
    config: ConnectorWealthboxDiscriminatedConnectorConfig.Config;

    connector_name: 'wealthbox';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWealthboxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWebflowDiscriminatedConnectorConfig {
    config: ConnectorWebflowDiscriminatedConnectorConfig.Config;

    connector_name: 'webflow';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWebflowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWhoopDiscriminatedConnectorConfig {
    config: ConnectorWhoopDiscriminatedConnectorConfig.Config;

    connector_name: 'whoop';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWhoopDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWordpressDiscriminatedConnectorConfig {
    config: ConnectorWordpressDiscriminatedConnectorConfig.Config;

    connector_name: 'wordpress';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWordpressDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWrikeDiscriminatedConnectorConfig {
    config: ConnectorWrikeDiscriminatedConnectorConfig.Config;

    connector_name: 'wrike';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWrikeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorXeroDiscriminatedConnectorConfig {
    config: ConnectorXeroDiscriminatedConnectorConfig.Config;

    connector_name: 'xero';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorXeroDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorYahooDiscriminatedConnectorConfig {
    config: ConnectorYahooDiscriminatedConnectorConfig.Config;

    connector_name: 'yahoo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYahooDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorYandexDiscriminatedConnectorConfig {
    config: ConnectorYandexDiscriminatedConnectorConfig.Config;

    connector_name: 'yandex';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYandexDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZapierDiscriminatedConnectorConfig {
    config: ConnectorZapierDiscriminatedConnectorConfig.Config;

    connector_name: 'zapier';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZapierDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZendeskDiscriminatedConnectorConfig {
    config: ConnectorZendeskDiscriminatedConnectorConfig.Config;

    connector_name: 'zendesk';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZendeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZenefitsDiscriminatedConnectorConfig {
    config: ConnectorZenefitsDiscriminatedConnectorConfig.Config;

    connector_name: 'zenefits';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZenefitsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZohoDeskDiscriminatedConnectorConfig {
    config: ConnectorZohoDeskDiscriminatedConnectorConfig.Config;

    connector_name: 'zoho-desk';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZohoDeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZohoDiscriminatedConnectorConfig {
    config: ConnectorZohoDiscriminatedConnectorConfig.Config;

    connector_name: 'zoho';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZohoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZoomDiscriminatedConnectorConfig {
    config: ConnectorZoomDiscriminatedConnectorConfig.Config;

    connector_name: 'zoom';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZoomDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAirtableDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'airtable';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorApolloDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'apollo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorBrexDiscriminatedConnectorConfig {
    config: ConnectorBrexDiscriminatedConnectorConfig.Config;

    connector_name: 'brex';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBrexDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorCodaDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'coda';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorFinchDiscriminatedConnectorConfig {
    config: ConnectorFinchDiscriminatedConnectorConfig.Config;

    connector_name: 'finch';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFinchDiscriminatedConnectorConfig {
    export interface Config {
      client_id: string;

      client_secret: string;

      /**
       * Finch products to access, @see
       * https://developer.tryfinch.com/api-reference/development-guides/Permissions
       */
      products: Array<
        | 'company'
        | 'directory'
        | 'individual'
        | 'ssn'
        | 'employment'
        | 'payment'
        | 'pay_statement'
        | 'benefits'
      >;

      /**
       * Finch API version
       */
      api_version?: string;
    }
  }

  export interface ConnectorFirebaseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'firebase';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorForeceiptDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'foreceipt';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorGreenhouseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'greenhouse';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorHeronDiscriminatedConnectorConfig {
    config: ConnectorHeronDiscriminatedConnectorConfig.Config;

    connector_name: 'heron';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHeronDiscriminatedConnectorConfig {
    export interface Config {
      apiKey: string;
    }
  }

  export interface ConnectorLunchmoneyDiscriminatedConnectorConfig {
    config: ConnectorLunchmoneyDiscriminatedConnectorConfig.Config;

    connector_name: 'lunchmoney';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLunchmoneyDiscriminatedConnectorConfig {
    export interface Config {
      accessToken: string;
    }
  }

  export interface ConnectorMercuryDiscriminatedConnectorConfig {
    config: ConnectorMercuryDiscriminatedConnectorConfig.Config;

    connector_name: 'mercury';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMercuryDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorMergeDiscriminatedConnectorConfig {
    config: ConnectorMergeDiscriminatedConnectorConfig.Config;

    connector_name: 'merge';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMergeDiscriminatedConnectorConfig {
    export interface Config {
      apiKey: string;
    }
  }

  export interface ConnectorMootaDiscriminatedConnectorConfig {
    config: ConnectorMootaDiscriminatedConnectorConfig.Config;

    connector_name: 'moota';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMootaDiscriminatedConnectorConfig {
    export interface Config {
      token: string;
    }
  }

  export interface ConnectorOnebrickDiscriminatedConnectorConfig {
    config: ConnectorOnebrickDiscriminatedConnectorConfig.Config;

    connector_name: 'onebrick';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOnebrickDiscriminatedConnectorConfig {
    export interface Config {
      clientId: string;

      clientSecret: string;

      envName: 'sandbox' | 'production';

      publicToken: string;

      accessToken?: string | null;

      redirectUrl?: string | null;
    }
  }

  export interface ConnectorOpenledgerDiscriminatedConnectorConfig {
    config: ConnectorOpenledgerDiscriminatedConnectorConfig.Config;

    connector_name: 'openledger';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOpenledgerDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API endpoint
       */
      api_url: string;

      /**
       * Your developer ID for authentication
       */
      developer_id: string;

      /**
       * Your developer secret
       */
      developer_secret: string;

      /**
       * Switch to "production" for live data
       */
      environment: 'development' | 'production';
    }
  }

  export interface ConnectorPlaidDiscriminatedConnectorConfig {
    config: ConnectorPlaidDiscriminatedConnectorConfig.Config;

    connector_name: 'plaid';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPlaidDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * The name of your application, as it should be displayed in Link. Maximum length
       * of 30 characters. If a value longer than 30 characters is provided, Link will
       * display "This Application" instead.
       */
      clientName: string;

      countryCodes: Array<
        | 'US'
        | 'GB'
        | 'ES'
        | 'NL'
        | 'FR'
        | 'IE'
        | 'CA'
        | 'DE'
        | 'IT'
        | 'PL'
        | 'DK'
        | 'NO'
        | 'SE'
        | 'EE'
        | 'LT'
        | 'LV'
      >;

      envName: 'sandbox' | 'development' | 'production';

      language: 'en' | 'fr' | 'es' | 'nl' | 'de';

      products: Array<
        | 'assets'
        | 'auth'
        | 'balance'
        | 'identity'
        | 'investments'
        | 'liabilities'
        | 'payment_initiation'
        | 'identity_verification'
        | 'transactions'
        | 'credit_details'
        | 'income'
        | 'income_verification'
        | 'deposit_switch'
        | 'standing_orders'
        | 'transfer'
        | 'employment'
        | 'recurring_transactions'
      >;

      credentials?: Config.Credentials | null;
    }

    export namespace Config {
      export interface Credentials {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorPostgresDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'postgres';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorRampDiscriminatedConnectorConfig {
    config: ConnectorRampDiscriminatedConnectorConfig.Config;

    connector_name: 'ramp';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorRampDiscriminatedConnectorConfig {
    export interface Config {
      oauth: Config.OAuth;
    }

    export namespace Config {
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorSaltedgeDiscriminatedConnectorConfig {
    config: ConnectorSaltedgeDiscriminatedConnectorConfig.Config;

    connector_name: 'saltedge';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSaltedgeDiscriminatedConnectorConfig {
    export interface Config {
      appId: string;

      secret: string;

      url?: string | null;
    }
  }

  export interface ConnectorSharepointOnpremDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'sharepoint-onprem';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorSplitwiseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'splitwise';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorStripeDiscriminatedConnectorConfig {
    config: ConnectorStripeDiscriminatedConnectorConfig.Config;

    connector_name: 'stripe';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStripeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorTellerDiscriminatedConnectorConfig {
    config: ConnectorTellerDiscriminatedConnectorConfig.Config;

    connector_name: 'teller';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTellerDiscriminatedConnectorConfig {
    export interface Config {
      applicationId: string;

      token?: string | null;
    }
  }

  export interface ConnectorTogglDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'toggl';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorTwentyDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'twenty';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorVenmoDiscriminatedConnectorConfig {
    config: ConnectorVenmoDiscriminatedConnectorConfig.Config;

    connector_name: 'venmo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorVenmoDiscriminatedConnectorConfig {
    export interface Config {
      proxy?: Config.Proxy | null;

      v1BaseURL?: string | null;

      v5BaseURL?: string | null;
    }

    export namespace Config {
      export interface Proxy {
        cert: string;

        url: string;
      }
    }
  }

  export interface ConnectorWiseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'wise';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorYodleeDiscriminatedConnectorConfig {
    config: ConnectorYodleeDiscriminatedConnectorConfig.Config;

    connector_name: 'yodlee';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYodleeDiscriminatedConnectorConfig {
    export interface Config {
      adminLoginName: string;

      clientId: string;

      clientSecret: string;

      envName: 'sandbox' | 'development' | 'production';

      proxy?: Config.Proxy | null;

      sandboxLoginName?: string | null;
    }

    export namespace Config {
      export interface Proxy {
        cert: string;

        url: string;
      }
    }
  }
}

export interface CreateTokenResponse {
  /**
   * A short-lived publishable authentication token to use for customer api requests
   * from the frontend. This token by default expires in 30 days unless otherwise
   * specified via the validity_in_seconds parameter.
   */
  token: string;

  /**
   * A long-lived customer API key to use for API requests. Not meant to be published
   * to the frontend.
   */
  api_key: string | null;

  /**
   * A link that can be shared with customers to use @Connect in any browser. This
   * link will expire in 30 days by default unless otherwise specified via the
   * validity_in_seconds parameter.
   */
  magic_link_url: string;
}

export interface DeleteConnectionResponse {
  /**
   * The id of the connection, starts with `conn_`
   */
  id: string;
}

export type GetConectorConfigResponse =
  | GetConectorConfigResponse.ConnectorAcceloDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAcmeApikeyDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAcmeOauth2DiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAdobeDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAdyenDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAircallDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAmazonDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorApaleoDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAsanaDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAttioDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAuth0DiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAutodeskDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAwsDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorBamboohrDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorBasecampDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorBattlenetDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorBigcommerceDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorBitbucketDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorBitlyDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorBlackbaudDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorBoldsignDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorBoxDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorBraintreeDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorCalendlyDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorClickupDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorCloseDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorConfluenceDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorContentfulDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorContentstackDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorCopperDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorCorosDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorDatevDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorDeelDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorDialpadDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorDigitaloceanDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorDiscordDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorDocusignDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorDropboxDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorEbayDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorEgnyteDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorEnvoyDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorEventbriteDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorExistDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorFacebookDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorFactorialDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorFigmaDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorFitbitDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorFortnoxDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorFreshbooksDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorFrontDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGitHubDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGitlabDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGongDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGoogleCalendarDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGoogleDocsDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGoogleDriveDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGoogleMailDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGoogleSheetDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGorgiasDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGrainDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGumroadDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGustoDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorHarvestDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorHighlevelDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorHubspotDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorInstagramDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorIntercomDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorJiraDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorKeapDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorLeverDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorLinearDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorLinkedinDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorLinkhutDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorMailchimpDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorMiroDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorMondayDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorMuralDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorNamelyDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorNationbuilderDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorNetsuiteDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorNotionDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorOdooDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorOktaDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorOsuDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorOuraDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorOutreachDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorPagerdutyDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorPandadocDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorPayfitDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorPaypalDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorPennylaneDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorPinterestDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorPipedriveDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorPodiumDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorProductboardDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorQualtricsDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorQuickbooksDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorRedditDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSageDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSalesforceDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSalesloftDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSegmentDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorServicem8DiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorServicenowDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSharepointDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorShopifyDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSignnowDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSlackDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSmartsheetDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSnowflakeDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSpotifyDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSquarespaceDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSquareupDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorStackexchangeDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorStravaDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTeamworkDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTicktickDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTimelyDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTodoistDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTremendousDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTsheetsteamDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTumblrDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTwinfieldDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTwitchDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTwitterDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTypeformDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorUberDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorVimeoDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorWakatimeDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorWealthboxDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorWebflowDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorWhoopDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorWordpressDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorWrikeDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorXeroDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorYahooDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorYandexDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorZapierDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorZendeskDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorZenefitsDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorZohoDeskDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorZohoDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorZoomDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorAirtableDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorApolloDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorBrexDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorCodaDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorFinchDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorFirebaseDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorForeceiptDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorGreenhouseDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorHeronDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorLunchmoneyDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorMercuryDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorMergeDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorMootaDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorOnebrickDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorOpenledgerDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorPlaidDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorPostgresDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorRampDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSaltedgeDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSharepointOnpremDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorSplitwiseDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorStripeDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTellerDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTogglDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorTwentyDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorVenmoDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorWiseDiscriminatedConnectorConfig
  | GetConectorConfigResponse.ConnectorYodleeDiscriminatedConnectorConfig;

export namespace GetConectorConfigResponse {
  export interface ConnectorAcceloDiscriminatedConnectorConfig {
    config: ConnectorAcceloDiscriminatedConnectorConfig.Config;

    connector_name: 'accelo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAcceloDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAcmeApikeyDiscriminatedConnectorConfig {
    /**
     * Base configuration for api key connector
     */
    config: unknown;

    connector_name: 'acme-apikey';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorAcmeOauth2DiscriminatedConnectorConfig {
    config: ConnectorAcmeOauth2DiscriminatedConnectorConfig.Config;

    connector_name: 'acme-oauth2';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAcmeOauth2DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAdobeDiscriminatedConnectorConfig {
    config: ConnectorAdobeDiscriminatedConnectorConfig.Config;

    connector_name: 'adobe';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAdobeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAdyenDiscriminatedConnectorConfig {
    config: ConnectorAdyenDiscriminatedConnectorConfig.Config;

    connector_name: 'adyen';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAdyenDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAircallDiscriminatedConnectorConfig {
    config: ConnectorAircallDiscriminatedConnectorConfig.Config;

    connector_name: 'aircall';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAircallDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAmazonDiscriminatedConnectorConfig {
    config: ConnectorAmazonDiscriminatedConnectorConfig.Config;

    connector_name: 'amazon';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAmazonDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorApaleoDiscriminatedConnectorConfig {
    config: ConnectorApaleoDiscriminatedConnectorConfig.Config;

    connector_name: 'apaleo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorApaleoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAsanaDiscriminatedConnectorConfig {
    config: ConnectorAsanaDiscriminatedConnectorConfig.Config;

    connector_name: 'asana';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAsanaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAttioDiscriminatedConnectorConfig {
    config: ConnectorAttioDiscriminatedConnectorConfig.Config;

    connector_name: 'attio';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAttioDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAuth0DiscriminatedConnectorConfig {
    config: ConnectorAuth0DiscriminatedConnectorConfig.Config;

    connector_name: 'auth0';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAuth0DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAutodeskDiscriminatedConnectorConfig {
    config: ConnectorAutodeskDiscriminatedConnectorConfig.Config;

    connector_name: 'autodesk';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAutodeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAwsDiscriminatedConnectorConfig {
    config: ConnectorAwsDiscriminatedConnectorConfig.Config;

    connector_name: 'aws';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAwsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBamboohrDiscriminatedConnectorConfig {
    config: ConnectorBamboohrDiscriminatedConnectorConfig.Config;

    connector_name: 'bamboohr';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBamboohrDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBasecampDiscriminatedConnectorConfig {
    config: ConnectorBasecampDiscriminatedConnectorConfig.Config;

    connector_name: 'basecamp';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBasecampDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBattlenetDiscriminatedConnectorConfig {
    config: ConnectorBattlenetDiscriminatedConnectorConfig.Config;

    connector_name: 'battlenet';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBattlenetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBigcommerceDiscriminatedConnectorConfig {
    config: ConnectorBigcommerceDiscriminatedConnectorConfig.Config;

    connector_name: 'bigcommerce';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBigcommerceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBitbucketDiscriminatedConnectorConfig {
    config: ConnectorBitbucketDiscriminatedConnectorConfig.Config;

    connector_name: 'bitbucket';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBitbucketDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBitlyDiscriminatedConnectorConfig {
    config: ConnectorBitlyDiscriminatedConnectorConfig.Config;

    connector_name: 'bitly';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBitlyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBlackbaudDiscriminatedConnectorConfig {
    config: ConnectorBlackbaudDiscriminatedConnectorConfig.Config;

    connector_name: 'blackbaud';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBlackbaudDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBoldsignDiscriminatedConnectorConfig {
    config: ConnectorBoldsignDiscriminatedConnectorConfig.Config;

    connector_name: 'boldsign';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBoldsignDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBoxDiscriminatedConnectorConfig {
    config: ConnectorBoxDiscriminatedConnectorConfig.Config;

    connector_name: 'box';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBoxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBraintreeDiscriminatedConnectorConfig {
    config: ConnectorBraintreeDiscriminatedConnectorConfig.Config;

    connector_name: 'braintree';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBraintreeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCalendlyDiscriminatedConnectorConfig {
    config: ConnectorCalendlyDiscriminatedConnectorConfig.Config;

    connector_name: 'calendly';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCalendlyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorClickupDiscriminatedConnectorConfig {
    config: ConnectorClickupDiscriminatedConnectorConfig.Config;

    connector_name: 'clickup';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorClickupDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCloseDiscriminatedConnectorConfig {
    config: ConnectorCloseDiscriminatedConnectorConfig.Config;

    connector_name: 'close';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCloseDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorConfluenceDiscriminatedConnectorConfig {
    config: ConnectorConfluenceDiscriminatedConnectorConfig.Config;

    connector_name: 'confluence';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorConfluenceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorContentfulDiscriminatedConnectorConfig {
    config: ConnectorContentfulDiscriminatedConnectorConfig.Config;

    connector_name: 'contentful';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorContentfulDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorContentstackDiscriminatedConnectorConfig {
    config: ConnectorContentstackDiscriminatedConnectorConfig.Config;

    connector_name: 'contentstack';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorContentstackDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCopperDiscriminatedConnectorConfig {
    config: ConnectorCopperDiscriminatedConnectorConfig.Config;

    connector_name: 'copper';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCopperDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCorosDiscriminatedConnectorConfig {
    config: ConnectorCorosDiscriminatedConnectorConfig.Config;

    connector_name: 'coros';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCorosDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDatevDiscriminatedConnectorConfig {
    config: ConnectorDatevDiscriminatedConnectorConfig.Config;

    connector_name: 'datev';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDatevDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDeelDiscriminatedConnectorConfig {
    config: ConnectorDeelDiscriminatedConnectorConfig.Config;

    connector_name: 'deel';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDeelDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDialpadDiscriminatedConnectorConfig {
    config: ConnectorDialpadDiscriminatedConnectorConfig.Config;

    connector_name: 'dialpad';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDialpadDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDigitaloceanDiscriminatedConnectorConfig {
    config: ConnectorDigitaloceanDiscriminatedConnectorConfig.Config;

    connector_name: 'digitalocean';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDigitaloceanDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDiscordDiscriminatedConnectorConfig {
    config: ConnectorDiscordDiscriminatedConnectorConfig.Config;

    connector_name: 'discord';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDiscordDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDocusignDiscriminatedConnectorConfig {
    config: ConnectorDocusignDiscriminatedConnectorConfig.Config;

    connector_name: 'docusign';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDocusignDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDropboxDiscriminatedConnectorConfig {
    config: ConnectorDropboxDiscriminatedConnectorConfig.Config;

    connector_name: 'dropbox';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDropboxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEbayDiscriminatedConnectorConfig {
    config: ConnectorEbayDiscriminatedConnectorConfig.Config;

    connector_name: 'ebay';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEbayDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEgnyteDiscriminatedConnectorConfig {
    config: ConnectorEgnyteDiscriminatedConnectorConfig.Config;

    connector_name: 'egnyte';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEgnyteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEnvoyDiscriminatedConnectorConfig {
    config: ConnectorEnvoyDiscriminatedConnectorConfig.Config;

    connector_name: 'envoy';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEnvoyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEventbriteDiscriminatedConnectorConfig {
    config: ConnectorEventbriteDiscriminatedConnectorConfig.Config;

    connector_name: 'eventbrite';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEventbriteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorExistDiscriminatedConnectorConfig {
    config: ConnectorExistDiscriminatedConnectorConfig.Config;

    connector_name: 'exist';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorExistDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFacebookDiscriminatedConnectorConfig {
    config: ConnectorFacebookDiscriminatedConnectorConfig.Config;

    connector_name: 'facebook';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFacebookDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFactorialDiscriminatedConnectorConfig {
    config: ConnectorFactorialDiscriminatedConnectorConfig.Config;

    connector_name: 'factorial';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFactorialDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFigmaDiscriminatedConnectorConfig {
    config: ConnectorFigmaDiscriminatedConnectorConfig.Config;

    connector_name: 'figma';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFigmaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFitbitDiscriminatedConnectorConfig {
    config: ConnectorFitbitDiscriminatedConnectorConfig.Config;

    connector_name: 'fitbit';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFitbitDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFortnoxDiscriminatedConnectorConfig {
    config: ConnectorFortnoxDiscriminatedConnectorConfig.Config;

    connector_name: 'fortnox';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFortnoxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFreshbooksDiscriminatedConnectorConfig {
    config: ConnectorFreshbooksDiscriminatedConnectorConfig.Config;

    connector_name: 'freshbooks';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFreshbooksDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFrontDiscriminatedConnectorConfig {
    config: ConnectorFrontDiscriminatedConnectorConfig.Config;

    connector_name: 'front';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFrontDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGitHubDiscriminatedConnectorConfig {
    config: ConnectorGitHubDiscriminatedConnectorConfig.Config;

    connector_name: 'github';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGitHubDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGitlabDiscriminatedConnectorConfig {
    config: ConnectorGitlabDiscriminatedConnectorConfig.Config;

    connector_name: 'gitlab';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGitlabDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGongDiscriminatedConnectorConfig {
    config: ConnectorGongDiscriminatedConnectorConfig.Config;

    connector_name: 'gong';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGongDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleCalendarDiscriminatedConnectorConfig {
    config: ConnectorGoogleCalendarDiscriminatedConnectorConfig.Config;

    connector_name: 'google-calendar';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleCalendarDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleDocsDiscriminatedConnectorConfig {
    config: ConnectorGoogleDocsDiscriminatedConnectorConfig.Config;

    connector_name: 'google-docs';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDocsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleDriveDiscriminatedConnectorConfig {
    config: ConnectorGoogleDriveDiscriminatedConnectorConfig.Config;

    connector_name: 'google-drive';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDriveDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleMailDiscriminatedConnectorConfig {
    config: ConnectorGoogleMailDiscriminatedConnectorConfig.Config;

    connector_name: 'google-mail';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleMailDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleSheetDiscriminatedConnectorConfig {
    config: ConnectorGoogleSheetDiscriminatedConnectorConfig.Config;

    connector_name: 'google-sheet';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleSheetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGorgiasDiscriminatedConnectorConfig {
    config: ConnectorGorgiasDiscriminatedConnectorConfig.Config;

    connector_name: 'gorgias';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGorgiasDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGrainDiscriminatedConnectorConfig {
    config: ConnectorGrainDiscriminatedConnectorConfig.Config;

    connector_name: 'grain';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGrainDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGumroadDiscriminatedConnectorConfig {
    config: ConnectorGumroadDiscriminatedConnectorConfig.Config;

    connector_name: 'gumroad';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGumroadDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGustoDiscriminatedConnectorConfig {
    config: ConnectorGustoDiscriminatedConnectorConfig.Config;

    connector_name: 'gusto';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGustoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHarvestDiscriminatedConnectorConfig {
    config: ConnectorHarvestDiscriminatedConnectorConfig.Config;

    connector_name: 'harvest';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHarvestDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHighlevelDiscriminatedConnectorConfig {
    config: ConnectorHighlevelDiscriminatedConnectorConfig.Config;

    connector_name: 'highlevel';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHighlevelDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHubspotDiscriminatedConnectorConfig {
    config: ConnectorHubspotDiscriminatedConnectorConfig.Config;

    connector_name: 'hubspot';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHubspotDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorInstagramDiscriminatedConnectorConfig {
    config: ConnectorInstagramDiscriminatedConnectorConfig.Config;

    connector_name: 'instagram';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorInstagramDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorIntercomDiscriminatedConnectorConfig {
    config: ConnectorIntercomDiscriminatedConnectorConfig.Config;

    connector_name: 'intercom';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorIntercomDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorJiraDiscriminatedConnectorConfig {
    config: ConnectorJiraDiscriminatedConnectorConfig.Config;

    connector_name: 'jira';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorJiraDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorKeapDiscriminatedConnectorConfig {
    config: ConnectorKeapDiscriminatedConnectorConfig.Config;

    connector_name: 'keap';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorKeapDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLeverDiscriminatedConnectorConfig {
    config: ConnectorLeverDiscriminatedConnectorConfig.Config;

    connector_name: 'lever';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLeverDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinearDiscriminatedConnectorConfig {
    config: ConnectorLinearDiscriminatedConnectorConfig.Config;

    connector_name: 'linear';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinearDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinkedinDiscriminatedConnectorConfig {
    config: ConnectorLinkedinDiscriminatedConnectorConfig.Config;

    connector_name: 'linkedin';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinkedinDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinkhutDiscriminatedConnectorConfig {
    config: ConnectorLinkhutDiscriminatedConnectorConfig.Config;

    connector_name: 'linkhut';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinkhutDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMailchimpDiscriminatedConnectorConfig {
    config: ConnectorMailchimpDiscriminatedConnectorConfig.Config;

    connector_name: 'mailchimp';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMailchimpDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMiroDiscriminatedConnectorConfig {
    config: ConnectorMiroDiscriminatedConnectorConfig.Config;

    connector_name: 'miro';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMiroDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMondayDiscriminatedConnectorConfig {
    config: ConnectorMondayDiscriminatedConnectorConfig.Config;

    connector_name: 'monday';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMondayDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMuralDiscriminatedConnectorConfig {
    config: ConnectorMuralDiscriminatedConnectorConfig.Config;

    connector_name: 'mural';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMuralDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNamelyDiscriminatedConnectorConfig {
    config: ConnectorNamelyDiscriminatedConnectorConfig.Config;

    connector_name: 'namely';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNamelyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNationbuilderDiscriminatedConnectorConfig {
    config: ConnectorNationbuilderDiscriminatedConnectorConfig.Config;

    connector_name: 'nationbuilder';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNationbuilderDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNetsuiteDiscriminatedConnectorConfig {
    config: ConnectorNetsuiteDiscriminatedConnectorConfig.Config;

    connector_name: 'netsuite';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNetsuiteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNotionDiscriminatedConnectorConfig {
    config: ConnectorNotionDiscriminatedConnectorConfig.Config;

    connector_name: 'notion';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNotionDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOdooDiscriminatedConnectorConfig {
    config: ConnectorOdooDiscriminatedConnectorConfig.Config;

    connector_name: 'odoo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOdooDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOktaDiscriminatedConnectorConfig {
    config: ConnectorOktaDiscriminatedConnectorConfig.Config;

    connector_name: 'okta';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOktaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOsuDiscriminatedConnectorConfig {
    config: ConnectorOsuDiscriminatedConnectorConfig.Config;

    connector_name: 'osu';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOsuDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOuraDiscriminatedConnectorConfig {
    config: ConnectorOuraDiscriminatedConnectorConfig.Config;

    connector_name: 'oura';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOuraDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOutreachDiscriminatedConnectorConfig {
    config: ConnectorOutreachDiscriminatedConnectorConfig.Config;

    connector_name: 'outreach';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOutreachDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPagerdutyDiscriminatedConnectorConfig {
    config: ConnectorPagerdutyDiscriminatedConnectorConfig.Config;

    connector_name: 'pagerduty';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPagerdutyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPandadocDiscriminatedConnectorConfig {
    config: ConnectorPandadocDiscriminatedConnectorConfig.Config;

    connector_name: 'pandadoc';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPandadocDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPayfitDiscriminatedConnectorConfig {
    config: ConnectorPayfitDiscriminatedConnectorConfig.Config;

    connector_name: 'payfit';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPayfitDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPaypalDiscriminatedConnectorConfig {
    config: ConnectorPaypalDiscriminatedConnectorConfig.Config;

    connector_name: 'paypal';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPaypalDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPennylaneDiscriminatedConnectorConfig {
    config: ConnectorPennylaneDiscriminatedConnectorConfig.Config;

    connector_name: 'pennylane';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPennylaneDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPinterestDiscriminatedConnectorConfig {
    config: ConnectorPinterestDiscriminatedConnectorConfig.Config;

    connector_name: 'pinterest';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPinterestDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPipedriveDiscriminatedConnectorConfig {
    config: ConnectorPipedriveDiscriminatedConnectorConfig.Config;

    connector_name: 'pipedrive';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPipedriveDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPodiumDiscriminatedConnectorConfig {
    config: ConnectorPodiumDiscriminatedConnectorConfig.Config;

    connector_name: 'podium';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPodiumDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorProductboardDiscriminatedConnectorConfig {
    config: ConnectorProductboardDiscriminatedConnectorConfig.Config;

    connector_name: 'productboard';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorProductboardDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorQualtricsDiscriminatedConnectorConfig {
    config: ConnectorQualtricsDiscriminatedConnectorConfig.Config;

    connector_name: 'qualtrics';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorQualtricsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorQuickbooksDiscriminatedConnectorConfig {
    config: ConnectorQuickbooksDiscriminatedConnectorConfig.Config;

    connector_name: 'quickbooks';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorQuickbooksDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorRedditDiscriminatedConnectorConfig {
    config: ConnectorRedditDiscriminatedConnectorConfig.Config;

    connector_name: 'reddit';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorRedditDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSageDiscriminatedConnectorConfig {
    config: ConnectorSageDiscriminatedConnectorConfig.Config;

    connector_name: 'sage';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSageDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSalesforceDiscriminatedConnectorConfig {
    config: ConnectorSalesforceDiscriminatedConnectorConfig.Config;

    connector_name: 'salesforce';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSalesforceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSalesloftDiscriminatedConnectorConfig {
    config: ConnectorSalesloftDiscriminatedConnectorConfig.Config;

    connector_name: 'salesloft';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSalesloftDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSegmentDiscriminatedConnectorConfig {
    config: ConnectorSegmentDiscriminatedConnectorConfig.Config;

    connector_name: 'segment';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSegmentDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorServicem8DiscriminatedConnectorConfig {
    config: ConnectorServicem8DiscriminatedConnectorConfig.Config;

    connector_name: 'servicem8';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorServicem8DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorServicenowDiscriminatedConnectorConfig {
    config: ConnectorServicenowDiscriminatedConnectorConfig.Config;

    connector_name: 'servicenow';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorServicenowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSharepointDiscriminatedConnectorConfig {
    config: ConnectorSharepointDiscriminatedConnectorConfig.Config;

    connector_name: 'sharepoint';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSharepointDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorShopifyDiscriminatedConnectorConfig {
    config: ConnectorShopifyDiscriminatedConnectorConfig.Config;

    connector_name: 'shopify';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorShopifyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSignnowDiscriminatedConnectorConfig {
    config: ConnectorSignnowDiscriminatedConnectorConfig.Config;

    connector_name: 'signnow';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSignnowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSlackDiscriminatedConnectorConfig {
    config: ConnectorSlackDiscriminatedConnectorConfig.Config;

    connector_name: 'slack';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSlackDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSmartsheetDiscriminatedConnectorConfig {
    config: ConnectorSmartsheetDiscriminatedConnectorConfig.Config;

    connector_name: 'smartsheet';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSmartsheetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSnowflakeDiscriminatedConnectorConfig {
    config: ConnectorSnowflakeDiscriminatedConnectorConfig.Config;

    connector_name: 'snowflake';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSnowflakeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSpotifyDiscriminatedConnectorConfig {
    config: ConnectorSpotifyDiscriminatedConnectorConfig.Config;

    connector_name: 'spotify';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSpotifyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSquarespaceDiscriminatedConnectorConfig {
    config: ConnectorSquarespaceDiscriminatedConnectorConfig.Config;

    connector_name: 'squarespace';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSquarespaceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSquareupDiscriminatedConnectorConfig {
    config: ConnectorSquareupDiscriminatedConnectorConfig.Config;

    connector_name: 'squareup';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSquareupDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorStackexchangeDiscriminatedConnectorConfig {
    config: ConnectorStackexchangeDiscriminatedConnectorConfig.Config;

    connector_name: 'stackexchange';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStackexchangeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorStravaDiscriminatedConnectorConfig {
    config: ConnectorStravaDiscriminatedConnectorConfig.Config;

    connector_name: 'strava';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStravaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTeamworkDiscriminatedConnectorConfig {
    config: ConnectorTeamworkDiscriminatedConnectorConfig.Config;

    connector_name: 'teamwork';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTeamworkDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTicktickDiscriminatedConnectorConfig {
    config: ConnectorTicktickDiscriminatedConnectorConfig.Config;

    connector_name: 'ticktick';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTicktickDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTimelyDiscriminatedConnectorConfig {
    config: ConnectorTimelyDiscriminatedConnectorConfig.Config;

    connector_name: 'timely';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTimelyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTodoistDiscriminatedConnectorConfig {
    config: ConnectorTodoistDiscriminatedConnectorConfig.Config;

    connector_name: 'todoist';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTodoistDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTremendousDiscriminatedConnectorConfig {
    config: ConnectorTremendousDiscriminatedConnectorConfig.Config;

    connector_name: 'tremendous';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTremendousDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTsheetsteamDiscriminatedConnectorConfig {
    config: ConnectorTsheetsteamDiscriminatedConnectorConfig.Config;

    connector_name: 'tsheetsteam';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTsheetsteamDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTumblrDiscriminatedConnectorConfig {
    config: ConnectorTumblrDiscriminatedConnectorConfig.Config;

    connector_name: 'tumblr';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTumblrDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwinfieldDiscriminatedConnectorConfig {
    config: ConnectorTwinfieldDiscriminatedConnectorConfig.Config;

    connector_name: 'twinfield';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwinfieldDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwitchDiscriminatedConnectorConfig {
    config: ConnectorTwitchDiscriminatedConnectorConfig.Config;

    connector_name: 'twitch';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwitchDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwitterDiscriminatedConnectorConfig {
    config: ConnectorTwitterDiscriminatedConnectorConfig.Config;

    connector_name: 'twitter';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwitterDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTypeformDiscriminatedConnectorConfig {
    config: ConnectorTypeformDiscriminatedConnectorConfig.Config;

    connector_name: 'typeform';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTypeformDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorUberDiscriminatedConnectorConfig {
    config: ConnectorUberDiscriminatedConnectorConfig.Config;

    connector_name: 'uber';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorUberDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorVimeoDiscriminatedConnectorConfig {
    config: ConnectorVimeoDiscriminatedConnectorConfig.Config;

    connector_name: 'vimeo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorVimeoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWakatimeDiscriminatedConnectorConfig {
    config: ConnectorWakatimeDiscriminatedConnectorConfig.Config;

    connector_name: 'wakatime';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWakatimeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWealthboxDiscriminatedConnectorConfig {
    config: ConnectorWealthboxDiscriminatedConnectorConfig.Config;

    connector_name: 'wealthbox';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWealthboxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWebflowDiscriminatedConnectorConfig {
    config: ConnectorWebflowDiscriminatedConnectorConfig.Config;

    connector_name: 'webflow';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWebflowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWhoopDiscriminatedConnectorConfig {
    config: ConnectorWhoopDiscriminatedConnectorConfig.Config;

    connector_name: 'whoop';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWhoopDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWordpressDiscriminatedConnectorConfig {
    config: ConnectorWordpressDiscriminatedConnectorConfig.Config;

    connector_name: 'wordpress';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWordpressDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWrikeDiscriminatedConnectorConfig {
    config: ConnectorWrikeDiscriminatedConnectorConfig.Config;

    connector_name: 'wrike';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWrikeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorXeroDiscriminatedConnectorConfig {
    config: ConnectorXeroDiscriminatedConnectorConfig.Config;

    connector_name: 'xero';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorXeroDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorYahooDiscriminatedConnectorConfig {
    config: ConnectorYahooDiscriminatedConnectorConfig.Config;

    connector_name: 'yahoo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYahooDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorYandexDiscriminatedConnectorConfig {
    config: ConnectorYandexDiscriminatedConnectorConfig.Config;

    connector_name: 'yandex';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYandexDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZapierDiscriminatedConnectorConfig {
    config: ConnectorZapierDiscriminatedConnectorConfig.Config;

    connector_name: 'zapier';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZapierDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZendeskDiscriminatedConnectorConfig {
    config: ConnectorZendeskDiscriminatedConnectorConfig.Config;

    connector_name: 'zendesk';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZendeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZenefitsDiscriminatedConnectorConfig {
    config: ConnectorZenefitsDiscriminatedConnectorConfig.Config;

    connector_name: 'zenefits';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZenefitsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZohoDeskDiscriminatedConnectorConfig {
    config: ConnectorZohoDeskDiscriminatedConnectorConfig.Config;

    connector_name: 'zoho-desk';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZohoDeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZohoDiscriminatedConnectorConfig {
    config: ConnectorZohoDiscriminatedConnectorConfig.Config;

    connector_name: 'zoho';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZohoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZoomDiscriminatedConnectorConfig {
    config: ConnectorZoomDiscriminatedConnectorConfig.Config;

    connector_name: 'zoom';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZoomDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAirtableDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'airtable';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorApolloDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'apollo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorBrexDiscriminatedConnectorConfig {
    config: ConnectorBrexDiscriminatedConnectorConfig.Config;

    connector_name: 'brex';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBrexDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorCodaDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'coda';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorFinchDiscriminatedConnectorConfig {
    config: ConnectorFinchDiscriminatedConnectorConfig.Config;

    connector_name: 'finch';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFinchDiscriminatedConnectorConfig {
    export interface Config {
      client_id: string;

      client_secret: string;

      /**
       * Finch products to access, @see
       * https://developer.tryfinch.com/api-reference/development-guides/Permissions
       */
      products: Array<
        | 'company'
        | 'directory'
        | 'individual'
        | 'ssn'
        | 'employment'
        | 'payment'
        | 'pay_statement'
        | 'benefits'
      >;

      /**
       * Finch API version
       */
      api_version?: string;
    }
  }

  export interface ConnectorFirebaseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'firebase';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorForeceiptDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'foreceipt';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorGreenhouseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'greenhouse';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorHeronDiscriminatedConnectorConfig {
    config: ConnectorHeronDiscriminatedConnectorConfig.Config;

    connector_name: 'heron';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHeronDiscriminatedConnectorConfig {
    export interface Config {
      apiKey: string;
    }
  }

  export interface ConnectorLunchmoneyDiscriminatedConnectorConfig {
    config: ConnectorLunchmoneyDiscriminatedConnectorConfig.Config;

    connector_name: 'lunchmoney';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLunchmoneyDiscriminatedConnectorConfig {
    export interface Config {
      accessToken: string;
    }
  }

  export interface ConnectorMercuryDiscriminatedConnectorConfig {
    config: ConnectorMercuryDiscriminatedConnectorConfig.Config;

    connector_name: 'mercury';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMercuryDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorMergeDiscriminatedConnectorConfig {
    config: ConnectorMergeDiscriminatedConnectorConfig.Config;

    connector_name: 'merge';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMergeDiscriminatedConnectorConfig {
    export interface Config {
      apiKey: string;
    }
  }

  export interface ConnectorMootaDiscriminatedConnectorConfig {
    config: ConnectorMootaDiscriminatedConnectorConfig.Config;

    connector_name: 'moota';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMootaDiscriminatedConnectorConfig {
    export interface Config {
      token: string;
    }
  }

  export interface ConnectorOnebrickDiscriminatedConnectorConfig {
    config: ConnectorOnebrickDiscriminatedConnectorConfig.Config;

    connector_name: 'onebrick';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOnebrickDiscriminatedConnectorConfig {
    export interface Config {
      clientId: string;

      clientSecret: string;

      envName: 'sandbox' | 'production';

      publicToken: string;

      accessToken?: string | null;

      redirectUrl?: string | null;
    }
  }

  export interface ConnectorOpenledgerDiscriminatedConnectorConfig {
    config: ConnectorOpenledgerDiscriminatedConnectorConfig.Config;

    connector_name: 'openledger';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOpenledgerDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API endpoint
       */
      api_url: string;

      /**
       * Your developer ID for authentication
       */
      developer_id: string;

      /**
       * Your developer secret
       */
      developer_secret: string;

      /**
       * Switch to "production" for live data
       */
      environment: 'development' | 'production';
    }
  }

  export interface ConnectorPlaidDiscriminatedConnectorConfig {
    config: ConnectorPlaidDiscriminatedConnectorConfig.Config;

    connector_name: 'plaid';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPlaidDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * The name of your application, as it should be displayed in Link. Maximum length
       * of 30 characters. If a value longer than 30 characters is provided, Link will
       * display "This Application" instead.
       */
      clientName: string;

      countryCodes: Array<
        | 'US'
        | 'GB'
        | 'ES'
        | 'NL'
        | 'FR'
        | 'IE'
        | 'CA'
        | 'DE'
        | 'IT'
        | 'PL'
        | 'DK'
        | 'NO'
        | 'SE'
        | 'EE'
        | 'LT'
        | 'LV'
      >;

      envName: 'sandbox' | 'development' | 'production';

      language: 'en' | 'fr' | 'es' | 'nl' | 'de';

      products: Array<
        | 'assets'
        | 'auth'
        | 'balance'
        | 'identity'
        | 'investments'
        | 'liabilities'
        | 'payment_initiation'
        | 'identity_verification'
        | 'transactions'
        | 'credit_details'
        | 'income'
        | 'income_verification'
        | 'deposit_switch'
        | 'standing_orders'
        | 'transfer'
        | 'employment'
        | 'recurring_transactions'
      >;

      credentials?: Config.Credentials | null;
    }

    export namespace Config {
      export interface Credentials {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorPostgresDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'postgres';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorRampDiscriminatedConnectorConfig {
    config: ConnectorRampDiscriminatedConnectorConfig.Config;

    connector_name: 'ramp';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorRampDiscriminatedConnectorConfig {
    export interface Config {
      oauth: Config.OAuth;
    }

    export namespace Config {
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorSaltedgeDiscriminatedConnectorConfig {
    config: ConnectorSaltedgeDiscriminatedConnectorConfig.Config;

    connector_name: 'saltedge';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSaltedgeDiscriminatedConnectorConfig {
    export interface Config {
      appId: string;

      secret: string;

      url?: string | null;
    }
  }

  export interface ConnectorSharepointOnpremDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'sharepoint-onprem';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorSplitwiseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'splitwise';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorStripeDiscriminatedConnectorConfig {
    config: ConnectorStripeDiscriminatedConnectorConfig.Config;

    connector_name: 'stripe';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStripeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorTellerDiscriminatedConnectorConfig {
    config: ConnectorTellerDiscriminatedConnectorConfig.Config;

    connector_name: 'teller';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTellerDiscriminatedConnectorConfig {
    export interface Config {
      applicationId: string;

      token?: string | null;
    }
  }

  export interface ConnectorTogglDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'toggl';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorTwentyDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'twenty';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorVenmoDiscriminatedConnectorConfig {
    config: ConnectorVenmoDiscriminatedConnectorConfig.Config;

    connector_name: 'venmo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorVenmoDiscriminatedConnectorConfig {
    export interface Config {
      proxy?: Config.Proxy | null;

      v1BaseURL?: string | null;

      v5BaseURL?: string | null;
    }

    export namespace Config {
      export interface Proxy {
        cert: string;

        url: string;
      }
    }
  }

  export interface ConnectorWiseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'wise';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorYodleeDiscriminatedConnectorConfig {
    config: ConnectorYodleeDiscriminatedConnectorConfig.Config;

    connector_name: 'yodlee';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYodleeDiscriminatedConnectorConfig {
    export interface Config {
      adminLoginName: string;

      clientId: string;

      clientSecret: string;

      envName: 'sandbox' | 'development' | 'production';

      proxy?: Config.Proxy | null;

      sandboxLoginName?: string | null;
    }

    export namespace Config {
      export interface Proxy {
        cert: string;

        url: string;
      }
    }
  }
}

/**
 * The connection details
 */
export type GetConnectionResponse =
  | GetConnectionResponse.ConnectorAcceloDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAcmeApikeyDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAcmeOauth2DiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAdobeDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAdyenDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAircallDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAmazonDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorApaleoDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAsanaDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAttioDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAuth0DiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAutodeskDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAwsDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorBamboohrDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorBasecampDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorBattlenetDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorBigcommerceDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorBitbucketDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorBitlyDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorBlackbaudDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorBoldsignDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorBoxDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorBraintreeDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorCalendlyDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorClickupDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorCloseDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorConfluenceDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorContentfulDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorContentstackDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorCopperDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorCorosDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorDatevDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorDeelDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorDialpadDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorDigitaloceanDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorDiscordDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorDocusignDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorDropboxDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorEbayDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorEgnyteDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorEnvoyDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorEventbriteDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorExistDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorFacebookDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorFactorialDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorFigmaDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorFitbitDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorFortnoxDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorFreshbooksDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorFrontDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGitHubDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGitlabDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGongDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGoogleCalendarDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGoogleDocsDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGoogleDriveDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGoogleMailDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGoogleSheetDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGorgiasDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGrainDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGumroadDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGustoDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorHarvestDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorHighlevelDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorHubspotDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorInstagramDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorIntercomDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorJiraDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorKeapDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorLeverDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorLinearDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorLinkedinDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorLinkhutDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorMailchimpDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorMiroDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorMondayDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorMuralDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorNamelyDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorNationbuilderDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorNetsuiteDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorNotionDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorOdooDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorOktaDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorOsuDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorOuraDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorOutreachDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorPagerdutyDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorPandadocDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorPayfitDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorPaypalDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorPennylaneDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorPinterestDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorPipedriveDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorPodiumDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorProductboardDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorQualtricsDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorQuickbooksDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorRedditDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSageDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSalesforceDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSalesloftDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSegmentDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorServicem8DiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorServicenowDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSharepointDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorShopifyDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSignnowDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSlackDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSmartsheetDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSnowflakeDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSpotifyDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSquarespaceDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSquareupDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorStackexchangeDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorStravaDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTeamworkDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTicktickDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTimelyDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTodoistDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTremendousDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTsheetsteamDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTumblrDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTwinfieldDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTwitchDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTwitterDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTypeformDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorUberDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorVimeoDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorWakatimeDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorWealthboxDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorWebflowDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorWhoopDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorWordpressDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorWrikeDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorXeroDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorYahooDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorYandexDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorZapierDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorZendeskDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorZenefitsDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorZohoDeskDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorZohoDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorZoomDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorAirtableDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorApolloDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorBrexDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorCodaDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorFinchDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorFirebaseDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorForeceiptDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorGreenhouseDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorHeronDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorLunchmoneyDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorMercuryDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorMergeDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorMootaDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorOnebrickDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorOpenledgerDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorPlaidDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorPostgresDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorRampDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSaltedgeDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSharepointOnpremDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorSplitwiseDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorStripeDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTellerDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTogglDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorTwentyDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorVenmoDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorWiseDiscriminatedConnectionSettings
  | GetConnectionResponse.ConnectorYodleeDiscriminatedConnectionSettings;

export namespace GetConnectionResponse {
  export interface ConnectorAcceloDiscriminatedConnectionSettings {
    connector_name: 'accelo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAcceloDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAcceloDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Accelo account (e.g., https://domain.api.accelo.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAcmeApikeyDiscriminatedConnectionSettings {
    connector_name: 'acme-apikey';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAcmeApikeyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAcmeApikeyDiscriminatedConnectionSettings {
    export interface Settings {
      api_key: string;
    }
  }

  export interface ConnectorAcmeOauth2DiscriminatedConnectionSettings {
    connector_name: 'acme-oauth2';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAcmeOauth2DiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAcmeOauth2DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAdobeDiscriminatedConnectionSettings {
    connector_name: 'adobe';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAdobeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAdobeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAdyenDiscriminatedConnectionSettings {
    connector_name: 'adyen';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAdyenDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAdyenDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The environment to use (e.g., live|test)
       */
      environment: string;

      oauth: Settings.OAuth;

      /**
       * The resource to use for your various requests (e.g.,
       * https://kyc-(live|test).adyen.com)
       */
      resource: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAircallDiscriminatedConnectionSettings {
    connector_name: 'aircall';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAircallDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAircallDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAmazonDiscriminatedConnectionSettings {
    connector_name: 'amazon';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAmazonDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAmazonDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension for your Amazon account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorApaleoDiscriminatedConnectionSettings {
    connector_name: 'apaleo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorApaleoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorApaleoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAsanaDiscriminatedConnectionSettings {
    connector_name: 'asana';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAsanaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAsanaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAttioDiscriminatedConnectionSettings {
    connector_name: 'attio';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAttioDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAttioDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAuth0DiscriminatedConnectionSettings {
    connector_name: 'auth0';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAuth0DiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAuth0DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Auth0 account (e.g., https://domain.auth0.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAutodeskDiscriminatedConnectionSettings {
    connector_name: 'autodesk';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAutodeskDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAutodeskDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAwsDiscriminatedConnectionSettings {
    connector_name: 'aws';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAwsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAwsDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API subdomain to the API you want to connect to (e.g.,
       * https://cognito-idp.us-east-2.amazonaws.com)
       */
      apiSubdomain: string;

      /**
       * The domain extension of your AWS account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * The subdomain of your AWS account (e.g., https://domain.amazoncognito.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBamboohrDiscriminatedConnectionSettings {
    connector_name: 'bamboohr';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBamboohrDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBamboohrDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your BambooHR account (e.g., https://domain.bamboohr.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBasecampDiscriminatedConnectionSettings {
    connector_name: 'basecamp';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBasecampDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBasecampDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * Your Account ID (e.g., 5899981)
       */
      accountId: string;

      /**
       * The details of your app (e.g., example-subdomain)
       */
      appDetails: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBattlenetDiscriminatedConnectionSettings {
    connector_name: 'battlenet';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBattlenetDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBattlenetDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to where you will access your API (e.g., https://us.api.blizzard.com)
       */
      apiDomain: string;

      /**
       * The domain extension of your Battle.net account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBigcommerceDiscriminatedConnectionSettings {
    connector_name: 'bigcommerce';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBigcommerceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBigcommerceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account UUID of your BigCommerce account (e.g.,
       * 123e4567-e89b-12d3-a456-426614174000)
       */
      accountUuid: string;

      oauth: Settings.OAuth;

      /**
       * The store hash of your BigCommerce account (e.g., Example123)
       */
      storeHash: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBitbucketDiscriminatedConnectionSettings {
    connector_name: 'bitbucket';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBitbucketDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBitbucketDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBitlyDiscriminatedConnectionSettings {
    connector_name: 'bitly';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBitlyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBitlyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBlackbaudDiscriminatedConnectionSettings {
    connector_name: 'blackbaud';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBlackbaudDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBlackbaudDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBoldsignDiscriminatedConnectionSettings {
    connector_name: 'boldsign';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBoldsignDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBoldsignDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBoxDiscriminatedConnectionSettings {
    connector_name: 'box';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBoxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBoxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBraintreeDiscriminatedConnectionSettings {
    connector_name: 'braintree';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBraintreeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBraintreeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCalendlyDiscriminatedConnectionSettings {
    connector_name: 'calendly';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCalendlyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCalendlyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorClickupDiscriminatedConnectionSettings {
    connector_name: 'clickup';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorClickupDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorClickupDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCloseDiscriminatedConnectionSettings {
    connector_name: 'close';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCloseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCloseDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorConfluenceDiscriminatedConnectionSettings {
    connector_name: 'confluence';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorConfluenceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorConfluenceDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorContentfulDiscriminatedConnectionSettings {
    connector_name: 'contentful';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorContentfulDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorContentfulDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Contentful account (e.g., https://domain.contentful.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorContentstackDiscriminatedConnectionSettings {
    connector_name: 'contentstack';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorContentstackDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorContentstackDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to where you will access your API (e.g.,
       * https://eu-api.contentstack.com)
       */
      apiDomain: string;

      /**
       * The app ID of your Contentstack account (e.g., example-subdomain)
       */
      appId: string;

      oauth: Settings.OAuth;

      /**
       * The subdomain of your Contentstack account (e.g.,
       * https://domain.contentstack.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCopperDiscriminatedConnectionSettings {
    connector_name: 'copper';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCopperDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCopperDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCorosDiscriminatedConnectionSettings {
    connector_name: 'coros';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCorosDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCorosDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDatevDiscriminatedConnectionSettings {
    connector_name: 'datev';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDatevDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDatevDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDeelDiscriminatedConnectionSettings {
    connector_name: 'deel';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDeelDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDeelDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDialpadDiscriminatedConnectionSettings {
    connector_name: 'dialpad';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDialpadDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDialpadDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDigitaloceanDiscriminatedConnectionSettings {
    connector_name: 'digitalocean';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDigitaloceanDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDigitaloceanDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDiscordDiscriminatedConnectionSettings {
    connector_name: 'discord';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDiscordDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDiscordDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDocusignDiscriminatedConnectionSettings {
    connector_name: 'docusign';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDocusignDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDocusignDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDropboxDiscriminatedConnectionSettings {
    connector_name: 'dropbox';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDropboxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDropboxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEbayDiscriminatedConnectionSettings {
    connector_name: 'ebay';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEbayDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEbayDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEgnyteDiscriminatedConnectionSettings {
    connector_name: 'egnyte';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEgnyteDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEgnyteDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Egnyte account (e.g., https://domain.egnyte.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEnvoyDiscriminatedConnectionSettings {
    connector_name: 'envoy';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEnvoyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEnvoyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEventbriteDiscriminatedConnectionSettings {
    connector_name: 'eventbrite';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEventbriteDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEventbriteDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorExistDiscriminatedConnectionSettings {
    connector_name: 'exist';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorExistDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorExistDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFacebookDiscriminatedConnectionSettings {
    connector_name: 'facebook';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFacebookDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFacebookDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFactorialDiscriminatedConnectionSettings {
    connector_name: 'factorial';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFactorialDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFactorialDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFigmaDiscriminatedConnectionSettings {
    connector_name: 'figma';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFigmaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFigmaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFitbitDiscriminatedConnectionSettings {
    connector_name: 'fitbit';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFitbitDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFitbitDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFortnoxDiscriminatedConnectionSettings {
    connector_name: 'fortnox';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFortnoxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFortnoxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFreshbooksDiscriminatedConnectionSettings {
    connector_name: 'freshbooks';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFreshbooksDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFreshbooksDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFrontDiscriminatedConnectionSettings {
    connector_name: 'front';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFrontDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFrontDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGitHubDiscriminatedConnectionSettings {
    connector_name: 'github';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGitHubDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGitHubDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGitlabDiscriminatedConnectionSettings {
    connector_name: 'gitlab';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGitlabDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGitlabDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGongDiscriminatedConnectionSettings {
    connector_name: 'gong';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGongDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGongDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The base URL of your Gong account (e.g., example)
       */
      api_base_url_for_customer: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleCalendarDiscriminatedConnectionSettings {
    connector_name: 'google-calendar';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleCalendarDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleCalendarDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleDocsDiscriminatedConnectionSettings {
    connector_name: 'google-docs';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleDocsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDocsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleDriveDiscriminatedConnectionSettings {
    connector_name: 'google-drive';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleDriveDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDriveDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleMailDiscriminatedConnectionSettings {
    connector_name: 'google-mail';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleMailDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleMailDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleSheetDiscriminatedConnectionSettings {
    connector_name: 'google-sheet';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleSheetDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleSheetDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGorgiasDiscriminatedConnectionSettings {
    connector_name: 'gorgias';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGorgiasDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGorgiasDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Gorgias account (e.g., https://domain.gorgias.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGrainDiscriminatedConnectionSettings {
    connector_name: 'grain';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGrainDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGrainDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGumroadDiscriminatedConnectionSettings {
    connector_name: 'gumroad';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGumroadDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGumroadDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGustoDiscriminatedConnectionSettings {
    connector_name: 'gusto';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGustoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGustoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHarvestDiscriminatedConnectionSettings {
    connector_name: 'harvest';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorHarvestDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorHarvestDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The details of your app (e.g., example-subdomain)
       */
      appDetails: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHighlevelDiscriminatedConnectionSettings {
    connector_name: 'highlevel';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorHighlevelDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorHighlevelDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHubspotDiscriminatedConnectionSettings {
    connector_name: 'hubspot';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorHubspotDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorHubspotDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorInstagramDiscriminatedConnectionSettings {
    connector_name: 'instagram';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorInstagramDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorInstagramDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorIntercomDiscriminatedConnectionSettings {
    connector_name: 'intercom';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorIntercomDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorIntercomDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorJiraDiscriminatedConnectionSettings {
    connector_name: 'jira';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorJiraDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorJiraDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorKeapDiscriminatedConnectionSettings {
    connector_name: 'keap';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorKeapDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorKeapDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLeverDiscriminatedConnectionSettings {
    connector_name: 'lever';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLeverDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLeverDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinearDiscriminatedConnectionSettings {
    connector_name: 'linear';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLinearDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLinearDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinkedinDiscriminatedConnectionSettings {
    connector_name: 'linkedin';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLinkedinDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLinkedinDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinkhutDiscriminatedConnectionSettings {
    connector_name: 'linkhut';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLinkhutDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLinkhutDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMailchimpDiscriminatedConnectionSettings {
    connector_name: 'mailchimp';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMailchimpDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMailchimpDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The data center for your account (e.g., us6)
       */
      dc: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMiroDiscriminatedConnectionSettings {
    connector_name: 'miro';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMiroDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMiroDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMondayDiscriminatedConnectionSettings {
    connector_name: 'monday';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMondayDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMondayDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMuralDiscriminatedConnectionSettings {
    connector_name: 'mural';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMuralDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMuralDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNamelyDiscriminatedConnectionSettings {
    connector_name: 'namely';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNamelyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNamelyDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The name of your Namely company (e.g., example)
       */
      company: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNationbuilderDiscriminatedConnectionSettings {
    connector_name: 'nationbuilder';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNationbuilderDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNationbuilderDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account ID of your NationBuilder account (e.g., example-subdomain)
       */
      accountId: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNetsuiteDiscriminatedConnectionSettings {
    connector_name: 'netsuite';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNetsuiteDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNetsuiteDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account ID of your NetSuite account (e.g., tstdrv231585)
       */
      accountId: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNotionDiscriminatedConnectionSettings {
    connector_name: 'notion';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNotionDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNotionDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOdooDiscriminatedConnectionSettings {
    connector_name: 'odoo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOdooDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOdooDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The domain of your Odoo account (e.g., https://example-subdomain)
       */
      serverUrl: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOktaDiscriminatedConnectionSettings {
    connector_name: 'okta';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOktaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOktaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Okta account (e.g., https://domain.okta.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOsuDiscriminatedConnectionSettings {
    connector_name: 'osu';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOsuDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOsuDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOuraDiscriminatedConnectionSettings {
    connector_name: 'oura';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOuraDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOuraDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOutreachDiscriminatedConnectionSettings {
    connector_name: 'outreach';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOutreachDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOutreachDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPagerdutyDiscriminatedConnectionSettings {
    connector_name: 'pagerduty';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPagerdutyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPagerdutyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPandadocDiscriminatedConnectionSettings {
    connector_name: 'pandadoc';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPandadocDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPandadocDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPayfitDiscriminatedConnectionSettings {
    connector_name: 'payfit';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPayfitDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPayfitDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPaypalDiscriminatedConnectionSettings {
    connector_name: 'paypal';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPaypalDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPaypalDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPennylaneDiscriminatedConnectionSettings {
    connector_name: 'pennylane';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPennylaneDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPennylaneDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPinterestDiscriminatedConnectionSettings {
    connector_name: 'pinterest';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPinterestDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPinterestDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPipedriveDiscriminatedConnectionSettings {
    connector_name: 'pipedrive';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPipedriveDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPipedriveDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API URL of your Pipedrive account (e.g., example)
       */
      api_domain: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPodiumDiscriminatedConnectionSettings {
    connector_name: 'podium';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPodiumDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPodiumDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API version of your Podium account (e.g., example-subdomain)
       */
      apiVersion: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorProductboardDiscriminatedConnectionSettings {
    connector_name: 'productboard';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorProductboardDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorProductboardDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorQualtricsDiscriminatedConnectionSettings {
    connector_name: 'qualtrics';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorQualtricsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorQualtricsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Qualtrics account (e.g., https://domain.qualtrics.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorQuickbooksDiscriminatedConnectionSettings {
    connector_name: 'quickbooks';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorQuickbooksDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorQuickbooksDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorRedditDiscriminatedConnectionSettings {
    connector_name: 'reddit';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorRedditDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorRedditDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSageDiscriminatedConnectionSettings {
    connector_name: 'sage';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSageDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSageDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSalesforceDiscriminatedConnectionSettings {
    connector_name: 'salesforce';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSalesforceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSalesforceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The instance URL of your Salesforce account (e.g., example)
       */
      instance_url: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSalesloftDiscriminatedConnectionSettings {
    connector_name: 'salesloft';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSalesloftDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSalesloftDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSegmentDiscriminatedConnectionSettings {
    connector_name: 'segment';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSegmentDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSegmentDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorServicem8DiscriminatedConnectionSettings {
    connector_name: 'servicem8';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorServicem8DiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorServicem8DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorServicenowDiscriminatedConnectionSettings {
    connector_name: 'servicenow';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorServicenowDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorServicenowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your ServiceNow account (e.g., https://domain.service-now.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSharepointDiscriminatedConnectionSettings {
    connector_name: 'sharepoint';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSharepointDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSharepointDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorShopifyDiscriminatedConnectionSettings {
    connector_name: 'shopify';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorShopifyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorShopifyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Shopify account (e.g., https://domain.myshopify.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSignnowDiscriminatedConnectionSettings {
    connector_name: 'signnow';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSignnowDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSignnowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSlackDiscriminatedConnectionSettings {
    connector_name: 'slack';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSlackDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSlackDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSmartsheetDiscriminatedConnectionSettings {
    connector_name: 'smartsheet';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSmartsheetDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSmartsheetDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSnowflakeDiscriminatedConnectionSettings {
    connector_name: 'snowflake';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSnowflakeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSnowflakeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The domain of your Snowflake account (e.g., https://example-subdomain)
       */
      snowflake_account_url: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSpotifyDiscriminatedConnectionSettings {
    connector_name: 'spotify';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSpotifyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSpotifyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSquarespaceDiscriminatedConnectionSettings {
    connector_name: 'squarespace';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSquarespaceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSquarespaceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The user agent of your custom app (e.g., example-subdomain)
       */
      customappDescription: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSquareupDiscriminatedConnectionSettings {
    connector_name: 'squareup';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSquareupDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSquareupDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorStackexchangeDiscriminatedConnectionSettings {
    connector_name: 'stackexchange';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorStackexchangeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorStackexchangeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorStravaDiscriminatedConnectionSettings {
    connector_name: 'strava';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorStravaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorStravaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTeamworkDiscriminatedConnectionSettings {
    connector_name: 'teamwork';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTeamworkDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTeamworkDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTicktickDiscriminatedConnectionSettings {
    connector_name: 'ticktick';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTicktickDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTicktickDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTimelyDiscriminatedConnectionSettings {
    connector_name: 'timely';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTimelyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTimelyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTodoistDiscriminatedConnectionSettings {
    connector_name: 'todoist';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTodoistDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTodoistDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTremendousDiscriminatedConnectionSettings {
    connector_name: 'tremendous';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTremendousDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTremendousDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTsheetsteamDiscriminatedConnectionSettings {
    connector_name: 'tsheetsteam';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTsheetsteamDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTsheetsteamDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTumblrDiscriminatedConnectionSettings {
    connector_name: 'tumblr';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTumblrDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTumblrDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwinfieldDiscriminatedConnectionSettings {
    connector_name: 'twinfield';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwinfieldDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwinfieldDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The cluster to your Twinfield instance (e.g., https://accounting.twinfield.com)
       */
      cluster: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwitchDiscriminatedConnectionSettings {
    connector_name: 'twitch';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwitchDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwitchDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwitterDiscriminatedConnectionSettings {
    connector_name: 'twitter';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwitterDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwitterDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTypeformDiscriminatedConnectionSettings {
    connector_name: 'typeform';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTypeformDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTypeformDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorUberDiscriminatedConnectionSettings {
    connector_name: 'uber';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorUberDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorUberDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorVimeoDiscriminatedConnectionSettings {
    connector_name: 'vimeo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorVimeoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorVimeoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWakatimeDiscriminatedConnectionSettings {
    connector_name: 'wakatime';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWakatimeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWakatimeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWealthboxDiscriminatedConnectionSettings {
    connector_name: 'wealthbox';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWealthboxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWealthboxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWebflowDiscriminatedConnectionSettings {
    connector_name: 'webflow';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWebflowDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWebflowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWhoopDiscriminatedConnectionSettings {
    connector_name: 'whoop';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWhoopDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWhoopDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWordpressDiscriminatedConnectionSettings {
    connector_name: 'wordpress';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWordpressDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWordpressDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWrikeDiscriminatedConnectionSettings {
    connector_name: 'wrike';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWrikeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWrikeDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain of your Wrike account (e.g., https://example-subdomain)
       */
      host: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorXeroDiscriminatedConnectionSettings {
    connector_name: 'xero';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorXeroDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorXeroDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorYahooDiscriminatedConnectionSettings {
    connector_name: 'yahoo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorYahooDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorYahooDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to the API you want to connect to (e.g.,
       * https://fantasysports.yahooapis.com)
       */
      apiDomain: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorYandexDiscriminatedConnectionSettings {
    connector_name: 'yandex';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorYandexDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorYandexDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZapierDiscriminatedConnectionSettings {
    connector_name: 'zapier';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZapierDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZapierDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZendeskDiscriminatedConnectionSettings {
    connector_name: 'zendesk';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZendeskDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZendeskDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Zendesk account (e.g., https://domain.zendesk.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZenefitsDiscriminatedConnectionSettings {
    connector_name: 'zenefits';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZenefitsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZenefitsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZohoDeskDiscriminatedConnectionSettings {
    connector_name: 'zoho-desk';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZohoDeskDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZohoDeskDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension of your Zoho account (e.g., https://accounts.zoho.com/)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZohoDiscriminatedConnectionSettings {
    connector_name: 'zoho';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZohoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZohoDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension of your Zoho account (e.g., https://accounts.zoho.com/)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZoomDiscriminatedConnectionSettings {
    connector_name: 'zoom';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZoomDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZoomDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAirtableDiscriminatedConnectionSettings {
    connector_name: 'airtable';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAirtableDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAirtableDiscriminatedConnectionSettings {
    export interface Settings {
      airtableBase: string;

      apiKey: string;
    }
  }

  export interface ConnectorApolloDiscriminatedConnectionSettings {
    connector_name: 'apollo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorApolloDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorApolloDiscriminatedConnectionSettings {
    export interface Settings {
      api_key: string;
    }
  }

  export interface ConnectorBrexDiscriminatedConnectionSettings {
    connector_name: 'brex';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBrexDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBrexDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;
    }
  }

  export interface ConnectorCodaDiscriminatedConnectionSettings {
    connector_name: 'coda';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCodaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCodaDiscriminatedConnectionSettings {
    export interface Settings {
      apiKey: string;
    }
  }

  export interface ConnectorFinchDiscriminatedConnectionSettings {
    connector_name: 'finch';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFinchDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFinchDiscriminatedConnectionSettings {
    export interface Settings {
      access_token: string;
    }
  }

  export interface ConnectorFirebaseDiscriminatedConnectionSettings {
    connector_name: 'firebase';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?:
      | ConnectorFirebaseDiscriminatedConnectionSettings.UnionMember0
      | ConnectorFirebaseDiscriminatedConnectionSettings.UnionMember1;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFirebaseDiscriminatedConnectionSettings {
    export interface UnionMember0 {
      role: 'admin';

      serviceAccount: UnionMember0.ServiceAccount;
    }

    export namespace UnionMember0 {
      export interface ServiceAccount {
        project_id: string;

        [k: string]: unknown;
      }
    }

    export interface UnionMember1 {
      authData: UnionMember1.UnionMember0 | UnionMember1.UnionMember1 | UnionMember1.UnionMember2;

      firebaseConfig: UnionMember1.FirebaseConfig;

      role: 'user';
    }

    export namespace UnionMember1 {
      export interface UnionMember0 {
        method: 'userJson';

        userJson: UnionMember0.UserJson;
      }

      export namespace UnionMember0 {
        export interface UserJson {
          appName: string;

          stsTokenManager: { [key: string]: unknown };

          uid: string;

          [k: string]: unknown;
        }
      }

      export interface UnionMember1 {
        customToken: string;

        method: 'customToken';
      }

      export interface UnionMember2 {
        email: string;

        method: 'emailPassword';

        password: string;
      }

      export interface FirebaseConfig {
        apiKey: string;

        appId: string;

        authDomain: string;

        databaseURL: string;

        projectId: string;

        measurementId?: string;

        messagingSenderId?: string;

        storageBucket?: string;
      }
    }
  }

  export interface ConnectorForeceiptDiscriminatedConnectionSettings {
    connector_name: 'foreceipt';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorForeceiptDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorForeceiptDiscriminatedConnectionSettings {
    export interface Settings {
      envName: 'staging' | 'production';

      _id?: unknown;

      credentials?: unknown;
    }
  }

  export interface ConnectorGreenhouseDiscriminatedConnectionSettings {
    connector_name: 'greenhouse';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGreenhouseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGreenhouseDiscriminatedConnectionSettings {
    export interface Settings {
      apiKey: string;
    }
  }

  export interface ConnectorHeronDiscriminatedConnectionSettings {
    connector_name: 'heron';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorLunchmoneyDiscriminatedConnectionSettings {
    connector_name: 'lunchmoney';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorMercuryDiscriminatedConnectionSettings {
    connector_name: 'mercury';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorMergeDiscriminatedConnectionSettings {
    connector_name: 'merge';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMergeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMergeDiscriminatedConnectionSettings {
    export interface Settings {
      accountToken: string;

      accountDetails?: unknown;
    }
  }

  export interface ConnectorMootaDiscriminatedConnectionSettings {
    connector_name: 'moota';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorOnebrickDiscriminatedConnectionSettings {
    connector_name: 'onebrick';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOnebrickDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOnebrickDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;
    }
  }

  export interface ConnectorOpenledgerDiscriminatedConnectionSettings {
    connector_name: 'openledger';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOpenledgerDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOpenledgerDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * Your entity's identifier, aka customer ID
       */
      entity_id: string;
    }
  }

  export interface ConnectorPlaidDiscriminatedConnectionSettings {
    connector_name: 'plaid';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPlaidDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPlaidDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;

      institution?: unknown;

      item?: unknown;

      itemId?: string | null;

      status?: unknown;

      webhookItemError?: null;
    }
  }

  export interface ConnectorPostgresDiscriminatedConnectionSettings {
    connector_name: 'postgres';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPostgresDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPostgresDiscriminatedConnectionSettings {
    export interface Settings {
      databaseURL?: string;
    }
  }

  export interface ConnectorRampDiscriminatedConnectionSettings {
    connector_name: 'ramp';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorRampDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorRampDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken?: string | null;

      startAfterTransactionId?: string | null;
    }
  }

  export interface ConnectorSaltedgeDiscriminatedConnectionSettings {
    connector_name: 'saltedge';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorSharepointOnpremDiscriminatedConnectionSettings {
    connector_name: 'sharepoint-onprem';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSharepointOnpremDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSharepointOnpremDiscriminatedConnectionSettings {
    export interface Settings {
      password: string;

      site_url: string;

      username: string;
    }
  }

  export interface ConnectorSplitwiseDiscriminatedConnectionSettings {
    connector_name: 'splitwise';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSplitwiseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSplitwiseDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;

      currentUser?: Settings.CurrentUser | null;
    }

    export namespace Settings {
      export interface CurrentUser {
        id: number;

        country_code: string;

        custom_picture: boolean;

        date_format: string;

        default_currency: string;

        default_group_id: number;

        email: string;

        first_name: string;

        force_refresh_at: string;

        last_name: string;

        locale: string;

        notifications: CurrentUser.Notifications;

        notifications_count: number;

        notifications_read: string;

        picture: CurrentUser.Picture;

        registration_status: string;
      }

      export namespace CurrentUser {
        export interface Notifications {
          added_as_friend: boolean;

          added_to_group: boolean;

          announcements: boolean;

          bills: boolean;

          expense_added: boolean;

          expense_updated: boolean;

          monthly_summary: boolean;

          payments: boolean;
        }

        export interface Picture {
          large?: string | null;

          medium?: string | null;

          original?: string | null;

          small?: string | null;

          xlarge?: string | null;

          xxlarge?: string | null;
        }
      }
    }
  }

  export interface ConnectorStripeDiscriminatedConnectionSettings {
    connector_name: 'stripe';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorStripeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorStripeDiscriminatedConnectionSettings {
    export interface Settings {
      secretKey: string;
    }
  }

  export interface ConnectorTellerDiscriminatedConnectionSettings {
    connector_name: 'teller';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTellerDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTellerDiscriminatedConnectionSettings {
    export interface Settings {
      token: string;
    }
  }

  export interface ConnectorTogglDiscriminatedConnectionSettings {
    connector_name: 'toggl';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTogglDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTogglDiscriminatedConnectionSettings {
    export interface Settings {
      apiToken: string;

      email?: string | null;

      password?: string | null;
    }
  }

  export interface ConnectorTwentyDiscriminatedConnectionSettings {
    connector_name: 'twenty';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwentyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwentyDiscriminatedConnectionSettings {
    export interface Settings {
      access_token: string;
    }
  }

  export interface ConnectorVenmoDiscriminatedConnectionSettings {
    connector_name: 'venmo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorVenmoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorVenmoDiscriminatedConnectionSettings {
    export interface Settings {
      credentials?: unknown;

      me?: unknown;
    }
  }

  export interface ConnectorWiseDiscriminatedConnectionSettings {
    connector_name: 'wise';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWiseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWiseDiscriminatedConnectionSettings {
    export interface Settings {
      envName: 'sandbox' | 'live';

      apiToken?: string | null;
    }
  }

  export interface ConnectorYodleeDiscriminatedConnectionSettings {
    connector_name: 'yodlee';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorYodleeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorYodleeDiscriminatedConnectionSettings {
    export interface Settings {
      loginName: string;

      providerAccountId: number | string;

      accessToken?: Settings.AccessToken | null;

      provider?: null;

      providerAccount?: Settings.ProviderAccount | null;

      user?: null;
    }

    export namespace Settings {
      export interface AccessToken {
        accessToken: string;

        expiresIn: number;

        issuedAt: string;
      }

      export interface ProviderAccount {
        id: number;

        aggregationSource: string;

        createdDate: string;

        dataset: Array<unknown>;

        isManual: boolean;

        providerId: number;

        status:
          | 'LOGIN_IN_PROGRESS'
          | 'USER_INPUT_REQUIRED'
          | 'IN_PROGRESS'
          | 'PARTIAL_SUCCESS'
          | 'SUCCESS'
          | 'FAILED';

        isDeleted?: boolean | null;
      }
    }
  }
}

export interface GetCurrentUserResponse {
  role: 'anon' | 'customer' | 'user' | 'org' | 'system';

  [k: string]: unknown;
}

export interface GetMessageTemplateResponse {
  language: string;

  template: string;
}

export type ListConnectionConfigsResponse =
  | ListConnectionConfigsResponse.ConnectorAcceloDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAcmeApikeyDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAcmeOauth2DiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAdobeDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAdyenDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAircallDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAmazonDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorApaleoDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAsanaDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAttioDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAuth0DiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAutodeskDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAwsDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorBamboohrDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorBasecampDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorBattlenetDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorBigcommerceDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorBitbucketDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorBitlyDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorBlackbaudDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorBoldsignDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorBoxDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorBraintreeDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorCalendlyDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorClickupDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorCloseDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorConfluenceDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorContentfulDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorContentstackDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorCopperDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorCorosDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorDatevDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorDeelDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorDialpadDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorDigitaloceanDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorDiscordDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorDocusignDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorDropboxDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorEbayDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorEgnyteDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorEnvoyDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorEventbriteDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorExistDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorFacebookDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorFactorialDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorFigmaDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorFitbitDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorFortnoxDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorFreshbooksDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorFrontDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGitHubDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGitlabDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGongDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGoogleCalendarDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGoogleDocsDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGoogleDriveDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGoogleMailDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGoogleSheetDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGorgiasDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGrainDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGumroadDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGustoDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorHarvestDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorHighlevelDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorHubspotDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorInstagramDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorIntercomDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorJiraDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorKeapDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorLeverDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorLinearDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorLinkedinDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorLinkhutDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorMailchimpDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorMiroDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorMondayDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorMuralDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorNamelyDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorNationbuilderDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorNetsuiteDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorNotionDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorOdooDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorOktaDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorOsuDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorOuraDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorOutreachDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorPagerdutyDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorPandadocDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorPayfitDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorPaypalDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorPennylaneDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorPinterestDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorPipedriveDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorPodiumDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorProductboardDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorQualtricsDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorQuickbooksDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorRedditDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSageDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSalesforceDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSalesloftDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSegmentDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorServicem8DiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorServicenowDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSharepointDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorShopifyDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSignnowDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSlackDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSmartsheetDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSnowflakeDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSpotifyDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSquarespaceDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSquareupDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorStackexchangeDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorStravaDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTeamworkDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTicktickDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTimelyDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTodoistDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTremendousDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTsheetsteamDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTumblrDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTwinfieldDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTwitchDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTwitterDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTypeformDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorUberDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorVimeoDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorWakatimeDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorWealthboxDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorWebflowDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorWhoopDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorWordpressDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorWrikeDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorXeroDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorYahooDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorYandexDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorZapierDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorZendeskDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorZenefitsDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorZohoDeskDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorZohoDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorZoomDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorAirtableDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorApolloDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorBrexDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorCodaDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorFinchDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorFirebaseDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorForeceiptDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorGreenhouseDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorHeronDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorLunchmoneyDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorMercuryDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorMergeDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorMootaDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorOnebrickDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorOpenledgerDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorPlaidDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorPostgresDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorRampDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSaltedgeDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSharepointOnpremDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorSplitwiseDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorStripeDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTellerDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTogglDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorTwentyDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorVenmoDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorWiseDiscriminatedConnectorConfig
  | ListConnectionConfigsResponse.ConnectorYodleeDiscriminatedConnectorConfig;

export namespace ListConnectionConfigsResponse {
  export interface ConnectorAcceloDiscriminatedConnectorConfig {
    config: ConnectorAcceloDiscriminatedConnectorConfig.Config;

    connector_name: 'accelo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAcceloDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAcmeApikeyDiscriminatedConnectorConfig {
    /**
     * Base configuration for api key connector
     */
    config: unknown;

    connector_name: 'acme-apikey';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorAcmeOauth2DiscriminatedConnectorConfig {
    config: ConnectorAcmeOauth2DiscriminatedConnectorConfig.Config;

    connector_name: 'acme-oauth2';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAcmeOauth2DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAdobeDiscriminatedConnectorConfig {
    config: ConnectorAdobeDiscriminatedConnectorConfig.Config;

    connector_name: 'adobe';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAdobeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAdyenDiscriminatedConnectorConfig {
    config: ConnectorAdyenDiscriminatedConnectorConfig.Config;

    connector_name: 'adyen';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAdyenDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAircallDiscriminatedConnectorConfig {
    config: ConnectorAircallDiscriminatedConnectorConfig.Config;

    connector_name: 'aircall';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAircallDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAmazonDiscriminatedConnectorConfig {
    config: ConnectorAmazonDiscriminatedConnectorConfig.Config;

    connector_name: 'amazon';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAmazonDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorApaleoDiscriminatedConnectorConfig {
    config: ConnectorApaleoDiscriminatedConnectorConfig.Config;

    connector_name: 'apaleo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorApaleoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAsanaDiscriminatedConnectorConfig {
    config: ConnectorAsanaDiscriminatedConnectorConfig.Config;

    connector_name: 'asana';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAsanaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAttioDiscriminatedConnectorConfig {
    config: ConnectorAttioDiscriminatedConnectorConfig.Config;

    connector_name: 'attio';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAttioDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAuth0DiscriminatedConnectorConfig {
    config: ConnectorAuth0DiscriminatedConnectorConfig.Config;

    connector_name: 'auth0';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAuth0DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAutodeskDiscriminatedConnectorConfig {
    config: ConnectorAutodeskDiscriminatedConnectorConfig.Config;

    connector_name: 'autodesk';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAutodeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAwsDiscriminatedConnectorConfig {
    config: ConnectorAwsDiscriminatedConnectorConfig.Config;

    connector_name: 'aws';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAwsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBamboohrDiscriminatedConnectorConfig {
    config: ConnectorBamboohrDiscriminatedConnectorConfig.Config;

    connector_name: 'bamboohr';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBamboohrDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBasecampDiscriminatedConnectorConfig {
    config: ConnectorBasecampDiscriminatedConnectorConfig.Config;

    connector_name: 'basecamp';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBasecampDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBattlenetDiscriminatedConnectorConfig {
    config: ConnectorBattlenetDiscriminatedConnectorConfig.Config;

    connector_name: 'battlenet';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBattlenetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBigcommerceDiscriminatedConnectorConfig {
    config: ConnectorBigcommerceDiscriminatedConnectorConfig.Config;

    connector_name: 'bigcommerce';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBigcommerceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBitbucketDiscriminatedConnectorConfig {
    config: ConnectorBitbucketDiscriminatedConnectorConfig.Config;

    connector_name: 'bitbucket';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBitbucketDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBitlyDiscriminatedConnectorConfig {
    config: ConnectorBitlyDiscriminatedConnectorConfig.Config;

    connector_name: 'bitly';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBitlyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBlackbaudDiscriminatedConnectorConfig {
    config: ConnectorBlackbaudDiscriminatedConnectorConfig.Config;

    connector_name: 'blackbaud';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBlackbaudDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBoldsignDiscriminatedConnectorConfig {
    config: ConnectorBoldsignDiscriminatedConnectorConfig.Config;

    connector_name: 'boldsign';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBoldsignDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBoxDiscriminatedConnectorConfig {
    config: ConnectorBoxDiscriminatedConnectorConfig.Config;

    connector_name: 'box';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBoxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBraintreeDiscriminatedConnectorConfig {
    config: ConnectorBraintreeDiscriminatedConnectorConfig.Config;

    connector_name: 'braintree';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBraintreeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCalendlyDiscriminatedConnectorConfig {
    config: ConnectorCalendlyDiscriminatedConnectorConfig.Config;

    connector_name: 'calendly';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCalendlyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorClickupDiscriminatedConnectorConfig {
    config: ConnectorClickupDiscriminatedConnectorConfig.Config;

    connector_name: 'clickup';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorClickupDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCloseDiscriminatedConnectorConfig {
    config: ConnectorCloseDiscriminatedConnectorConfig.Config;

    connector_name: 'close';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCloseDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorConfluenceDiscriminatedConnectorConfig {
    config: ConnectorConfluenceDiscriminatedConnectorConfig.Config;

    connector_name: 'confluence';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorConfluenceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorContentfulDiscriminatedConnectorConfig {
    config: ConnectorContentfulDiscriminatedConnectorConfig.Config;

    connector_name: 'contentful';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorContentfulDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorContentstackDiscriminatedConnectorConfig {
    config: ConnectorContentstackDiscriminatedConnectorConfig.Config;

    connector_name: 'contentstack';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorContentstackDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCopperDiscriminatedConnectorConfig {
    config: ConnectorCopperDiscriminatedConnectorConfig.Config;

    connector_name: 'copper';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCopperDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCorosDiscriminatedConnectorConfig {
    config: ConnectorCorosDiscriminatedConnectorConfig.Config;

    connector_name: 'coros';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCorosDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDatevDiscriminatedConnectorConfig {
    config: ConnectorDatevDiscriminatedConnectorConfig.Config;

    connector_name: 'datev';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDatevDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDeelDiscriminatedConnectorConfig {
    config: ConnectorDeelDiscriminatedConnectorConfig.Config;

    connector_name: 'deel';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDeelDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDialpadDiscriminatedConnectorConfig {
    config: ConnectorDialpadDiscriminatedConnectorConfig.Config;

    connector_name: 'dialpad';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDialpadDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDigitaloceanDiscriminatedConnectorConfig {
    config: ConnectorDigitaloceanDiscriminatedConnectorConfig.Config;

    connector_name: 'digitalocean';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDigitaloceanDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDiscordDiscriminatedConnectorConfig {
    config: ConnectorDiscordDiscriminatedConnectorConfig.Config;

    connector_name: 'discord';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDiscordDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDocusignDiscriminatedConnectorConfig {
    config: ConnectorDocusignDiscriminatedConnectorConfig.Config;

    connector_name: 'docusign';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDocusignDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDropboxDiscriminatedConnectorConfig {
    config: ConnectorDropboxDiscriminatedConnectorConfig.Config;

    connector_name: 'dropbox';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDropboxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEbayDiscriminatedConnectorConfig {
    config: ConnectorEbayDiscriminatedConnectorConfig.Config;

    connector_name: 'ebay';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEbayDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEgnyteDiscriminatedConnectorConfig {
    config: ConnectorEgnyteDiscriminatedConnectorConfig.Config;

    connector_name: 'egnyte';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEgnyteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEnvoyDiscriminatedConnectorConfig {
    config: ConnectorEnvoyDiscriminatedConnectorConfig.Config;

    connector_name: 'envoy';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEnvoyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEventbriteDiscriminatedConnectorConfig {
    config: ConnectorEventbriteDiscriminatedConnectorConfig.Config;

    connector_name: 'eventbrite';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEventbriteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorExistDiscriminatedConnectorConfig {
    config: ConnectorExistDiscriminatedConnectorConfig.Config;

    connector_name: 'exist';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorExistDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFacebookDiscriminatedConnectorConfig {
    config: ConnectorFacebookDiscriminatedConnectorConfig.Config;

    connector_name: 'facebook';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFacebookDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFactorialDiscriminatedConnectorConfig {
    config: ConnectorFactorialDiscriminatedConnectorConfig.Config;

    connector_name: 'factorial';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFactorialDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFigmaDiscriminatedConnectorConfig {
    config: ConnectorFigmaDiscriminatedConnectorConfig.Config;

    connector_name: 'figma';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFigmaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFitbitDiscriminatedConnectorConfig {
    config: ConnectorFitbitDiscriminatedConnectorConfig.Config;

    connector_name: 'fitbit';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFitbitDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFortnoxDiscriminatedConnectorConfig {
    config: ConnectorFortnoxDiscriminatedConnectorConfig.Config;

    connector_name: 'fortnox';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFortnoxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFreshbooksDiscriminatedConnectorConfig {
    config: ConnectorFreshbooksDiscriminatedConnectorConfig.Config;

    connector_name: 'freshbooks';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFreshbooksDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFrontDiscriminatedConnectorConfig {
    config: ConnectorFrontDiscriminatedConnectorConfig.Config;

    connector_name: 'front';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFrontDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGitHubDiscriminatedConnectorConfig {
    config: ConnectorGitHubDiscriminatedConnectorConfig.Config;

    connector_name: 'github';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGitHubDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGitlabDiscriminatedConnectorConfig {
    config: ConnectorGitlabDiscriminatedConnectorConfig.Config;

    connector_name: 'gitlab';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGitlabDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGongDiscriminatedConnectorConfig {
    config: ConnectorGongDiscriminatedConnectorConfig.Config;

    connector_name: 'gong';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGongDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleCalendarDiscriminatedConnectorConfig {
    config: ConnectorGoogleCalendarDiscriminatedConnectorConfig.Config;

    connector_name: 'google-calendar';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleCalendarDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleDocsDiscriminatedConnectorConfig {
    config: ConnectorGoogleDocsDiscriminatedConnectorConfig.Config;

    connector_name: 'google-docs';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDocsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleDriveDiscriminatedConnectorConfig {
    config: ConnectorGoogleDriveDiscriminatedConnectorConfig.Config;

    connector_name: 'google-drive';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDriveDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleMailDiscriminatedConnectorConfig {
    config: ConnectorGoogleMailDiscriminatedConnectorConfig.Config;

    connector_name: 'google-mail';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleMailDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleSheetDiscriminatedConnectorConfig {
    config: ConnectorGoogleSheetDiscriminatedConnectorConfig.Config;

    connector_name: 'google-sheet';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleSheetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGorgiasDiscriminatedConnectorConfig {
    config: ConnectorGorgiasDiscriminatedConnectorConfig.Config;

    connector_name: 'gorgias';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGorgiasDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGrainDiscriminatedConnectorConfig {
    config: ConnectorGrainDiscriminatedConnectorConfig.Config;

    connector_name: 'grain';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGrainDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGumroadDiscriminatedConnectorConfig {
    config: ConnectorGumroadDiscriminatedConnectorConfig.Config;

    connector_name: 'gumroad';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGumroadDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGustoDiscriminatedConnectorConfig {
    config: ConnectorGustoDiscriminatedConnectorConfig.Config;

    connector_name: 'gusto';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGustoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHarvestDiscriminatedConnectorConfig {
    config: ConnectorHarvestDiscriminatedConnectorConfig.Config;

    connector_name: 'harvest';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHarvestDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHighlevelDiscriminatedConnectorConfig {
    config: ConnectorHighlevelDiscriminatedConnectorConfig.Config;

    connector_name: 'highlevel';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHighlevelDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHubspotDiscriminatedConnectorConfig {
    config: ConnectorHubspotDiscriminatedConnectorConfig.Config;

    connector_name: 'hubspot';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHubspotDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorInstagramDiscriminatedConnectorConfig {
    config: ConnectorInstagramDiscriminatedConnectorConfig.Config;

    connector_name: 'instagram';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorInstagramDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorIntercomDiscriminatedConnectorConfig {
    config: ConnectorIntercomDiscriminatedConnectorConfig.Config;

    connector_name: 'intercom';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorIntercomDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorJiraDiscriminatedConnectorConfig {
    config: ConnectorJiraDiscriminatedConnectorConfig.Config;

    connector_name: 'jira';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorJiraDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorKeapDiscriminatedConnectorConfig {
    config: ConnectorKeapDiscriminatedConnectorConfig.Config;

    connector_name: 'keap';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorKeapDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLeverDiscriminatedConnectorConfig {
    config: ConnectorLeverDiscriminatedConnectorConfig.Config;

    connector_name: 'lever';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLeverDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinearDiscriminatedConnectorConfig {
    config: ConnectorLinearDiscriminatedConnectorConfig.Config;

    connector_name: 'linear';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinearDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinkedinDiscriminatedConnectorConfig {
    config: ConnectorLinkedinDiscriminatedConnectorConfig.Config;

    connector_name: 'linkedin';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinkedinDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinkhutDiscriminatedConnectorConfig {
    config: ConnectorLinkhutDiscriminatedConnectorConfig.Config;

    connector_name: 'linkhut';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinkhutDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMailchimpDiscriminatedConnectorConfig {
    config: ConnectorMailchimpDiscriminatedConnectorConfig.Config;

    connector_name: 'mailchimp';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMailchimpDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMiroDiscriminatedConnectorConfig {
    config: ConnectorMiroDiscriminatedConnectorConfig.Config;

    connector_name: 'miro';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMiroDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMondayDiscriminatedConnectorConfig {
    config: ConnectorMondayDiscriminatedConnectorConfig.Config;

    connector_name: 'monday';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMondayDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMuralDiscriminatedConnectorConfig {
    config: ConnectorMuralDiscriminatedConnectorConfig.Config;

    connector_name: 'mural';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMuralDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNamelyDiscriminatedConnectorConfig {
    config: ConnectorNamelyDiscriminatedConnectorConfig.Config;

    connector_name: 'namely';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNamelyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNationbuilderDiscriminatedConnectorConfig {
    config: ConnectorNationbuilderDiscriminatedConnectorConfig.Config;

    connector_name: 'nationbuilder';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNationbuilderDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNetsuiteDiscriminatedConnectorConfig {
    config: ConnectorNetsuiteDiscriminatedConnectorConfig.Config;

    connector_name: 'netsuite';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNetsuiteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNotionDiscriminatedConnectorConfig {
    config: ConnectorNotionDiscriminatedConnectorConfig.Config;

    connector_name: 'notion';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNotionDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOdooDiscriminatedConnectorConfig {
    config: ConnectorOdooDiscriminatedConnectorConfig.Config;

    connector_name: 'odoo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOdooDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOktaDiscriminatedConnectorConfig {
    config: ConnectorOktaDiscriminatedConnectorConfig.Config;

    connector_name: 'okta';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOktaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOsuDiscriminatedConnectorConfig {
    config: ConnectorOsuDiscriminatedConnectorConfig.Config;

    connector_name: 'osu';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOsuDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOuraDiscriminatedConnectorConfig {
    config: ConnectorOuraDiscriminatedConnectorConfig.Config;

    connector_name: 'oura';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOuraDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOutreachDiscriminatedConnectorConfig {
    config: ConnectorOutreachDiscriminatedConnectorConfig.Config;

    connector_name: 'outreach';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOutreachDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPagerdutyDiscriminatedConnectorConfig {
    config: ConnectorPagerdutyDiscriminatedConnectorConfig.Config;

    connector_name: 'pagerduty';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPagerdutyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPandadocDiscriminatedConnectorConfig {
    config: ConnectorPandadocDiscriminatedConnectorConfig.Config;

    connector_name: 'pandadoc';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPandadocDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPayfitDiscriminatedConnectorConfig {
    config: ConnectorPayfitDiscriminatedConnectorConfig.Config;

    connector_name: 'payfit';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPayfitDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPaypalDiscriminatedConnectorConfig {
    config: ConnectorPaypalDiscriminatedConnectorConfig.Config;

    connector_name: 'paypal';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPaypalDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPennylaneDiscriminatedConnectorConfig {
    config: ConnectorPennylaneDiscriminatedConnectorConfig.Config;

    connector_name: 'pennylane';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPennylaneDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPinterestDiscriminatedConnectorConfig {
    config: ConnectorPinterestDiscriminatedConnectorConfig.Config;

    connector_name: 'pinterest';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPinterestDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPipedriveDiscriminatedConnectorConfig {
    config: ConnectorPipedriveDiscriminatedConnectorConfig.Config;

    connector_name: 'pipedrive';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPipedriveDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPodiumDiscriminatedConnectorConfig {
    config: ConnectorPodiumDiscriminatedConnectorConfig.Config;

    connector_name: 'podium';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPodiumDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorProductboardDiscriminatedConnectorConfig {
    config: ConnectorProductboardDiscriminatedConnectorConfig.Config;

    connector_name: 'productboard';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorProductboardDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorQualtricsDiscriminatedConnectorConfig {
    config: ConnectorQualtricsDiscriminatedConnectorConfig.Config;

    connector_name: 'qualtrics';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorQualtricsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorQuickbooksDiscriminatedConnectorConfig {
    config: ConnectorQuickbooksDiscriminatedConnectorConfig.Config;

    connector_name: 'quickbooks';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorQuickbooksDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorRedditDiscriminatedConnectorConfig {
    config: ConnectorRedditDiscriminatedConnectorConfig.Config;

    connector_name: 'reddit';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorRedditDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSageDiscriminatedConnectorConfig {
    config: ConnectorSageDiscriminatedConnectorConfig.Config;

    connector_name: 'sage';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSageDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSalesforceDiscriminatedConnectorConfig {
    config: ConnectorSalesforceDiscriminatedConnectorConfig.Config;

    connector_name: 'salesforce';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSalesforceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSalesloftDiscriminatedConnectorConfig {
    config: ConnectorSalesloftDiscriminatedConnectorConfig.Config;

    connector_name: 'salesloft';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSalesloftDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSegmentDiscriminatedConnectorConfig {
    config: ConnectorSegmentDiscriminatedConnectorConfig.Config;

    connector_name: 'segment';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSegmentDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorServicem8DiscriminatedConnectorConfig {
    config: ConnectorServicem8DiscriminatedConnectorConfig.Config;

    connector_name: 'servicem8';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorServicem8DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorServicenowDiscriminatedConnectorConfig {
    config: ConnectorServicenowDiscriminatedConnectorConfig.Config;

    connector_name: 'servicenow';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorServicenowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSharepointDiscriminatedConnectorConfig {
    config: ConnectorSharepointDiscriminatedConnectorConfig.Config;

    connector_name: 'sharepoint';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSharepointDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorShopifyDiscriminatedConnectorConfig {
    config: ConnectorShopifyDiscriminatedConnectorConfig.Config;

    connector_name: 'shopify';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorShopifyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSignnowDiscriminatedConnectorConfig {
    config: ConnectorSignnowDiscriminatedConnectorConfig.Config;

    connector_name: 'signnow';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSignnowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSlackDiscriminatedConnectorConfig {
    config: ConnectorSlackDiscriminatedConnectorConfig.Config;

    connector_name: 'slack';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSlackDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSmartsheetDiscriminatedConnectorConfig {
    config: ConnectorSmartsheetDiscriminatedConnectorConfig.Config;

    connector_name: 'smartsheet';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSmartsheetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSnowflakeDiscriminatedConnectorConfig {
    config: ConnectorSnowflakeDiscriminatedConnectorConfig.Config;

    connector_name: 'snowflake';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSnowflakeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSpotifyDiscriminatedConnectorConfig {
    config: ConnectorSpotifyDiscriminatedConnectorConfig.Config;

    connector_name: 'spotify';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSpotifyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSquarespaceDiscriminatedConnectorConfig {
    config: ConnectorSquarespaceDiscriminatedConnectorConfig.Config;

    connector_name: 'squarespace';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSquarespaceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSquareupDiscriminatedConnectorConfig {
    config: ConnectorSquareupDiscriminatedConnectorConfig.Config;

    connector_name: 'squareup';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSquareupDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorStackexchangeDiscriminatedConnectorConfig {
    config: ConnectorStackexchangeDiscriminatedConnectorConfig.Config;

    connector_name: 'stackexchange';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStackexchangeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorStravaDiscriminatedConnectorConfig {
    config: ConnectorStravaDiscriminatedConnectorConfig.Config;

    connector_name: 'strava';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStravaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTeamworkDiscriminatedConnectorConfig {
    config: ConnectorTeamworkDiscriminatedConnectorConfig.Config;

    connector_name: 'teamwork';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTeamworkDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTicktickDiscriminatedConnectorConfig {
    config: ConnectorTicktickDiscriminatedConnectorConfig.Config;

    connector_name: 'ticktick';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTicktickDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTimelyDiscriminatedConnectorConfig {
    config: ConnectorTimelyDiscriminatedConnectorConfig.Config;

    connector_name: 'timely';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTimelyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTodoistDiscriminatedConnectorConfig {
    config: ConnectorTodoistDiscriminatedConnectorConfig.Config;

    connector_name: 'todoist';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTodoistDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTremendousDiscriminatedConnectorConfig {
    config: ConnectorTremendousDiscriminatedConnectorConfig.Config;

    connector_name: 'tremendous';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTremendousDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTsheetsteamDiscriminatedConnectorConfig {
    config: ConnectorTsheetsteamDiscriminatedConnectorConfig.Config;

    connector_name: 'tsheetsteam';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTsheetsteamDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTumblrDiscriminatedConnectorConfig {
    config: ConnectorTumblrDiscriminatedConnectorConfig.Config;

    connector_name: 'tumblr';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTumblrDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwinfieldDiscriminatedConnectorConfig {
    config: ConnectorTwinfieldDiscriminatedConnectorConfig.Config;

    connector_name: 'twinfield';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwinfieldDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwitchDiscriminatedConnectorConfig {
    config: ConnectorTwitchDiscriminatedConnectorConfig.Config;

    connector_name: 'twitch';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwitchDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwitterDiscriminatedConnectorConfig {
    config: ConnectorTwitterDiscriminatedConnectorConfig.Config;

    connector_name: 'twitter';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwitterDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTypeformDiscriminatedConnectorConfig {
    config: ConnectorTypeformDiscriminatedConnectorConfig.Config;

    connector_name: 'typeform';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTypeformDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorUberDiscriminatedConnectorConfig {
    config: ConnectorUberDiscriminatedConnectorConfig.Config;

    connector_name: 'uber';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorUberDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorVimeoDiscriminatedConnectorConfig {
    config: ConnectorVimeoDiscriminatedConnectorConfig.Config;

    connector_name: 'vimeo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorVimeoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWakatimeDiscriminatedConnectorConfig {
    config: ConnectorWakatimeDiscriminatedConnectorConfig.Config;

    connector_name: 'wakatime';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWakatimeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWealthboxDiscriminatedConnectorConfig {
    config: ConnectorWealthboxDiscriminatedConnectorConfig.Config;

    connector_name: 'wealthbox';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWealthboxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWebflowDiscriminatedConnectorConfig {
    config: ConnectorWebflowDiscriminatedConnectorConfig.Config;

    connector_name: 'webflow';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWebflowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWhoopDiscriminatedConnectorConfig {
    config: ConnectorWhoopDiscriminatedConnectorConfig.Config;

    connector_name: 'whoop';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWhoopDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWordpressDiscriminatedConnectorConfig {
    config: ConnectorWordpressDiscriminatedConnectorConfig.Config;

    connector_name: 'wordpress';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWordpressDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWrikeDiscriminatedConnectorConfig {
    config: ConnectorWrikeDiscriminatedConnectorConfig.Config;

    connector_name: 'wrike';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWrikeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorXeroDiscriminatedConnectorConfig {
    config: ConnectorXeroDiscriminatedConnectorConfig.Config;

    connector_name: 'xero';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorXeroDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorYahooDiscriminatedConnectorConfig {
    config: ConnectorYahooDiscriminatedConnectorConfig.Config;

    connector_name: 'yahoo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYahooDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorYandexDiscriminatedConnectorConfig {
    config: ConnectorYandexDiscriminatedConnectorConfig.Config;

    connector_name: 'yandex';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYandexDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZapierDiscriminatedConnectorConfig {
    config: ConnectorZapierDiscriminatedConnectorConfig.Config;

    connector_name: 'zapier';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZapierDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZendeskDiscriminatedConnectorConfig {
    config: ConnectorZendeskDiscriminatedConnectorConfig.Config;

    connector_name: 'zendesk';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZendeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZenefitsDiscriminatedConnectorConfig {
    config: ConnectorZenefitsDiscriminatedConnectorConfig.Config;

    connector_name: 'zenefits';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZenefitsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZohoDeskDiscriminatedConnectorConfig {
    config: ConnectorZohoDeskDiscriminatedConnectorConfig.Config;

    connector_name: 'zoho-desk';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZohoDeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZohoDiscriminatedConnectorConfig {
    config: ConnectorZohoDiscriminatedConnectorConfig.Config;

    connector_name: 'zoho';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZohoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZoomDiscriminatedConnectorConfig {
    config: ConnectorZoomDiscriminatedConnectorConfig.Config;

    connector_name: 'zoom';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZoomDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAirtableDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'airtable';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorApolloDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'apollo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorBrexDiscriminatedConnectorConfig {
    config: ConnectorBrexDiscriminatedConnectorConfig.Config;

    connector_name: 'brex';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBrexDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorCodaDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'coda';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorFinchDiscriminatedConnectorConfig {
    config: ConnectorFinchDiscriminatedConnectorConfig.Config;

    connector_name: 'finch';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFinchDiscriminatedConnectorConfig {
    export interface Config {
      client_id: string;

      client_secret: string;

      /**
       * Finch products to access, @see
       * https://developer.tryfinch.com/api-reference/development-guides/Permissions
       */
      products: Array<
        | 'company'
        | 'directory'
        | 'individual'
        | 'ssn'
        | 'employment'
        | 'payment'
        | 'pay_statement'
        | 'benefits'
      >;

      /**
       * Finch API version
       */
      api_version?: string;
    }
  }

  export interface ConnectorFirebaseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'firebase';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorForeceiptDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'foreceipt';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorGreenhouseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'greenhouse';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorHeronDiscriminatedConnectorConfig {
    config: ConnectorHeronDiscriminatedConnectorConfig.Config;

    connector_name: 'heron';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHeronDiscriminatedConnectorConfig {
    export interface Config {
      apiKey: string;
    }
  }

  export interface ConnectorLunchmoneyDiscriminatedConnectorConfig {
    config: ConnectorLunchmoneyDiscriminatedConnectorConfig.Config;

    connector_name: 'lunchmoney';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLunchmoneyDiscriminatedConnectorConfig {
    export interface Config {
      accessToken: string;
    }
  }

  export interface ConnectorMercuryDiscriminatedConnectorConfig {
    config: ConnectorMercuryDiscriminatedConnectorConfig.Config;

    connector_name: 'mercury';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMercuryDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorMergeDiscriminatedConnectorConfig {
    config: ConnectorMergeDiscriminatedConnectorConfig.Config;

    connector_name: 'merge';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMergeDiscriminatedConnectorConfig {
    export interface Config {
      apiKey: string;
    }
  }

  export interface ConnectorMootaDiscriminatedConnectorConfig {
    config: ConnectorMootaDiscriminatedConnectorConfig.Config;

    connector_name: 'moota';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMootaDiscriminatedConnectorConfig {
    export interface Config {
      token: string;
    }
  }

  export interface ConnectorOnebrickDiscriminatedConnectorConfig {
    config: ConnectorOnebrickDiscriminatedConnectorConfig.Config;

    connector_name: 'onebrick';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOnebrickDiscriminatedConnectorConfig {
    export interface Config {
      clientId: string;

      clientSecret: string;

      envName: 'sandbox' | 'production';

      publicToken: string;

      accessToken?: string | null;

      redirectUrl?: string | null;
    }
  }

  export interface ConnectorOpenledgerDiscriminatedConnectorConfig {
    config: ConnectorOpenledgerDiscriminatedConnectorConfig.Config;

    connector_name: 'openledger';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOpenledgerDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API endpoint
       */
      api_url: string;

      /**
       * Your developer ID for authentication
       */
      developer_id: string;

      /**
       * Your developer secret
       */
      developer_secret: string;

      /**
       * Switch to "production" for live data
       */
      environment: 'development' | 'production';
    }
  }

  export interface ConnectorPlaidDiscriminatedConnectorConfig {
    config: ConnectorPlaidDiscriminatedConnectorConfig.Config;

    connector_name: 'plaid';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPlaidDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * The name of your application, as it should be displayed in Link. Maximum length
       * of 30 characters. If a value longer than 30 characters is provided, Link will
       * display "This Application" instead.
       */
      clientName: string;

      countryCodes: Array<
        | 'US'
        | 'GB'
        | 'ES'
        | 'NL'
        | 'FR'
        | 'IE'
        | 'CA'
        | 'DE'
        | 'IT'
        | 'PL'
        | 'DK'
        | 'NO'
        | 'SE'
        | 'EE'
        | 'LT'
        | 'LV'
      >;

      envName: 'sandbox' | 'development' | 'production';

      language: 'en' | 'fr' | 'es' | 'nl' | 'de';

      products: Array<
        | 'assets'
        | 'auth'
        | 'balance'
        | 'identity'
        | 'investments'
        | 'liabilities'
        | 'payment_initiation'
        | 'identity_verification'
        | 'transactions'
        | 'credit_details'
        | 'income'
        | 'income_verification'
        | 'deposit_switch'
        | 'standing_orders'
        | 'transfer'
        | 'employment'
        | 'recurring_transactions'
      >;

      credentials?: Config.Credentials | null;
    }

    export namespace Config {
      export interface Credentials {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorPostgresDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'postgres';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorRampDiscriminatedConnectorConfig {
    config: ConnectorRampDiscriminatedConnectorConfig.Config;

    connector_name: 'ramp';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorRampDiscriminatedConnectorConfig {
    export interface Config {
      oauth: Config.OAuth;
    }

    export namespace Config {
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorSaltedgeDiscriminatedConnectorConfig {
    config: ConnectorSaltedgeDiscriminatedConnectorConfig.Config;

    connector_name: 'saltedge';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSaltedgeDiscriminatedConnectorConfig {
    export interface Config {
      appId: string;

      secret: string;

      url?: string | null;
    }
  }

  export interface ConnectorSharepointOnpremDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'sharepoint-onprem';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorSplitwiseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'splitwise';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorStripeDiscriminatedConnectorConfig {
    config: ConnectorStripeDiscriminatedConnectorConfig.Config;

    connector_name: 'stripe';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStripeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorTellerDiscriminatedConnectorConfig {
    config: ConnectorTellerDiscriminatedConnectorConfig.Config;

    connector_name: 'teller';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTellerDiscriminatedConnectorConfig {
    export interface Config {
      applicationId: string;

      token?: string | null;
    }
  }

  export interface ConnectorTogglDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'toggl';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorTwentyDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'twenty';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorVenmoDiscriminatedConnectorConfig {
    config: ConnectorVenmoDiscriminatedConnectorConfig.Config;

    connector_name: 'venmo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorVenmoDiscriminatedConnectorConfig {
    export interface Config {
      proxy?: Config.Proxy | null;

      v1BaseURL?: string | null;

      v5BaseURL?: string | null;
    }

    export namespace Config {
      export interface Proxy {
        cert: string;

        url: string;
      }
    }
  }

  export interface ConnectorWiseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'wise';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorYodleeDiscriminatedConnectorConfig {
    config: ConnectorYodleeDiscriminatedConnectorConfig.Config;

    connector_name: 'yodlee';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYodleeDiscriminatedConnectorConfig {
    export interface Config {
      adminLoginName: string;

      clientId: string;

      clientSecret: string;

      envName: 'sandbox' | 'development' | 'production';

      proxy?: Config.Proxy | null;

      sandboxLoginName?: string | null;
    }

    export namespace Config {
      export interface Proxy {
        cert: string;

        url: string;
      }
    }
  }
}

/**
 * The connection details
 */
export type ListConnectionsResponse =
  | ListConnectionsResponse.ConnectorAcceloDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAcmeApikeyDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAcmeOauth2DiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAdobeDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAdyenDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAircallDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAmazonDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorApaleoDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAsanaDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAttioDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAuth0DiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAutodeskDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAwsDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorBamboohrDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorBasecampDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorBattlenetDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorBigcommerceDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorBitbucketDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorBitlyDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorBlackbaudDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorBoldsignDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorBoxDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorBraintreeDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorCalendlyDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorClickupDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorCloseDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorConfluenceDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorContentfulDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorContentstackDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorCopperDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorCorosDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorDatevDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorDeelDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorDialpadDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorDigitaloceanDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorDiscordDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorDocusignDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorDropboxDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorEbayDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorEgnyteDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorEnvoyDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorEventbriteDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorExistDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorFacebookDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorFactorialDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorFigmaDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorFitbitDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorFortnoxDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorFreshbooksDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorFrontDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGitHubDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGitlabDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGongDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGoogleCalendarDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGoogleDocsDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGoogleDriveDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGoogleMailDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGoogleSheetDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGorgiasDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGrainDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGumroadDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGustoDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorHarvestDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorHighlevelDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorHubspotDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorInstagramDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorIntercomDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorJiraDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorKeapDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorLeverDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorLinearDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorLinkedinDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorLinkhutDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorMailchimpDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorMiroDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorMondayDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorMuralDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorNamelyDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorNationbuilderDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorNetsuiteDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorNotionDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorOdooDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorOktaDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorOsuDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorOuraDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorOutreachDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorPagerdutyDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorPandadocDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorPayfitDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorPaypalDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorPennylaneDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorPinterestDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorPipedriveDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorPodiumDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorProductboardDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorQualtricsDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorQuickbooksDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorRedditDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSageDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSalesforceDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSalesloftDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSegmentDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorServicem8DiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorServicenowDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSharepointDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorShopifyDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSignnowDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSlackDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSmartsheetDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSnowflakeDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSpotifyDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSquarespaceDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSquareupDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorStackexchangeDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorStravaDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTeamworkDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTicktickDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTimelyDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTodoistDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTremendousDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTsheetsteamDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTumblrDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTwinfieldDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTwitchDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTwitterDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTypeformDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorUberDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorVimeoDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorWakatimeDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorWealthboxDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorWebflowDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorWhoopDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorWordpressDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorWrikeDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorXeroDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorYahooDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorYandexDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorZapierDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorZendeskDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorZenefitsDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorZohoDeskDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorZohoDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorZoomDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorAirtableDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorApolloDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorBrexDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorCodaDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorFinchDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorFirebaseDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorForeceiptDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorGreenhouseDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorHeronDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorLunchmoneyDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorMercuryDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorMergeDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorMootaDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorOnebrickDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorOpenledgerDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorPlaidDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorPostgresDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorRampDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSaltedgeDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSharepointOnpremDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorSplitwiseDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorStripeDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTellerDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTogglDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorTwentyDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorVenmoDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorWiseDiscriminatedConnectionSettings
  | ListConnectionsResponse.ConnectorYodleeDiscriminatedConnectionSettings;

export namespace ListConnectionsResponse {
  export interface ConnectorAcceloDiscriminatedConnectionSettings {
    connector_name: 'accelo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAcceloDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAcceloDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Accelo account (e.g., https://domain.api.accelo.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAcmeApikeyDiscriminatedConnectionSettings {
    connector_name: 'acme-apikey';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAcmeApikeyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAcmeApikeyDiscriminatedConnectionSettings {
    export interface Settings {
      api_key: string;
    }
  }

  export interface ConnectorAcmeOauth2DiscriminatedConnectionSettings {
    connector_name: 'acme-oauth2';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAcmeOauth2DiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAcmeOauth2DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAdobeDiscriminatedConnectionSettings {
    connector_name: 'adobe';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAdobeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAdobeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAdyenDiscriminatedConnectionSettings {
    connector_name: 'adyen';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAdyenDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAdyenDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The environment to use (e.g., live|test)
       */
      environment: string;

      oauth: Settings.OAuth;

      /**
       * The resource to use for your various requests (e.g.,
       * https://kyc-(live|test).adyen.com)
       */
      resource: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAircallDiscriminatedConnectionSettings {
    connector_name: 'aircall';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAircallDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAircallDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAmazonDiscriminatedConnectionSettings {
    connector_name: 'amazon';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAmazonDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAmazonDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension for your Amazon account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorApaleoDiscriminatedConnectionSettings {
    connector_name: 'apaleo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorApaleoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorApaleoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAsanaDiscriminatedConnectionSettings {
    connector_name: 'asana';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAsanaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAsanaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAttioDiscriminatedConnectionSettings {
    connector_name: 'attio';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAttioDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAttioDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAuth0DiscriminatedConnectionSettings {
    connector_name: 'auth0';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAuth0DiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAuth0DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Auth0 account (e.g., https://domain.auth0.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAutodeskDiscriminatedConnectionSettings {
    connector_name: 'autodesk';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAutodeskDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAutodeskDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAwsDiscriminatedConnectionSettings {
    connector_name: 'aws';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAwsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAwsDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API subdomain to the API you want to connect to (e.g.,
       * https://cognito-idp.us-east-2.amazonaws.com)
       */
      apiSubdomain: string;

      /**
       * The domain extension of your AWS account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * The subdomain of your AWS account (e.g., https://domain.amazoncognito.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBamboohrDiscriminatedConnectionSettings {
    connector_name: 'bamboohr';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBamboohrDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBamboohrDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your BambooHR account (e.g., https://domain.bamboohr.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBasecampDiscriminatedConnectionSettings {
    connector_name: 'basecamp';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBasecampDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBasecampDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * Your Account ID (e.g., 5899981)
       */
      accountId: string;

      /**
       * The details of your app (e.g., example-subdomain)
       */
      appDetails: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBattlenetDiscriminatedConnectionSettings {
    connector_name: 'battlenet';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBattlenetDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBattlenetDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to where you will access your API (e.g., https://us.api.blizzard.com)
       */
      apiDomain: string;

      /**
       * The domain extension of your Battle.net account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBigcommerceDiscriminatedConnectionSettings {
    connector_name: 'bigcommerce';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBigcommerceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBigcommerceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account UUID of your BigCommerce account (e.g.,
       * 123e4567-e89b-12d3-a456-426614174000)
       */
      accountUuid: string;

      oauth: Settings.OAuth;

      /**
       * The store hash of your BigCommerce account (e.g., Example123)
       */
      storeHash: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBitbucketDiscriminatedConnectionSettings {
    connector_name: 'bitbucket';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBitbucketDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBitbucketDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBitlyDiscriminatedConnectionSettings {
    connector_name: 'bitly';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBitlyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBitlyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBlackbaudDiscriminatedConnectionSettings {
    connector_name: 'blackbaud';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBlackbaudDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBlackbaudDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBoldsignDiscriminatedConnectionSettings {
    connector_name: 'boldsign';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBoldsignDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBoldsignDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBoxDiscriminatedConnectionSettings {
    connector_name: 'box';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBoxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBoxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBraintreeDiscriminatedConnectionSettings {
    connector_name: 'braintree';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBraintreeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBraintreeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCalendlyDiscriminatedConnectionSettings {
    connector_name: 'calendly';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCalendlyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCalendlyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorClickupDiscriminatedConnectionSettings {
    connector_name: 'clickup';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorClickupDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorClickupDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCloseDiscriminatedConnectionSettings {
    connector_name: 'close';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCloseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCloseDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorConfluenceDiscriminatedConnectionSettings {
    connector_name: 'confluence';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorConfluenceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorConfluenceDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorContentfulDiscriminatedConnectionSettings {
    connector_name: 'contentful';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorContentfulDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorContentfulDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Contentful account (e.g., https://domain.contentful.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorContentstackDiscriminatedConnectionSettings {
    connector_name: 'contentstack';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorContentstackDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorContentstackDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to where you will access your API (e.g.,
       * https://eu-api.contentstack.com)
       */
      apiDomain: string;

      /**
       * The app ID of your Contentstack account (e.g., example-subdomain)
       */
      appId: string;

      oauth: Settings.OAuth;

      /**
       * The subdomain of your Contentstack account (e.g.,
       * https://domain.contentstack.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCopperDiscriminatedConnectionSettings {
    connector_name: 'copper';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCopperDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCopperDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCorosDiscriminatedConnectionSettings {
    connector_name: 'coros';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCorosDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCorosDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDatevDiscriminatedConnectionSettings {
    connector_name: 'datev';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDatevDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDatevDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDeelDiscriminatedConnectionSettings {
    connector_name: 'deel';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDeelDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDeelDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDialpadDiscriminatedConnectionSettings {
    connector_name: 'dialpad';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDialpadDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDialpadDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDigitaloceanDiscriminatedConnectionSettings {
    connector_name: 'digitalocean';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDigitaloceanDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDigitaloceanDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDiscordDiscriminatedConnectionSettings {
    connector_name: 'discord';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDiscordDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDiscordDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDocusignDiscriminatedConnectionSettings {
    connector_name: 'docusign';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDocusignDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDocusignDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDropboxDiscriminatedConnectionSettings {
    connector_name: 'dropbox';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorDropboxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorDropboxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEbayDiscriminatedConnectionSettings {
    connector_name: 'ebay';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEbayDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEbayDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEgnyteDiscriminatedConnectionSettings {
    connector_name: 'egnyte';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEgnyteDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEgnyteDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Egnyte account (e.g., https://domain.egnyte.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEnvoyDiscriminatedConnectionSettings {
    connector_name: 'envoy';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEnvoyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEnvoyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEventbriteDiscriminatedConnectionSettings {
    connector_name: 'eventbrite';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorEventbriteDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorEventbriteDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorExistDiscriminatedConnectionSettings {
    connector_name: 'exist';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorExistDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorExistDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFacebookDiscriminatedConnectionSettings {
    connector_name: 'facebook';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFacebookDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFacebookDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFactorialDiscriminatedConnectionSettings {
    connector_name: 'factorial';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFactorialDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFactorialDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFigmaDiscriminatedConnectionSettings {
    connector_name: 'figma';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFigmaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFigmaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFitbitDiscriminatedConnectionSettings {
    connector_name: 'fitbit';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFitbitDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFitbitDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFortnoxDiscriminatedConnectionSettings {
    connector_name: 'fortnox';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFortnoxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFortnoxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFreshbooksDiscriminatedConnectionSettings {
    connector_name: 'freshbooks';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFreshbooksDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFreshbooksDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFrontDiscriminatedConnectionSettings {
    connector_name: 'front';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFrontDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFrontDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGitHubDiscriminatedConnectionSettings {
    connector_name: 'github';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGitHubDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGitHubDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGitlabDiscriminatedConnectionSettings {
    connector_name: 'gitlab';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGitlabDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGitlabDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGongDiscriminatedConnectionSettings {
    connector_name: 'gong';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGongDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGongDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The base URL of your Gong account (e.g., example)
       */
      api_base_url_for_customer: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleCalendarDiscriminatedConnectionSettings {
    connector_name: 'google-calendar';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleCalendarDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleCalendarDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleDocsDiscriminatedConnectionSettings {
    connector_name: 'google-docs';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleDocsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDocsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleDriveDiscriminatedConnectionSettings {
    connector_name: 'google-drive';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleDriveDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDriveDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleMailDiscriminatedConnectionSettings {
    connector_name: 'google-mail';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleMailDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleMailDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleSheetDiscriminatedConnectionSettings {
    connector_name: 'google-sheet';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGoogleSheetDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGoogleSheetDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGorgiasDiscriminatedConnectionSettings {
    connector_name: 'gorgias';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGorgiasDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGorgiasDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Gorgias account (e.g., https://domain.gorgias.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGrainDiscriminatedConnectionSettings {
    connector_name: 'grain';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGrainDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGrainDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGumroadDiscriminatedConnectionSettings {
    connector_name: 'gumroad';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGumroadDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGumroadDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGustoDiscriminatedConnectionSettings {
    connector_name: 'gusto';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGustoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGustoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHarvestDiscriminatedConnectionSettings {
    connector_name: 'harvest';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorHarvestDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorHarvestDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The details of your app (e.g., example-subdomain)
       */
      appDetails: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHighlevelDiscriminatedConnectionSettings {
    connector_name: 'highlevel';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorHighlevelDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorHighlevelDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHubspotDiscriminatedConnectionSettings {
    connector_name: 'hubspot';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorHubspotDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorHubspotDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorInstagramDiscriminatedConnectionSettings {
    connector_name: 'instagram';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorInstagramDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorInstagramDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorIntercomDiscriminatedConnectionSettings {
    connector_name: 'intercom';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorIntercomDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorIntercomDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorJiraDiscriminatedConnectionSettings {
    connector_name: 'jira';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorJiraDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorJiraDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorKeapDiscriminatedConnectionSettings {
    connector_name: 'keap';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorKeapDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorKeapDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLeverDiscriminatedConnectionSettings {
    connector_name: 'lever';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLeverDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLeverDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinearDiscriminatedConnectionSettings {
    connector_name: 'linear';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLinearDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLinearDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinkedinDiscriminatedConnectionSettings {
    connector_name: 'linkedin';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLinkedinDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLinkedinDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinkhutDiscriminatedConnectionSettings {
    connector_name: 'linkhut';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorLinkhutDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorLinkhutDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMailchimpDiscriminatedConnectionSettings {
    connector_name: 'mailchimp';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMailchimpDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMailchimpDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The data center for your account (e.g., us6)
       */
      dc: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMiroDiscriminatedConnectionSettings {
    connector_name: 'miro';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMiroDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMiroDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMondayDiscriminatedConnectionSettings {
    connector_name: 'monday';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMondayDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMondayDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMuralDiscriminatedConnectionSettings {
    connector_name: 'mural';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMuralDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMuralDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNamelyDiscriminatedConnectionSettings {
    connector_name: 'namely';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNamelyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNamelyDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The name of your Namely company (e.g., example)
       */
      company: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNationbuilderDiscriminatedConnectionSettings {
    connector_name: 'nationbuilder';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNationbuilderDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNationbuilderDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account ID of your NationBuilder account (e.g., example-subdomain)
       */
      accountId: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNetsuiteDiscriminatedConnectionSettings {
    connector_name: 'netsuite';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNetsuiteDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNetsuiteDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account ID of your NetSuite account (e.g., tstdrv231585)
       */
      accountId: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNotionDiscriminatedConnectionSettings {
    connector_name: 'notion';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorNotionDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorNotionDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOdooDiscriminatedConnectionSettings {
    connector_name: 'odoo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOdooDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOdooDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The domain of your Odoo account (e.g., https://example-subdomain)
       */
      serverUrl: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOktaDiscriminatedConnectionSettings {
    connector_name: 'okta';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOktaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOktaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Okta account (e.g., https://domain.okta.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOsuDiscriminatedConnectionSettings {
    connector_name: 'osu';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOsuDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOsuDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOuraDiscriminatedConnectionSettings {
    connector_name: 'oura';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOuraDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOuraDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOutreachDiscriminatedConnectionSettings {
    connector_name: 'outreach';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOutreachDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOutreachDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPagerdutyDiscriminatedConnectionSettings {
    connector_name: 'pagerduty';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPagerdutyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPagerdutyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPandadocDiscriminatedConnectionSettings {
    connector_name: 'pandadoc';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPandadocDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPandadocDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPayfitDiscriminatedConnectionSettings {
    connector_name: 'payfit';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPayfitDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPayfitDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPaypalDiscriminatedConnectionSettings {
    connector_name: 'paypal';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPaypalDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPaypalDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPennylaneDiscriminatedConnectionSettings {
    connector_name: 'pennylane';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPennylaneDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPennylaneDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPinterestDiscriminatedConnectionSettings {
    connector_name: 'pinterest';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPinterestDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPinterestDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPipedriveDiscriminatedConnectionSettings {
    connector_name: 'pipedrive';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPipedriveDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPipedriveDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API URL of your Pipedrive account (e.g., example)
       */
      api_domain: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPodiumDiscriminatedConnectionSettings {
    connector_name: 'podium';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPodiumDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPodiumDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API version of your Podium account (e.g., example-subdomain)
       */
      apiVersion: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorProductboardDiscriminatedConnectionSettings {
    connector_name: 'productboard';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorProductboardDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorProductboardDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorQualtricsDiscriminatedConnectionSettings {
    connector_name: 'qualtrics';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorQualtricsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorQualtricsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Qualtrics account (e.g., https://domain.qualtrics.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorQuickbooksDiscriminatedConnectionSettings {
    connector_name: 'quickbooks';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorQuickbooksDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorQuickbooksDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorRedditDiscriminatedConnectionSettings {
    connector_name: 'reddit';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorRedditDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorRedditDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSageDiscriminatedConnectionSettings {
    connector_name: 'sage';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSageDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSageDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSalesforceDiscriminatedConnectionSettings {
    connector_name: 'salesforce';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSalesforceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSalesforceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The instance URL of your Salesforce account (e.g., example)
       */
      instance_url: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSalesloftDiscriminatedConnectionSettings {
    connector_name: 'salesloft';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSalesloftDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSalesloftDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSegmentDiscriminatedConnectionSettings {
    connector_name: 'segment';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSegmentDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSegmentDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorServicem8DiscriminatedConnectionSettings {
    connector_name: 'servicem8';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorServicem8DiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorServicem8DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorServicenowDiscriminatedConnectionSettings {
    connector_name: 'servicenow';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorServicenowDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorServicenowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your ServiceNow account (e.g., https://domain.service-now.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSharepointDiscriminatedConnectionSettings {
    connector_name: 'sharepoint';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSharepointDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSharepointDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorShopifyDiscriminatedConnectionSettings {
    connector_name: 'shopify';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorShopifyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorShopifyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Shopify account (e.g., https://domain.myshopify.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSignnowDiscriminatedConnectionSettings {
    connector_name: 'signnow';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSignnowDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSignnowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSlackDiscriminatedConnectionSettings {
    connector_name: 'slack';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSlackDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSlackDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSmartsheetDiscriminatedConnectionSettings {
    connector_name: 'smartsheet';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSmartsheetDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSmartsheetDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSnowflakeDiscriminatedConnectionSettings {
    connector_name: 'snowflake';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSnowflakeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSnowflakeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The domain of your Snowflake account (e.g., https://example-subdomain)
       */
      snowflake_account_url: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSpotifyDiscriminatedConnectionSettings {
    connector_name: 'spotify';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSpotifyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSpotifyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSquarespaceDiscriminatedConnectionSettings {
    connector_name: 'squarespace';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSquarespaceDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSquarespaceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The user agent of your custom app (e.g., example-subdomain)
       */
      customappDescription: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSquareupDiscriminatedConnectionSettings {
    connector_name: 'squareup';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSquareupDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSquareupDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorStackexchangeDiscriminatedConnectionSettings {
    connector_name: 'stackexchange';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorStackexchangeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorStackexchangeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorStravaDiscriminatedConnectionSettings {
    connector_name: 'strava';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorStravaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorStravaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTeamworkDiscriminatedConnectionSettings {
    connector_name: 'teamwork';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTeamworkDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTeamworkDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTicktickDiscriminatedConnectionSettings {
    connector_name: 'ticktick';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTicktickDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTicktickDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTimelyDiscriminatedConnectionSettings {
    connector_name: 'timely';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTimelyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTimelyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTodoistDiscriminatedConnectionSettings {
    connector_name: 'todoist';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTodoistDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTodoistDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTremendousDiscriminatedConnectionSettings {
    connector_name: 'tremendous';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTremendousDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTremendousDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTsheetsteamDiscriminatedConnectionSettings {
    connector_name: 'tsheetsteam';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTsheetsteamDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTsheetsteamDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTumblrDiscriminatedConnectionSettings {
    connector_name: 'tumblr';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTumblrDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTumblrDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwinfieldDiscriminatedConnectionSettings {
    connector_name: 'twinfield';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwinfieldDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwinfieldDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The cluster to your Twinfield instance (e.g., https://accounting.twinfield.com)
       */
      cluster: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwitchDiscriminatedConnectionSettings {
    connector_name: 'twitch';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwitchDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwitchDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwitterDiscriminatedConnectionSettings {
    connector_name: 'twitter';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwitterDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwitterDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTypeformDiscriminatedConnectionSettings {
    connector_name: 'typeform';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTypeformDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTypeformDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorUberDiscriminatedConnectionSettings {
    connector_name: 'uber';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorUberDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorUberDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorVimeoDiscriminatedConnectionSettings {
    connector_name: 'vimeo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorVimeoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorVimeoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWakatimeDiscriminatedConnectionSettings {
    connector_name: 'wakatime';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWakatimeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWakatimeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWealthboxDiscriminatedConnectionSettings {
    connector_name: 'wealthbox';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWealthboxDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWealthboxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWebflowDiscriminatedConnectionSettings {
    connector_name: 'webflow';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWebflowDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWebflowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWhoopDiscriminatedConnectionSettings {
    connector_name: 'whoop';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWhoopDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWhoopDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWordpressDiscriminatedConnectionSettings {
    connector_name: 'wordpress';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWordpressDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWordpressDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWrikeDiscriminatedConnectionSettings {
    connector_name: 'wrike';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWrikeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWrikeDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain of your Wrike account (e.g., https://example-subdomain)
       */
      host: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorXeroDiscriminatedConnectionSettings {
    connector_name: 'xero';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorXeroDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorXeroDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorYahooDiscriminatedConnectionSettings {
    connector_name: 'yahoo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorYahooDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorYahooDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to the API you want to connect to (e.g.,
       * https://fantasysports.yahooapis.com)
       */
      apiDomain: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorYandexDiscriminatedConnectionSettings {
    connector_name: 'yandex';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorYandexDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorYandexDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZapierDiscriminatedConnectionSettings {
    connector_name: 'zapier';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZapierDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZapierDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZendeskDiscriminatedConnectionSettings {
    connector_name: 'zendesk';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZendeskDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZendeskDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Zendesk account (e.g., https://domain.zendesk.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZenefitsDiscriminatedConnectionSettings {
    connector_name: 'zenefits';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZenefitsDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZenefitsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZohoDeskDiscriminatedConnectionSettings {
    connector_name: 'zoho-desk';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZohoDeskDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZohoDeskDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension of your Zoho account (e.g., https://accounts.zoho.com/)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZohoDiscriminatedConnectionSettings {
    connector_name: 'zoho';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZohoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZohoDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension of your Zoho account (e.g., https://accounts.zoho.com/)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZoomDiscriminatedConnectionSettings {
    connector_name: 'zoom';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorZoomDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorZoomDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAirtableDiscriminatedConnectionSettings {
    connector_name: 'airtable';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorAirtableDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorAirtableDiscriminatedConnectionSettings {
    export interface Settings {
      airtableBase: string;

      apiKey: string;
    }
  }

  export interface ConnectorApolloDiscriminatedConnectionSettings {
    connector_name: 'apollo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorApolloDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorApolloDiscriminatedConnectionSettings {
    export interface Settings {
      api_key: string;
    }
  }

  export interface ConnectorBrexDiscriminatedConnectionSettings {
    connector_name: 'brex';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorBrexDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorBrexDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;
    }
  }

  export interface ConnectorCodaDiscriminatedConnectionSettings {
    connector_name: 'coda';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorCodaDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorCodaDiscriminatedConnectionSettings {
    export interface Settings {
      apiKey: string;
    }
  }

  export interface ConnectorFinchDiscriminatedConnectionSettings {
    connector_name: 'finch';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorFinchDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFinchDiscriminatedConnectionSettings {
    export interface Settings {
      access_token: string;
    }
  }

  export interface ConnectorFirebaseDiscriminatedConnectionSettings {
    connector_name: 'firebase';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?:
      | ConnectorFirebaseDiscriminatedConnectionSettings.UnionMember0
      | ConnectorFirebaseDiscriminatedConnectionSettings.UnionMember1;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorFirebaseDiscriminatedConnectionSettings {
    export interface UnionMember0 {
      role: 'admin';

      serviceAccount: UnionMember0.ServiceAccount;
    }

    export namespace UnionMember0 {
      export interface ServiceAccount {
        project_id: string;

        [k: string]: unknown;
      }
    }

    export interface UnionMember1 {
      authData: UnionMember1.UnionMember0 | UnionMember1.UnionMember1 | UnionMember1.UnionMember2;

      firebaseConfig: UnionMember1.FirebaseConfig;

      role: 'user';
    }

    export namespace UnionMember1 {
      export interface UnionMember0 {
        method: 'userJson';

        userJson: UnionMember0.UserJson;
      }

      export namespace UnionMember0 {
        export interface UserJson {
          appName: string;

          stsTokenManager: { [key: string]: unknown };

          uid: string;

          [k: string]: unknown;
        }
      }

      export interface UnionMember1 {
        customToken: string;

        method: 'customToken';
      }

      export interface UnionMember2 {
        email: string;

        method: 'emailPassword';

        password: string;
      }

      export interface FirebaseConfig {
        apiKey: string;

        appId: string;

        authDomain: string;

        databaseURL: string;

        projectId: string;

        measurementId?: string;

        messagingSenderId?: string;

        storageBucket?: string;
      }
    }
  }

  export interface ConnectorForeceiptDiscriminatedConnectionSettings {
    connector_name: 'foreceipt';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorForeceiptDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorForeceiptDiscriminatedConnectionSettings {
    export interface Settings {
      envName: 'staging' | 'production';

      _id?: unknown;

      credentials?: unknown;
    }
  }

  export interface ConnectorGreenhouseDiscriminatedConnectionSettings {
    connector_name: 'greenhouse';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorGreenhouseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorGreenhouseDiscriminatedConnectionSettings {
    export interface Settings {
      apiKey: string;
    }
  }

  export interface ConnectorHeronDiscriminatedConnectionSettings {
    connector_name: 'heron';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorLunchmoneyDiscriminatedConnectionSettings {
    connector_name: 'lunchmoney';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorMercuryDiscriminatedConnectionSettings {
    connector_name: 'mercury';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorMergeDiscriminatedConnectionSettings {
    connector_name: 'merge';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorMergeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorMergeDiscriminatedConnectionSettings {
    export interface Settings {
      accountToken: string;

      accountDetails?: unknown;
    }
  }

  export interface ConnectorMootaDiscriminatedConnectionSettings {
    connector_name: 'moota';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorOnebrickDiscriminatedConnectionSettings {
    connector_name: 'onebrick';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOnebrickDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOnebrickDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;
    }
  }

  export interface ConnectorOpenledgerDiscriminatedConnectionSettings {
    connector_name: 'openledger';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorOpenledgerDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorOpenledgerDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * Your entity's identifier, aka customer ID
       */
      entity_id: string;
    }
  }

  export interface ConnectorPlaidDiscriminatedConnectionSettings {
    connector_name: 'plaid';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPlaidDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPlaidDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;

      institution?: unknown;

      item?: unknown;

      itemId?: string | null;

      status?: unknown;

      webhookItemError?: null;
    }
  }

  export interface ConnectorPostgresDiscriminatedConnectionSettings {
    connector_name: 'postgres';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorPostgresDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorPostgresDiscriminatedConnectionSettings {
    export interface Settings {
      databaseURL?: string;
    }
  }

  export interface ConnectorRampDiscriminatedConnectionSettings {
    connector_name: 'ramp';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorRampDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorRampDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken?: string | null;

      startAfterTransactionId?: string | null;
    }
  }

  export interface ConnectorSaltedgeDiscriminatedConnectionSettings {
    connector_name: 'saltedge';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: unknown;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export interface ConnectorSharepointOnpremDiscriminatedConnectionSettings {
    connector_name: 'sharepoint-onprem';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSharepointOnpremDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSharepointOnpremDiscriminatedConnectionSettings {
    export interface Settings {
      password: string;

      site_url: string;

      username: string;
    }
  }

  export interface ConnectorSplitwiseDiscriminatedConnectionSettings {
    connector_name: 'splitwise';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorSplitwiseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorSplitwiseDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;

      currentUser?: Settings.CurrentUser | null;
    }

    export namespace Settings {
      export interface CurrentUser {
        id: number;

        country_code: string;

        custom_picture: boolean;

        date_format: string;

        default_currency: string;

        default_group_id: number;

        email: string;

        first_name: string;

        force_refresh_at: string;

        last_name: string;

        locale: string;

        notifications: CurrentUser.Notifications;

        notifications_count: number;

        notifications_read: string;

        picture: CurrentUser.Picture;

        registration_status: string;
      }

      export namespace CurrentUser {
        export interface Notifications {
          added_as_friend: boolean;

          added_to_group: boolean;

          announcements: boolean;

          bills: boolean;

          expense_added: boolean;

          expense_updated: boolean;

          monthly_summary: boolean;

          payments: boolean;
        }

        export interface Picture {
          large?: string | null;

          medium?: string | null;

          original?: string | null;

          small?: string | null;

          xlarge?: string | null;

          xxlarge?: string | null;
        }
      }
    }
  }

  export interface ConnectorStripeDiscriminatedConnectionSettings {
    connector_name: 'stripe';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorStripeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorStripeDiscriminatedConnectionSettings {
    export interface Settings {
      secretKey: string;
    }
  }

  export interface ConnectorTellerDiscriminatedConnectionSettings {
    connector_name: 'teller';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTellerDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTellerDiscriminatedConnectionSettings {
    export interface Settings {
      token: string;
    }
  }

  export interface ConnectorTogglDiscriminatedConnectionSettings {
    connector_name: 'toggl';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTogglDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTogglDiscriminatedConnectionSettings {
    export interface Settings {
      apiToken: string;

      email?: string | null;

      password?: string | null;
    }
  }

  export interface ConnectorTwentyDiscriminatedConnectionSettings {
    connector_name: 'twenty';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorTwentyDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorTwentyDiscriminatedConnectionSettings {
    export interface Settings {
      access_token: string;
    }
  }

  export interface ConnectorVenmoDiscriminatedConnectionSettings {
    connector_name: 'venmo';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorVenmoDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorVenmoDiscriminatedConnectionSettings {
    export interface Settings {
      credentials?: unknown;

      me?: unknown;
    }
  }

  export interface ConnectorWiseDiscriminatedConnectionSettings {
    connector_name: 'wise';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorWiseDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorWiseDiscriminatedConnectionSettings {
    export interface Settings {
      envName: 'sandbox' | 'live';

      apiToken?: string | null;
    }
  }

  export interface ConnectorYodleeDiscriminatedConnectionSettings {
    connector_name: 'yodlee';

    id?: string;

    connector?: TopLevelAPI.Connector;

    connector_config_id?: string | null;

    created_at?: string;

    customer_id?: string | null;

    disabled?: boolean | null;

    display_name?: string | null;

    integration?: TopLevelAPI.Integration;

    integration_id?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    settings?: ConnectorYodleeDiscriminatedConnectionSettings.Settings;

    status?: 'healthy' | 'disconnected' | 'error' | 'manual' | 'unknown' | null;

    status_message?: string | null;

    updated_at?: string;
  }

  export namespace ConnectorYodleeDiscriminatedConnectionSettings {
    export interface Settings {
      loginName: string;

      providerAccountId: number | string;

      accessToken?: Settings.AccessToken | null;

      provider?: null;

      providerAccount?: Settings.ProviderAccount | null;

      user?: null;
    }

    export namespace Settings {
      export interface AccessToken {
        accessToken: string;

        expiresIn: number;

        issuedAt: string;
      }

      export interface ProviderAccount {
        id: number;

        aggregationSource: string;

        createdDate: string;

        dataset: Array<unknown>;

        isManual: boolean;

        providerId: number;

        status:
          | 'LOGIN_IN_PROGRESS'
          | 'USER_INPUT_REQUIRED'
          | 'IN_PROGRESS'
          | 'PARTIAL_SUCCESS'
          | 'SUCCESS'
          | 'FAILED';

        isDeleted?: boolean | null;
      }
    }
  }
}

export interface ListConnectorsResponse extends Connector {
  integrations?: Array<Integration>;
}

export type ListConnnectorConfigsResponse =
  | ListConnnectorConfigsResponse.ConnectorAcceloDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAcmeApikeyDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAcmeOauth2DiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAdobeDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAdyenDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAircallDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAmazonDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorApaleoDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAsanaDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAttioDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAuth0DiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAutodeskDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAwsDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorBamboohrDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorBasecampDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorBattlenetDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorBigcommerceDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorBitbucketDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorBitlyDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorBlackbaudDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorBoldsignDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorBoxDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorBraintreeDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorCalendlyDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorClickupDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorCloseDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorConfluenceDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorContentfulDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorContentstackDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorCopperDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorCorosDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorDatevDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorDeelDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorDialpadDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorDigitaloceanDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorDiscordDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorDocusignDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorDropboxDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorEbayDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorEgnyteDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorEnvoyDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorEventbriteDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorExistDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorFacebookDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorFactorialDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorFigmaDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorFitbitDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorFortnoxDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorFreshbooksDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorFrontDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGitHubDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGitlabDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGongDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGoogleCalendarDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGoogleDocsDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGoogleDriveDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGoogleMailDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGoogleSheetDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGorgiasDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGrainDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGumroadDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGustoDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorHarvestDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorHighlevelDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorHubspotDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorInstagramDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorIntercomDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorJiraDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorKeapDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorLeverDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorLinearDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorLinkedinDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorLinkhutDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorMailchimpDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorMiroDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorMondayDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorMuralDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorNamelyDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorNationbuilderDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorNetsuiteDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorNotionDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorOdooDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorOktaDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorOsuDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorOuraDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorOutreachDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorPagerdutyDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorPandadocDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorPayfitDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorPaypalDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorPennylaneDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorPinterestDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorPipedriveDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorPodiumDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorProductboardDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorQualtricsDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorQuickbooksDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorRedditDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSageDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSalesforceDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSalesloftDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSegmentDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorServicem8DiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorServicenowDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSharepointDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorShopifyDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSignnowDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSlackDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSmartsheetDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSnowflakeDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSpotifyDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSquarespaceDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSquareupDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorStackexchangeDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorStravaDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTeamworkDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTicktickDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTimelyDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTodoistDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTremendousDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTsheetsteamDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTumblrDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTwinfieldDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTwitchDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTwitterDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTypeformDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorUberDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorVimeoDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorWakatimeDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorWealthboxDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorWebflowDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorWhoopDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorWordpressDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorWrikeDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorXeroDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorYahooDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorYandexDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorZapierDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorZendeskDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorZenefitsDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorZohoDeskDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorZohoDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorZoomDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorAirtableDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorApolloDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorBrexDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorCodaDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorFinchDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorFirebaseDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorForeceiptDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorGreenhouseDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorHeronDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorLunchmoneyDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorMercuryDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorMergeDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorMootaDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorOnebrickDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorOpenledgerDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorPlaidDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorPostgresDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorRampDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSaltedgeDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSharepointOnpremDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorSplitwiseDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorStripeDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTellerDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTogglDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorTwentyDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorVenmoDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorWiseDiscriminatedConnectorConfig
  | ListConnnectorConfigsResponse.ConnectorYodleeDiscriminatedConnectorConfig;

export namespace ListConnnectorConfigsResponse {
  export interface ConnectorAcceloDiscriminatedConnectorConfig {
    config: ConnectorAcceloDiscriminatedConnectorConfig.Config;

    connector_name: 'accelo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAcceloDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAcmeApikeyDiscriminatedConnectorConfig {
    /**
     * Base configuration for api key connector
     */
    config: unknown;

    connector_name: 'acme-apikey';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorAcmeOauth2DiscriminatedConnectorConfig {
    config: ConnectorAcmeOauth2DiscriminatedConnectorConfig.Config;

    connector_name: 'acme-oauth2';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAcmeOauth2DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAdobeDiscriminatedConnectorConfig {
    config: ConnectorAdobeDiscriminatedConnectorConfig.Config;

    connector_name: 'adobe';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAdobeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAdyenDiscriminatedConnectorConfig {
    config: ConnectorAdyenDiscriminatedConnectorConfig.Config;

    connector_name: 'adyen';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAdyenDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAircallDiscriminatedConnectorConfig {
    config: ConnectorAircallDiscriminatedConnectorConfig.Config;

    connector_name: 'aircall';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAircallDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAmazonDiscriminatedConnectorConfig {
    config: ConnectorAmazonDiscriminatedConnectorConfig.Config;

    connector_name: 'amazon';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAmazonDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorApaleoDiscriminatedConnectorConfig {
    config: ConnectorApaleoDiscriminatedConnectorConfig.Config;

    connector_name: 'apaleo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorApaleoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAsanaDiscriminatedConnectorConfig {
    config: ConnectorAsanaDiscriminatedConnectorConfig.Config;

    connector_name: 'asana';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAsanaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAttioDiscriminatedConnectorConfig {
    config: ConnectorAttioDiscriminatedConnectorConfig.Config;

    connector_name: 'attio';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAttioDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAuth0DiscriminatedConnectorConfig {
    config: ConnectorAuth0DiscriminatedConnectorConfig.Config;

    connector_name: 'auth0';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAuth0DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAutodeskDiscriminatedConnectorConfig {
    config: ConnectorAutodeskDiscriminatedConnectorConfig.Config;

    connector_name: 'autodesk';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAutodeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAwsDiscriminatedConnectorConfig {
    config: ConnectorAwsDiscriminatedConnectorConfig.Config;

    connector_name: 'aws';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAwsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBamboohrDiscriminatedConnectorConfig {
    config: ConnectorBamboohrDiscriminatedConnectorConfig.Config;

    connector_name: 'bamboohr';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBamboohrDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBasecampDiscriminatedConnectorConfig {
    config: ConnectorBasecampDiscriminatedConnectorConfig.Config;

    connector_name: 'basecamp';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBasecampDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBattlenetDiscriminatedConnectorConfig {
    config: ConnectorBattlenetDiscriminatedConnectorConfig.Config;

    connector_name: 'battlenet';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBattlenetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBigcommerceDiscriminatedConnectorConfig {
    config: ConnectorBigcommerceDiscriminatedConnectorConfig.Config;

    connector_name: 'bigcommerce';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBigcommerceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBitbucketDiscriminatedConnectorConfig {
    config: ConnectorBitbucketDiscriminatedConnectorConfig.Config;

    connector_name: 'bitbucket';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBitbucketDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBitlyDiscriminatedConnectorConfig {
    config: ConnectorBitlyDiscriminatedConnectorConfig.Config;

    connector_name: 'bitly';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBitlyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBlackbaudDiscriminatedConnectorConfig {
    config: ConnectorBlackbaudDiscriminatedConnectorConfig.Config;

    connector_name: 'blackbaud';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBlackbaudDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBoldsignDiscriminatedConnectorConfig {
    config: ConnectorBoldsignDiscriminatedConnectorConfig.Config;

    connector_name: 'boldsign';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBoldsignDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBoxDiscriminatedConnectorConfig {
    config: ConnectorBoxDiscriminatedConnectorConfig.Config;

    connector_name: 'box';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBoxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBraintreeDiscriminatedConnectorConfig {
    config: ConnectorBraintreeDiscriminatedConnectorConfig.Config;

    connector_name: 'braintree';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBraintreeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCalendlyDiscriminatedConnectorConfig {
    config: ConnectorCalendlyDiscriminatedConnectorConfig.Config;

    connector_name: 'calendly';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCalendlyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorClickupDiscriminatedConnectorConfig {
    config: ConnectorClickupDiscriminatedConnectorConfig.Config;

    connector_name: 'clickup';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorClickupDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCloseDiscriminatedConnectorConfig {
    config: ConnectorCloseDiscriminatedConnectorConfig.Config;

    connector_name: 'close';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCloseDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorConfluenceDiscriminatedConnectorConfig {
    config: ConnectorConfluenceDiscriminatedConnectorConfig.Config;

    connector_name: 'confluence';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorConfluenceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorContentfulDiscriminatedConnectorConfig {
    config: ConnectorContentfulDiscriminatedConnectorConfig.Config;

    connector_name: 'contentful';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorContentfulDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorContentstackDiscriminatedConnectorConfig {
    config: ConnectorContentstackDiscriminatedConnectorConfig.Config;

    connector_name: 'contentstack';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorContentstackDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCopperDiscriminatedConnectorConfig {
    config: ConnectorCopperDiscriminatedConnectorConfig.Config;

    connector_name: 'copper';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCopperDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCorosDiscriminatedConnectorConfig {
    config: ConnectorCorosDiscriminatedConnectorConfig.Config;

    connector_name: 'coros';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCorosDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDatevDiscriminatedConnectorConfig {
    config: ConnectorDatevDiscriminatedConnectorConfig.Config;

    connector_name: 'datev';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDatevDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDeelDiscriminatedConnectorConfig {
    config: ConnectorDeelDiscriminatedConnectorConfig.Config;

    connector_name: 'deel';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDeelDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDialpadDiscriminatedConnectorConfig {
    config: ConnectorDialpadDiscriminatedConnectorConfig.Config;

    connector_name: 'dialpad';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDialpadDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDigitaloceanDiscriminatedConnectorConfig {
    config: ConnectorDigitaloceanDiscriminatedConnectorConfig.Config;

    connector_name: 'digitalocean';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDigitaloceanDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDiscordDiscriminatedConnectorConfig {
    config: ConnectorDiscordDiscriminatedConnectorConfig.Config;

    connector_name: 'discord';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDiscordDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDocusignDiscriminatedConnectorConfig {
    config: ConnectorDocusignDiscriminatedConnectorConfig.Config;

    connector_name: 'docusign';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDocusignDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDropboxDiscriminatedConnectorConfig {
    config: ConnectorDropboxDiscriminatedConnectorConfig.Config;

    connector_name: 'dropbox';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDropboxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEbayDiscriminatedConnectorConfig {
    config: ConnectorEbayDiscriminatedConnectorConfig.Config;

    connector_name: 'ebay';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEbayDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEgnyteDiscriminatedConnectorConfig {
    config: ConnectorEgnyteDiscriminatedConnectorConfig.Config;

    connector_name: 'egnyte';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEgnyteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEnvoyDiscriminatedConnectorConfig {
    config: ConnectorEnvoyDiscriminatedConnectorConfig.Config;

    connector_name: 'envoy';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEnvoyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEventbriteDiscriminatedConnectorConfig {
    config: ConnectorEventbriteDiscriminatedConnectorConfig.Config;

    connector_name: 'eventbrite';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEventbriteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorExistDiscriminatedConnectorConfig {
    config: ConnectorExistDiscriminatedConnectorConfig.Config;

    connector_name: 'exist';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorExistDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFacebookDiscriminatedConnectorConfig {
    config: ConnectorFacebookDiscriminatedConnectorConfig.Config;

    connector_name: 'facebook';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFacebookDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFactorialDiscriminatedConnectorConfig {
    config: ConnectorFactorialDiscriminatedConnectorConfig.Config;

    connector_name: 'factorial';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFactorialDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFigmaDiscriminatedConnectorConfig {
    config: ConnectorFigmaDiscriminatedConnectorConfig.Config;

    connector_name: 'figma';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFigmaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFitbitDiscriminatedConnectorConfig {
    config: ConnectorFitbitDiscriminatedConnectorConfig.Config;

    connector_name: 'fitbit';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFitbitDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFortnoxDiscriminatedConnectorConfig {
    config: ConnectorFortnoxDiscriminatedConnectorConfig.Config;

    connector_name: 'fortnox';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFortnoxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFreshbooksDiscriminatedConnectorConfig {
    config: ConnectorFreshbooksDiscriminatedConnectorConfig.Config;

    connector_name: 'freshbooks';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFreshbooksDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFrontDiscriminatedConnectorConfig {
    config: ConnectorFrontDiscriminatedConnectorConfig.Config;

    connector_name: 'front';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFrontDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGitHubDiscriminatedConnectorConfig {
    config: ConnectorGitHubDiscriminatedConnectorConfig.Config;

    connector_name: 'github';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGitHubDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGitlabDiscriminatedConnectorConfig {
    config: ConnectorGitlabDiscriminatedConnectorConfig.Config;

    connector_name: 'gitlab';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGitlabDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGongDiscriminatedConnectorConfig {
    config: ConnectorGongDiscriminatedConnectorConfig.Config;

    connector_name: 'gong';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGongDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleCalendarDiscriminatedConnectorConfig {
    config: ConnectorGoogleCalendarDiscriminatedConnectorConfig.Config;

    connector_name: 'google-calendar';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleCalendarDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleDocsDiscriminatedConnectorConfig {
    config: ConnectorGoogleDocsDiscriminatedConnectorConfig.Config;

    connector_name: 'google-docs';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDocsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleDriveDiscriminatedConnectorConfig {
    config: ConnectorGoogleDriveDiscriminatedConnectorConfig.Config;

    connector_name: 'google-drive';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDriveDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleMailDiscriminatedConnectorConfig {
    config: ConnectorGoogleMailDiscriminatedConnectorConfig.Config;

    connector_name: 'google-mail';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleMailDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleSheetDiscriminatedConnectorConfig {
    config: ConnectorGoogleSheetDiscriminatedConnectorConfig.Config;

    connector_name: 'google-sheet';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleSheetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGorgiasDiscriminatedConnectorConfig {
    config: ConnectorGorgiasDiscriminatedConnectorConfig.Config;

    connector_name: 'gorgias';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGorgiasDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGrainDiscriminatedConnectorConfig {
    config: ConnectorGrainDiscriminatedConnectorConfig.Config;

    connector_name: 'grain';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGrainDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGumroadDiscriminatedConnectorConfig {
    config: ConnectorGumroadDiscriminatedConnectorConfig.Config;

    connector_name: 'gumroad';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGumroadDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGustoDiscriminatedConnectorConfig {
    config: ConnectorGustoDiscriminatedConnectorConfig.Config;

    connector_name: 'gusto';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGustoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHarvestDiscriminatedConnectorConfig {
    config: ConnectorHarvestDiscriminatedConnectorConfig.Config;

    connector_name: 'harvest';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHarvestDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHighlevelDiscriminatedConnectorConfig {
    config: ConnectorHighlevelDiscriminatedConnectorConfig.Config;

    connector_name: 'highlevel';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHighlevelDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHubspotDiscriminatedConnectorConfig {
    config: ConnectorHubspotDiscriminatedConnectorConfig.Config;

    connector_name: 'hubspot';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHubspotDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorInstagramDiscriminatedConnectorConfig {
    config: ConnectorInstagramDiscriminatedConnectorConfig.Config;

    connector_name: 'instagram';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorInstagramDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorIntercomDiscriminatedConnectorConfig {
    config: ConnectorIntercomDiscriminatedConnectorConfig.Config;

    connector_name: 'intercom';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorIntercomDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorJiraDiscriminatedConnectorConfig {
    config: ConnectorJiraDiscriminatedConnectorConfig.Config;

    connector_name: 'jira';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorJiraDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorKeapDiscriminatedConnectorConfig {
    config: ConnectorKeapDiscriminatedConnectorConfig.Config;

    connector_name: 'keap';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorKeapDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLeverDiscriminatedConnectorConfig {
    config: ConnectorLeverDiscriminatedConnectorConfig.Config;

    connector_name: 'lever';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLeverDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinearDiscriminatedConnectorConfig {
    config: ConnectorLinearDiscriminatedConnectorConfig.Config;

    connector_name: 'linear';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinearDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinkedinDiscriminatedConnectorConfig {
    config: ConnectorLinkedinDiscriminatedConnectorConfig.Config;

    connector_name: 'linkedin';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinkedinDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinkhutDiscriminatedConnectorConfig {
    config: ConnectorLinkhutDiscriminatedConnectorConfig.Config;

    connector_name: 'linkhut';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinkhutDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMailchimpDiscriminatedConnectorConfig {
    config: ConnectorMailchimpDiscriminatedConnectorConfig.Config;

    connector_name: 'mailchimp';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMailchimpDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMiroDiscriminatedConnectorConfig {
    config: ConnectorMiroDiscriminatedConnectorConfig.Config;

    connector_name: 'miro';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMiroDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMondayDiscriminatedConnectorConfig {
    config: ConnectorMondayDiscriminatedConnectorConfig.Config;

    connector_name: 'monday';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMondayDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMuralDiscriminatedConnectorConfig {
    config: ConnectorMuralDiscriminatedConnectorConfig.Config;

    connector_name: 'mural';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMuralDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNamelyDiscriminatedConnectorConfig {
    config: ConnectorNamelyDiscriminatedConnectorConfig.Config;

    connector_name: 'namely';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNamelyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNationbuilderDiscriminatedConnectorConfig {
    config: ConnectorNationbuilderDiscriminatedConnectorConfig.Config;

    connector_name: 'nationbuilder';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNationbuilderDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNetsuiteDiscriminatedConnectorConfig {
    config: ConnectorNetsuiteDiscriminatedConnectorConfig.Config;

    connector_name: 'netsuite';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNetsuiteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNotionDiscriminatedConnectorConfig {
    config: ConnectorNotionDiscriminatedConnectorConfig.Config;

    connector_name: 'notion';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNotionDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOdooDiscriminatedConnectorConfig {
    config: ConnectorOdooDiscriminatedConnectorConfig.Config;

    connector_name: 'odoo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOdooDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOktaDiscriminatedConnectorConfig {
    config: ConnectorOktaDiscriminatedConnectorConfig.Config;

    connector_name: 'okta';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOktaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOsuDiscriminatedConnectorConfig {
    config: ConnectorOsuDiscriminatedConnectorConfig.Config;

    connector_name: 'osu';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOsuDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOuraDiscriminatedConnectorConfig {
    config: ConnectorOuraDiscriminatedConnectorConfig.Config;

    connector_name: 'oura';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOuraDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOutreachDiscriminatedConnectorConfig {
    config: ConnectorOutreachDiscriminatedConnectorConfig.Config;

    connector_name: 'outreach';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOutreachDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPagerdutyDiscriminatedConnectorConfig {
    config: ConnectorPagerdutyDiscriminatedConnectorConfig.Config;

    connector_name: 'pagerduty';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPagerdutyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPandadocDiscriminatedConnectorConfig {
    config: ConnectorPandadocDiscriminatedConnectorConfig.Config;

    connector_name: 'pandadoc';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPandadocDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPayfitDiscriminatedConnectorConfig {
    config: ConnectorPayfitDiscriminatedConnectorConfig.Config;

    connector_name: 'payfit';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPayfitDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPaypalDiscriminatedConnectorConfig {
    config: ConnectorPaypalDiscriminatedConnectorConfig.Config;

    connector_name: 'paypal';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPaypalDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPennylaneDiscriminatedConnectorConfig {
    config: ConnectorPennylaneDiscriminatedConnectorConfig.Config;

    connector_name: 'pennylane';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPennylaneDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPinterestDiscriminatedConnectorConfig {
    config: ConnectorPinterestDiscriminatedConnectorConfig.Config;

    connector_name: 'pinterest';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPinterestDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPipedriveDiscriminatedConnectorConfig {
    config: ConnectorPipedriveDiscriminatedConnectorConfig.Config;

    connector_name: 'pipedrive';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPipedriveDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPodiumDiscriminatedConnectorConfig {
    config: ConnectorPodiumDiscriminatedConnectorConfig.Config;

    connector_name: 'podium';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPodiumDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorProductboardDiscriminatedConnectorConfig {
    config: ConnectorProductboardDiscriminatedConnectorConfig.Config;

    connector_name: 'productboard';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorProductboardDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorQualtricsDiscriminatedConnectorConfig {
    config: ConnectorQualtricsDiscriminatedConnectorConfig.Config;

    connector_name: 'qualtrics';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorQualtricsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorQuickbooksDiscriminatedConnectorConfig {
    config: ConnectorQuickbooksDiscriminatedConnectorConfig.Config;

    connector_name: 'quickbooks';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorQuickbooksDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorRedditDiscriminatedConnectorConfig {
    config: ConnectorRedditDiscriminatedConnectorConfig.Config;

    connector_name: 'reddit';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorRedditDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSageDiscriminatedConnectorConfig {
    config: ConnectorSageDiscriminatedConnectorConfig.Config;

    connector_name: 'sage';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSageDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSalesforceDiscriminatedConnectorConfig {
    config: ConnectorSalesforceDiscriminatedConnectorConfig.Config;

    connector_name: 'salesforce';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSalesforceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSalesloftDiscriminatedConnectorConfig {
    config: ConnectorSalesloftDiscriminatedConnectorConfig.Config;

    connector_name: 'salesloft';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSalesloftDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSegmentDiscriminatedConnectorConfig {
    config: ConnectorSegmentDiscriminatedConnectorConfig.Config;

    connector_name: 'segment';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSegmentDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorServicem8DiscriminatedConnectorConfig {
    config: ConnectorServicem8DiscriminatedConnectorConfig.Config;

    connector_name: 'servicem8';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorServicem8DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorServicenowDiscriminatedConnectorConfig {
    config: ConnectorServicenowDiscriminatedConnectorConfig.Config;

    connector_name: 'servicenow';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorServicenowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSharepointDiscriminatedConnectorConfig {
    config: ConnectorSharepointDiscriminatedConnectorConfig.Config;

    connector_name: 'sharepoint';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSharepointDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorShopifyDiscriminatedConnectorConfig {
    config: ConnectorShopifyDiscriminatedConnectorConfig.Config;

    connector_name: 'shopify';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorShopifyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSignnowDiscriminatedConnectorConfig {
    config: ConnectorSignnowDiscriminatedConnectorConfig.Config;

    connector_name: 'signnow';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSignnowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSlackDiscriminatedConnectorConfig {
    config: ConnectorSlackDiscriminatedConnectorConfig.Config;

    connector_name: 'slack';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSlackDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSmartsheetDiscriminatedConnectorConfig {
    config: ConnectorSmartsheetDiscriminatedConnectorConfig.Config;

    connector_name: 'smartsheet';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSmartsheetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSnowflakeDiscriminatedConnectorConfig {
    config: ConnectorSnowflakeDiscriminatedConnectorConfig.Config;

    connector_name: 'snowflake';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSnowflakeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSpotifyDiscriminatedConnectorConfig {
    config: ConnectorSpotifyDiscriminatedConnectorConfig.Config;

    connector_name: 'spotify';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSpotifyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSquarespaceDiscriminatedConnectorConfig {
    config: ConnectorSquarespaceDiscriminatedConnectorConfig.Config;

    connector_name: 'squarespace';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSquarespaceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSquareupDiscriminatedConnectorConfig {
    config: ConnectorSquareupDiscriminatedConnectorConfig.Config;

    connector_name: 'squareup';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSquareupDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorStackexchangeDiscriminatedConnectorConfig {
    config: ConnectorStackexchangeDiscriminatedConnectorConfig.Config;

    connector_name: 'stackexchange';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStackexchangeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorStravaDiscriminatedConnectorConfig {
    config: ConnectorStravaDiscriminatedConnectorConfig.Config;

    connector_name: 'strava';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStravaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTeamworkDiscriminatedConnectorConfig {
    config: ConnectorTeamworkDiscriminatedConnectorConfig.Config;

    connector_name: 'teamwork';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTeamworkDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTicktickDiscriminatedConnectorConfig {
    config: ConnectorTicktickDiscriminatedConnectorConfig.Config;

    connector_name: 'ticktick';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTicktickDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTimelyDiscriminatedConnectorConfig {
    config: ConnectorTimelyDiscriminatedConnectorConfig.Config;

    connector_name: 'timely';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTimelyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTodoistDiscriminatedConnectorConfig {
    config: ConnectorTodoistDiscriminatedConnectorConfig.Config;

    connector_name: 'todoist';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTodoistDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTremendousDiscriminatedConnectorConfig {
    config: ConnectorTremendousDiscriminatedConnectorConfig.Config;

    connector_name: 'tremendous';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTremendousDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTsheetsteamDiscriminatedConnectorConfig {
    config: ConnectorTsheetsteamDiscriminatedConnectorConfig.Config;

    connector_name: 'tsheetsteam';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTsheetsteamDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTumblrDiscriminatedConnectorConfig {
    config: ConnectorTumblrDiscriminatedConnectorConfig.Config;

    connector_name: 'tumblr';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTumblrDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwinfieldDiscriminatedConnectorConfig {
    config: ConnectorTwinfieldDiscriminatedConnectorConfig.Config;

    connector_name: 'twinfield';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwinfieldDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwitchDiscriminatedConnectorConfig {
    config: ConnectorTwitchDiscriminatedConnectorConfig.Config;

    connector_name: 'twitch';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwitchDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwitterDiscriminatedConnectorConfig {
    config: ConnectorTwitterDiscriminatedConnectorConfig.Config;

    connector_name: 'twitter';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwitterDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTypeformDiscriminatedConnectorConfig {
    config: ConnectorTypeformDiscriminatedConnectorConfig.Config;

    connector_name: 'typeform';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTypeformDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorUberDiscriminatedConnectorConfig {
    config: ConnectorUberDiscriminatedConnectorConfig.Config;

    connector_name: 'uber';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorUberDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorVimeoDiscriminatedConnectorConfig {
    config: ConnectorVimeoDiscriminatedConnectorConfig.Config;

    connector_name: 'vimeo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorVimeoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWakatimeDiscriminatedConnectorConfig {
    config: ConnectorWakatimeDiscriminatedConnectorConfig.Config;

    connector_name: 'wakatime';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWakatimeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWealthboxDiscriminatedConnectorConfig {
    config: ConnectorWealthboxDiscriminatedConnectorConfig.Config;

    connector_name: 'wealthbox';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWealthboxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWebflowDiscriminatedConnectorConfig {
    config: ConnectorWebflowDiscriminatedConnectorConfig.Config;

    connector_name: 'webflow';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWebflowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWhoopDiscriminatedConnectorConfig {
    config: ConnectorWhoopDiscriminatedConnectorConfig.Config;

    connector_name: 'whoop';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWhoopDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWordpressDiscriminatedConnectorConfig {
    config: ConnectorWordpressDiscriminatedConnectorConfig.Config;

    connector_name: 'wordpress';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWordpressDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWrikeDiscriminatedConnectorConfig {
    config: ConnectorWrikeDiscriminatedConnectorConfig.Config;

    connector_name: 'wrike';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWrikeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorXeroDiscriminatedConnectorConfig {
    config: ConnectorXeroDiscriminatedConnectorConfig.Config;

    connector_name: 'xero';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorXeroDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorYahooDiscriminatedConnectorConfig {
    config: ConnectorYahooDiscriminatedConnectorConfig.Config;

    connector_name: 'yahoo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYahooDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorYandexDiscriminatedConnectorConfig {
    config: ConnectorYandexDiscriminatedConnectorConfig.Config;

    connector_name: 'yandex';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYandexDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZapierDiscriminatedConnectorConfig {
    config: ConnectorZapierDiscriminatedConnectorConfig.Config;

    connector_name: 'zapier';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZapierDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZendeskDiscriminatedConnectorConfig {
    config: ConnectorZendeskDiscriminatedConnectorConfig.Config;

    connector_name: 'zendesk';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZendeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZenefitsDiscriminatedConnectorConfig {
    config: ConnectorZenefitsDiscriminatedConnectorConfig.Config;

    connector_name: 'zenefits';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZenefitsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZohoDeskDiscriminatedConnectorConfig {
    config: ConnectorZohoDeskDiscriminatedConnectorConfig.Config;

    connector_name: 'zoho-desk';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZohoDeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZohoDiscriminatedConnectorConfig {
    config: ConnectorZohoDiscriminatedConnectorConfig.Config;

    connector_name: 'zoho';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZohoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZoomDiscriminatedConnectorConfig {
    config: ConnectorZoomDiscriminatedConnectorConfig.Config;

    connector_name: 'zoom';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZoomDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAirtableDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'airtable';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorApolloDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'apollo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorBrexDiscriminatedConnectorConfig {
    config: ConnectorBrexDiscriminatedConnectorConfig.Config;

    connector_name: 'brex';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBrexDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorCodaDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'coda';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorFinchDiscriminatedConnectorConfig {
    config: ConnectorFinchDiscriminatedConnectorConfig.Config;

    connector_name: 'finch';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFinchDiscriminatedConnectorConfig {
    export interface Config {
      client_id: string;

      client_secret: string;

      /**
       * Finch products to access, @see
       * https://developer.tryfinch.com/api-reference/development-guides/Permissions
       */
      products: Array<
        | 'company'
        | 'directory'
        | 'individual'
        | 'ssn'
        | 'employment'
        | 'payment'
        | 'pay_statement'
        | 'benefits'
      >;

      /**
       * Finch API version
       */
      api_version?: string;
    }
  }

  export interface ConnectorFirebaseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'firebase';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorForeceiptDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'foreceipt';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorGreenhouseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'greenhouse';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorHeronDiscriminatedConnectorConfig {
    config: ConnectorHeronDiscriminatedConnectorConfig.Config;

    connector_name: 'heron';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHeronDiscriminatedConnectorConfig {
    export interface Config {
      apiKey: string;
    }
  }

  export interface ConnectorLunchmoneyDiscriminatedConnectorConfig {
    config: ConnectorLunchmoneyDiscriminatedConnectorConfig.Config;

    connector_name: 'lunchmoney';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLunchmoneyDiscriminatedConnectorConfig {
    export interface Config {
      accessToken: string;
    }
  }

  export interface ConnectorMercuryDiscriminatedConnectorConfig {
    config: ConnectorMercuryDiscriminatedConnectorConfig.Config;

    connector_name: 'mercury';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMercuryDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorMergeDiscriminatedConnectorConfig {
    config: ConnectorMergeDiscriminatedConnectorConfig.Config;

    connector_name: 'merge';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMergeDiscriminatedConnectorConfig {
    export interface Config {
      apiKey: string;
    }
  }

  export interface ConnectorMootaDiscriminatedConnectorConfig {
    config: ConnectorMootaDiscriminatedConnectorConfig.Config;

    connector_name: 'moota';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMootaDiscriminatedConnectorConfig {
    export interface Config {
      token: string;
    }
  }

  export interface ConnectorOnebrickDiscriminatedConnectorConfig {
    config: ConnectorOnebrickDiscriminatedConnectorConfig.Config;

    connector_name: 'onebrick';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOnebrickDiscriminatedConnectorConfig {
    export interface Config {
      clientId: string;

      clientSecret: string;

      envName: 'sandbox' | 'production';

      publicToken: string;

      accessToken?: string | null;

      redirectUrl?: string | null;
    }
  }

  export interface ConnectorOpenledgerDiscriminatedConnectorConfig {
    config: ConnectorOpenledgerDiscriminatedConnectorConfig.Config;

    connector_name: 'openledger';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOpenledgerDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API endpoint
       */
      api_url: string;

      /**
       * Your developer ID for authentication
       */
      developer_id: string;

      /**
       * Your developer secret
       */
      developer_secret: string;

      /**
       * Switch to "production" for live data
       */
      environment: 'development' | 'production';
    }
  }

  export interface ConnectorPlaidDiscriminatedConnectorConfig {
    config: ConnectorPlaidDiscriminatedConnectorConfig.Config;

    connector_name: 'plaid';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPlaidDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * The name of your application, as it should be displayed in Link. Maximum length
       * of 30 characters. If a value longer than 30 characters is provided, Link will
       * display "This Application" instead.
       */
      clientName: string;

      countryCodes: Array<
        | 'US'
        | 'GB'
        | 'ES'
        | 'NL'
        | 'FR'
        | 'IE'
        | 'CA'
        | 'DE'
        | 'IT'
        | 'PL'
        | 'DK'
        | 'NO'
        | 'SE'
        | 'EE'
        | 'LT'
        | 'LV'
      >;

      envName: 'sandbox' | 'development' | 'production';

      language: 'en' | 'fr' | 'es' | 'nl' | 'de';

      products: Array<
        | 'assets'
        | 'auth'
        | 'balance'
        | 'identity'
        | 'investments'
        | 'liabilities'
        | 'payment_initiation'
        | 'identity_verification'
        | 'transactions'
        | 'credit_details'
        | 'income'
        | 'income_verification'
        | 'deposit_switch'
        | 'standing_orders'
        | 'transfer'
        | 'employment'
        | 'recurring_transactions'
      >;

      credentials?: Config.Credentials | null;
    }

    export namespace Config {
      export interface Credentials {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorPostgresDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'postgres';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorRampDiscriminatedConnectorConfig {
    config: ConnectorRampDiscriminatedConnectorConfig.Config;

    connector_name: 'ramp';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorRampDiscriminatedConnectorConfig {
    export interface Config {
      oauth: Config.OAuth;
    }

    export namespace Config {
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorSaltedgeDiscriminatedConnectorConfig {
    config: ConnectorSaltedgeDiscriminatedConnectorConfig.Config;

    connector_name: 'saltedge';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSaltedgeDiscriminatedConnectorConfig {
    export interface Config {
      appId: string;

      secret: string;

      url?: string | null;
    }
  }

  export interface ConnectorSharepointOnpremDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'sharepoint-onprem';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorSplitwiseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'splitwise';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorStripeDiscriminatedConnectorConfig {
    config: ConnectorStripeDiscriminatedConnectorConfig.Config;

    connector_name: 'stripe';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStripeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorTellerDiscriminatedConnectorConfig {
    config: ConnectorTellerDiscriminatedConnectorConfig.Config;

    connector_name: 'teller';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTellerDiscriminatedConnectorConfig {
    export interface Config {
      applicationId: string;

      token?: string | null;
    }
  }

  export interface ConnectorTogglDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'toggl';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorTwentyDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'twenty';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorVenmoDiscriminatedConnectorConfig {
    config: ConnectorVenmoDiscriminatedConnectorConfig.Config;

    connector_name: 'venmo';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorVenmoDiscriminatedConnectorConfig {
    export interface Config {
      proxy?: Config.Proxy | null;

      v1BaseURL?: string | null;

      v5BaseURL?: string | null;
    }

    export namespace Config {
      export interface Proxy {
        cert: string;

        url: string;
      }
    }
  }

  export interface ConnectorWiseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'wise';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorYodleeDiscriminatedConnectorConfig {
    config: ConnectorYodleeDiscriminatedConnectorConfig.Config;

    connector_name: 'yodlee';

    id?: string;

    connection_count?: number;

    connector?: TopLevelAPI.Connector;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    integrations?: { [key: string]: TopLevelAPI.Integration };

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYodleeDiscriminatedConnectorConfig {
    export interface Config {
      adminLoginName: string;

      clientId: string;

      clientSecret: string;

      envName: 'sandbox' | 'development' | 'production';

      proxy?: Config.Proxy | null;

      sandboxLoginName?: string | null;
    }

    export namespace Config {
      export interface Proxy {
        cert: string;

        url: string;
      }
    }
  }
}

export interface ListCustomersResponse {
  /**
   * Customer Id
   */
  id: string | null;

  connection_count: number;

  /**
   * postgres timestamp format, not yet ISO
   */
  created_at: string;

  /**
   * postgres timestamp format, not yet ISO
   */
  updated_at: string;
}

export type ListEventsResponse =
  | ListEventsResponse.UnionMember0
  | ListEventsResponse.UnionMember1
  | ListEventsResponse.UnionMember2
  | ListEventsResponse.UnionMember3
  | ListEventsResponse.UnionMember4
  | ListEventsResponse.UnionMember5
  | ListEventsResponse.UnionMember6
  | ListEventsResponse.UnionMember7
  | ListEventsResponse.UnionMember8
  | ListEventsResponse.UnionMember9
  | ListEventsResponse.UnionMember10
  | ListEventsResponse.UnionMember11
  | ListEventsResponse.UnionMember12
  | ListEventsResponse.UnionMember13
  | ListEventsResponse.UnionMember14
  | ListEventsResponse.UnionMember15
  | ListEventsResponse.UnionMember16
  | ListEventsResponse.UnionMember17
  | ListEventsResponse.UnionMember18
  | ListEventsResponse.UnionMember19
  | ListEventsResponse.UnionMember20;

export namespace ListEventsResponse {
  export interface UnionMember0 {
    data: unknown;

    name: 'debug.debug';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export interface UnionMember1 {
    data: UnionMember1.Data;

    name: 'webhook.received';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember1 {
    export interface Data {
      headers: { [key: string]: unknown };

      method: string;

      path: string;

      query: { [key: string]: unknown };

      traceId: string;

      body?: unknown;
    }
  }

  export interface UnionMember2 {
    data: unknown;

    name: 'db.user-created';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export interface UnionMember3 {
    data: unknown;

    name: 'db.user-deleted';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export interface UnionMember4 {
    data: UnionMember4.Data;

    name: 'db.connection-created';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember4 {
    export interface Data {
      /**
       * Must start with 'conn\_'
       */
      connection_id: string;
    }
  }

  export interface UnionMember5 {
    data: UnionMember5.Data;

    name: 'db.connection-deleted';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember5 {
    export interface Data {
      /**
       * Must start with 'conn\_'
       */
      connection_id: string;
    }
  }

  export interface UnionMember6 {
    data: unknown;

    name: 'user.signin';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export interface UnionMember7 {
    data: unknown;

    name: 'user.signout';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export interface UnionMember8 {
    data: UnionMember8.Data;

    name: 'connect.session-started';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember8 {
    export interface Data {
      connector_name: string;

      meta?: unknown;
    }
  }

  export interface UnionMember9 {
    data: UnionMember9.Data;

    name: 'connect.session-cancelled';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember9 {
    export interface Data {
      connector_name: string;

      meta?: unknown;
    }
  }

  export interface UnionMember10 {
    data: UnionMember10.Data;

    name: 'connect.session-succeeded';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember10 {
    export interface Data {
      connector_name: string;

      meta?: unknown;
    }
  }

  export interface UnionMember11 {
    data: UnionMember11.Data;

    name: 'connect.session-errored';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember11 {
    export interface Data {
      connector_name: string;

      meta?: unknown;
    }
  }

  export interface UnionMember12 {
    data: unknown;

    name: 'connect.loaded';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export interface UnionMember13 {
    data: UnionMember13.Data;

    name: 'connect.loading-error';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember13 {
    export interface Data {
      error_details?: string | null;

      error_message?: string | null;
    }
  }

  export interface UnionMember14 {
    data: UnionMember14.Data;

    name: 'connect.connection-connected';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember14 {
    export interface Data {
      /**
       * Must start with 'conn\_'
       */
      connection_id: string;

      customer_id: string | null;
    }
  }

  export interface UnionMember15 {
    data: UnionMember15.Data;

    name: 'connect.connection-deleted';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember15 {
    export interface Data {
      /**
       * Must start with 'conn\_'
       */
      connection_id: string;

      customer_id: string;
    }
  }

  export interface UnionMember16 {
    data: UnionMember16.Data;

    name: 'connect.connection-checked';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember16 {
    export interface Data {
      /**
       * Must start with 'conn\_'
       */
      connection_id: string;

      customer_id: string;

      status: string | null;

      status_message: string | null;
    }
  }

  export interface UnionMember17 {
    data: unknown;

    name: 'api.token-copied';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export interface UnionMember18 {
    data: unknown;

    name: 'api.graphql-request';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export interface UnionMember19 {
    data: unknown;

    name: 'api.rest-request';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export interface UnionMember20 {
    data: UnionMember20.Data;

    name: 'pageview';

    id?: string;

    customer_id?: string | null;

    org_id?: string | null;

    prompt?: string | null;

    timestamp?: string;

    user?: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

    user_id?: string | null;

    v?: string | null;
  }

  export namespace UnionMember20 {
    export interface Data {
      current_url: string;

      path: string;
    }
  }
}

export type UpsertConnnectorConfigResponse =
  | UpsertConnnectorConfigResponse.ConnectorAcceloDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAcmeApikeyDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAcmeOauth2DiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAdobeDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAdyenDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAircallDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAmazonDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorApaleoDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAsanaDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAttioDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAuth0DiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAutodeskDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAwsDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorBamboohrDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorBasecampDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorBattlenetDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorBigcommerceDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorBitbucketDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorBitlyDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorBlackbaudDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorBoldsignDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorBoxDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorBraintreeDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorCalendlyDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorClickupDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorCloseDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorConfluenceDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorContentfulDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorContentstackDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorCopperDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorCorosDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorDatevDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorDeelDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorDialpadDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorDigitaloceanDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorDiscordDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorDocusignDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorDropboxDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorEbayDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorEgnyteDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorEnvoyDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorEventbriteDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorExistDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorFacebookDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorFactorialDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorFigmaDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorFitbitDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorFortnoxDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorFreshbooksDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorFrontDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGitHubDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGitlabDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGongDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGoogleCalendarDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGoogleDocsDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGoogleDriveDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGoogleMailDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGoogleSheetDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGorgiasDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGrainDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGumroadDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGustoDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorHarvestDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorHighlevelDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorHubspotDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorInstagramDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorIntercomDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorJiraDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorKeapDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorLeverDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorLinearDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorLinkedinDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorLinkhutDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorMailchimpDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorMiroDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorMondayDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorMuralDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorNamelyDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorNationbuilderDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorNetsuiteDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorNotionDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorOdooDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorOktaDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorOsuDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorOuraDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorOutreachDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorPagerdutyDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorPandadocDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorPayfitDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorPaypalDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorPennylaneDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorPinterestDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorPipedriveDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorPodiumDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorProductboardDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorQualtricsDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorQuickbooksDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorRedditDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSageDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSalesforceDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSalesloftDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSegmentDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorServicem8DiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorServicenowDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSharepointDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorShopifyDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSignnowDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSlackDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSmartsheetDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSnowflakeDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSpotifyDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSquarespaceDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSquareupDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorStackexchangeDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorStravaDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTeamworkDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTicktickDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTimelyDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTodoistDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTremendousDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTsheetsteamDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTumblrDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTwinfieldDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTwitchDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTwitterDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTypeformDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorUberDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorVimeoDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorWakatimeDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorWealthboxDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorWebflowDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorWhoopDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorWordpressDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorWrikeDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorXeroDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorYahooDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorYandexDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorZapierDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorZendeskDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorZenefitsDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorZohoDeskDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorZohoDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorZoomDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorAirtableDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorApolloDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorBrexDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorCodaDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorFinchDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorFirebaseDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorForeceiptDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorGreenhouseDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorHeronDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorLunchmoneyDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorMercuryDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorMergeDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorMootaDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorOnebrickDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorOpenledgerDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorPlaidDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorPostgresDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorRampDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSaltedgeDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSharepointOnpremDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorSplitwiseDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorStripeDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTellerDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTogglDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorTwentyDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorVenmoDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorWiseDiscriminatedConnectorConfig
  | UpsertConnnectorConfigResponse.ConnectorYodleeDiscriminatedConnectorConfig;

export namespace UpsertConnnectorConfigResponse {
  export interface ConnectorAcceloDiscriminatedConnectorConfig {
    config: ConnectorAcceloDiscriminatedConnectorConfig.Config;

    connector_name: 'accelo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAcceloDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAcmeApikeyDiscriminatedConnectorConfig {
    /**
     * Base configuration for api key connector
     */
    config: unknown;

    connector_name: 'acme-apikey';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorAcmeOauth2DiscriminatedConnectorConfig {
    config: ConnectorAcmeOauth2DiscriminatedConnectorConfig.Config;

    connector_name: 'acme-oauth2';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAcmeOauth2DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAdobeDiscriminatedConnectorConfig {
    config: ConnectorAdobeDiscriminatedConnectorConfig.Config;

    connector_name: 'adobe';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAdobeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAdyenDiscriminatedConnectorConfig {
    config: ConnectorAdyenDiscriminatedConnectorConfig.Config;

    connector_name: 'adyen';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAdyenDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAircallDiscriminatedConnectorConfig {
    config: ConnectorAircallDiscriminatedConnectorConfig.Config;

    connector_name: 'aircall';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAircallDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAmazonDiscriminatedConnectorConfig {
    config: ConnectorAmazonDiscriminatedConnectorConfig.Config;

    connector_name: 'amazon';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAmazonDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorApaleoDiscriminatedConnectorConfig {
    config: ConnectorApaleoDiscriminatedConnectorConfig.Config;

    connector_name: 'apaleo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorApaleoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAsanaDiscriminatedConnectorConfig {
    config: ConnectorAsanaDiscriminatedConnectorConfig.Config;

    connector_name: 'asana';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAsanaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAttioDiscriminatedConnectorConfig {
    config: ConnectorAttioDiscriminatedConnectorConfig.Config;

    connector_name: 'attio';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAttioDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAuth0DiscriminatedConnectorConfig {
    config: ConnectorAuth0DiscriminatedConnectorConfig.Config;

    connector_name: 'auth0';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAuth0DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAutodeskDiscriminatedConnectorConfig {
    config: ConnectorAutodeskDiscriminatedConnectorConfig.Config;

    connector_name: 'autodesk';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAutodeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAwsDiscriminatedConnectorConfig {
    config: ConnectorAwsDiscriminatedConnectorConfig.Config;

    connector_name: 'aws';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorAwsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBamboohrDiscriminatedConnectorConfig {
    config: ConnectorBamboohrDiscriminatedConnectorConfig.Config;

    connector_name: 'bamboohr';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBamboohrDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBasecampDiscriminatedConnectorConfig {
    config: ConnectorBasecampDiscriminatedConnectorConfig.Config;

    connector_name: 'basecamp';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBasecampDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBattlenetDiscriminatedConnectorConfig {
    config: ConnectorBattlenetDiscriminatedConnectorConfig.Config;

    connector_name: 'battlenet';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBattlenetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBigcommerceDiscriminatedConnectorConfig {
    config: ConnectorBigcommerceDiscriminatedConnectorConfig.Config;

    connector_name: 'bigcommerce';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBigcommerceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBitbucketDiscriminatedConnectorConfig {
    config: ConnectorBitbucketDiscriminatedConnectorConfig.Config;

    connector_name: 'bitbucket';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBitbucketDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBitlyDiscriminatedConnectorConfig {
    config: ConnectorBitlyDiscriminatedConnectorConfig.Config;

    connector_name: 'bitly';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBitlyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBlackbaudDiscriminatedConnectorConfig {
    config: ConnectorBlackbaudDiscriminatedConnectorConfig.Config;

    connector_name: 'blackbaud';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBlackbaudDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBoldsignDiscriminatedConnectorConfig {
    config: ConnectorBoldsignDiscriminatedConnectorConfig.Config;

    connector_name: 'boldsign';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBoldsignDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBoxDiscriminatedConnectorConfig {
    config: ConnectorBoxDiscriminatedConnectorConfig.Config;

    connector_name: 'box';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBoxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorBraintreeDiscriminatedConnectorConfig {
    config: ConnectorBraintreeDiscriminatedConnectorConfig.Config;

    connector_name: 'braintree';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBraintreeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCalendlyDiscriminatedConnectorConfig {
    config: ConnectorCalendlyDiscriminatedConnectorConfig.Config;

    connector_name: 'calendly';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCalendlyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorClickupDiscriminatedConnectorConfig {
    config: ConnectorClickupDiscriminatedConnectorConfig.Config;

    connector_name: 'clickup';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorClickupDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCloseDiscriminatedConnectorConfig {
    config: ConnectorCloseDiscriminatedConnectorConfig.Config;

    connector_name: 'close';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCloseDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorConfluenceDiscriminatedConnectorConfig {
    config: ConnectorConfluenceDiscriminatedConnectorConfig.Config;

    connector_name: 'confluence';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorConfluenceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorContentfulDiscriminatedConnectorConfig {
    config: ConnectorContentfulDiscriminatedConnectorConfig.Config;

    connector_name: 'contentful';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorContentfulDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorContentstackDiscriminatedConnectorConfig {
    config: ConnectorContentstackDiscriminatedConnectorConfig.Config;

    connector_name: 'contentstack';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorContentstackDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCopperDiscriminatedConnectorConfig {
    config: ConnectorCopperDiscriminatedConnectorConfig.Config;

    connector_name: 'copper';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCopperDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorCorosDiscriminatedConnectorConfig {
    config: ConnectorCorosDiscriminatedConnectorConfig.Config;

    connector_name: 'coros';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorCorosDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDatevDiscriminatedConnectorConfig {
    config: ConnectorDatevDiscriminatedConnectorConfig.Config;

    connector_name: 'datev';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDatevDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDeelDiscriminatedConnectorConfig {
    config: ConnectorDeelDiscriminatedConnectorConfig.Config;

    connector_name: 'deel';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDeelDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDialpadDiscriminatedConnectorConfig {
    config: ConnectorDialpadDiscriminatedConnectorConfig.Config;

    connector_name: 'dialpad';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDialpadDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDigitaloceanDiscriminatedConnectorConfig {
    config: ConnectorDigitaloceanDiscriminatedConnectorConfig.Config;

    connector_name: 'digitalocean';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDigitaloceanDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDiscordDiscriminatedConnectorConfig {
    config: ConnectorDiscordDiscriminatedConnectorConfig.Config;

    connector_name: 'discord';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDiscordDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDocusignDiscriminatedConnectorConfig {
    config: ConnectorDocusignDiscriminatedConnectorConfig.Config;

    connector_name: 'docusign';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDocusignDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorDropboxDiscriminatedConnectorConfig {
    config: ConnectorDropboxDiscriminatedConnectorConfig.Config;

    connector_name: 'dropbox';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorDropboxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEbayDiscriminatedConnectorConfig {
    config: ConnectorEbayDiscriminatedConnectorConfig.Config;

    connector_name: 'ebay';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEbayDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEgnyteDiscriminatedConnectorConfig {
    config: ConnectorEgnyteDiscriminatedConnectorConfig.Config;

    connector_name: 'egnyte';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEgnyteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEnvoyDiscriminatedConnectorConfig {
    config: ConnectorEnvoyDiscriminatedConnectorConfig.Config;

    connector_name: 'envoy';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEnvoyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorEventbriteDiscriminatedConnectorConfig {
    config: ConnectorEventbriteDiscriminatedConnectorConfig.Config;

    connector_name: 'eventbrite';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorEventbriteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorExistDiscriminatedConnectorConfig {
    config: ConnectorExistDiscriminatedConnectorConfig.Config;

    connector_name: 'exist';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorExistDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFacebookDiscriminatedConnectorConfig {
    config: ConnectorFacebookDiscriminatedConnectorConfig.Config;

    connector_name: 'facebook';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFacebookDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFactorialDiscriminatedConnectorConfig {
    config: ConnectorFactorialDiscriminatedConnectorConfig.Config;

    connector_name: 'factorial';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFactorialDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFigmaDiscriminatedConnectorConfig {
    config: ConnectorFigmaDiscriminatedConnectorConfig.Config;

    connector_name: 'figma';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFigmaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFitbitDiscriminatedConnectorConfig {
    config: ConnectorFitbitDiscriminatedConnectorConfig.Config;

    connector_name: 'fitbit';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFitbitDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFortnoxDiscriminatedConnectorConfig {
    config: ConnectorFortnoxDiscriminatedConnectorConfig.Config;

    connector_name: 'fortnox';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFortnoxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFreshbooksDiscriminatedConnectorConfig {
    config: ConnectorFreshbooksDiscriminatedConnectorConfig.Config;

    connector_name: 'freshbooks';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFreshbooksDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorFrontDiscriminatedConnectorConfig {
    config: ConnectorFrontDiscriminatedConnectorConfig.Config;

    connector_name: 'front';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFrontDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGitHubDiscriminatedConnectorConfig {
    config: ConnectorGitHubDiscriminatedConnectorConfig.Config;

    connector_name: 'github';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGitHubDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGitlabDiscriminatedConnectorConfig {
    config: ConnectorGitlabDiscriminatedConnectorConfig.Config;

    connector_name: 'gitlab';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGitlabDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGongDiscriminatedConnectorConfig {
    config: ConnectorGongDiscriminatedConnectorConfig.Config;

    connector_name: 'gong';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGongDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleCalendarDiscriminatedConnectorConfig {
    config: ConnectorGoogleCalendarDiscriminatedConnectorConfig.Config;

    connector_name: 'google-calendar';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleCalendarDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleDocsDiscriminatedConnectorConfig {
    config: ConnectorGoogleDocsDiscriminatedConnectorConfig.Config;

    connector_name: 'google-docs';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDocsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleDriveDiscriminatedConnectorConfig {
    config: ConnectorGoogleDriveDiscriminatedConnectorConfig.Config;

    connector_name: 'google-drive';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleDriveDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleMailDiscriminatedConnectorConfig {
    config: ConnectorGoogleMailDiscriminatedConnectorConfig.Config;

    connector_name: 'google-mail';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleMailDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGoogleSheetDiscriminatedConnectorConfig {
    config: ConnectorGoogleSheetDiscriminatedConnectorConfig.Config;

    connector_name: 'google-sheet';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGoogleSheetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGorgiasDiscriminatedConnectorConfig {
    config: ConnectorGorgiasDiscriminatedConnectorConfig.Config;

    connector_name: 'gorgias';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGorgiasDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGrainDiscriminatedConnectorConfig {
    config: ConnectorGrainDiscriminatedConnectorConfig.Config;

    connector_name: 'grain';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGrainDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGumroadDiscriminatedConnectorConfig {
    config: ConnectorGumroadDiscriminatedConnectorConfig.Config;

    connector_name: 'gumroad';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGumroadDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorGustoDiscriminatedConnectorConfig {
    config: ConnectorGustoDiscriminatedConnectorConfig.Config;

    connector_name: 'gusto';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorGustoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHarvestDiscriminatedConnectorConfig {
    config: ConnectorHarvestDiscriminatedConnectorConfig.Config;

    connector_name: 'harvest';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHarvestDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHighlevelDiscriminatedConnectorConfig {
    config: ConnectorHighlevelDiscriminatedConnectorConfig.Config;

    connector_name: 'highlevel';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHighlevelDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorHubspotDiscriminatedConnectorConfig {
    config: ConnectorHubspotDiscriminatedConnectorConfig.Config;

    connector_name: 'hubspot';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHubspotDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorInstagramDiscriminatedConnectorConfig {
    config: ConnectorInstagramDiscriminatedConnectorConfig.Config;

    connector_name: 'instagram';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorInstagramDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorIntercomDiscriminatedConnectorConfig {
    config: ConnectorIntercomDiscriminatedConnectorConfig.Config;

    connector_name: 'intercom';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorIntercomDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorJiraDiscriminatedConnectorConfig {
    config: ConnectorJiraDiscriminatedConnectorConfig.Config;

    connector_name: 'jira';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorJiraDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorKeapDiscriminatedConnectorConfig {
    config: ConnectorKeapDiscriminatedConnectorConfig.Config;

    connector_name: 'keap';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorKeapDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLeverDiscriminatedConnectorConfig {
    config: ConnectorLeverDiscriminatedConnectorConfig.Config;

    connector_name: 'lever';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLeverDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinearDiscriminatedConnectorConfig {
    config: ConnectorLinearDiscriminatedConnectorConfig.Config;

    connector_name: 'linear';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinearDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinkedinDiscriminatedConnectorConfig {
    config: ConnectorLinkedinDiscriminatedConnectorConfig.Config;

    connector_name: 'linkedin';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinkedinDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorLinkhutDiscriminatedConnectorConfig {
    config: ConnectorLinkhutDiscriminatedConnectorConfig.Config;

    connector_name: 'linkhut';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLinkhutDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMailchimpDiscriminatedConnectorConfig {
    config: ConnectorMailchimpDiscriminatedConnectorConfig.Config;

    connector_name: 'mailchimp';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMailchimpDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMiroDiscriminatedConnectorConfig {
    config: ConnectorMiroDiscriminatedConnectorConfig.Config;

    connector_name: 'miro';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMiroDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMondayDiscriminatedConnectorConfig {
    config: ConnectorMondayDiscriminatedConnectorConfig.Config;

    connector_name: 'monday';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMondayDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorMuralDiscriminatedConnectorConfig {
    config: ConnectorMuralDiscriminatedConnectorConfig.Config;

    connector_name: 'mural';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMuralDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNamelyDiscriminatedConnectorConfig {
    config: ConnectorNamelyDiscriminatedConnectorConfig.Config;

    connector_name: 'namely';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNamelyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNationbuilderDiscriminatedConnectorConfig {
    config: ConnectorNationbuilderDiscriminatedConnectorConfig.Config;

    connector_name: 'nationbuilder';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNationbuilderDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNetsuiteDiscriminatedConnectorConfig {
    config: ConnectorNetsuiteDiscriminatedConnectorConfig.Config;

    connector_name: 'netsuite';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNetsuiteDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorNotionDiscriminatedConnectorConfig {
    config: ConnectorNotionDiscriminatedConnectorConfig.Config;

    connector_name: 'notion';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorNotionDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOdooDiscriminatedConnectorConfig {
    config: ConnectorOdooDiscriminatedConnectorConfig.Config;

    connector_name: 'odoo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOdooDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOktaDiscriminatedConnectorConfig {
    config: ConnectorOktaDiscriminatedConnectorConfig.Config;

    connector_name: 'okta';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOktaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOsuDiscriminatedConnectorConfig {
    config: ConnectorOsuDiscriminatedConnectorConfig.Config;

    connector_name: 'osu';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOsuDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOuraDiscriminatedConnectorConfig {
    config: ConnectorOuraDiscriminatedConnectorConfig.Config;

    connector_name: 'oura';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOuraDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorOutreachDiscriminatedConnectorConfig {
    config: ConnectorOutreachDiscriminatedConnectorConfig.Config;

    connector_name: 'outreach';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOutreachDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPagerdutyDiscriminatedConnectorConfig {
    config: ConnectorPagerdutyDiscriminatedConnectorConfig.Config;

    connector_name: 'pagerduty';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPagerdutyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPandadocDiscriminatedConnectorConfig {
    config: ConnectorPandadocDiscriminatedConnectorConfig.Config;

    connector_name: 'pandadoc';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPandadocDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPayfitDiscriminatedConnectorConfig {
    config: ConnectorPayfitDiscriminatedConnectorConfig.Config;

    connector_name: 'payfit';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPayfitDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPaypalDiscriminatedConnectorConfig {
    config: ConnectorPaypalDiscriminatedConnectorConfig.Config;

    connector_name: 'paypal';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPaypalDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPennylaneDiscriminatedConnectorConfig {
    config: ConnectorPennylaneDiscriminatedConnectorConfig.Config;

    connector_name: 'pennylane';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPennylaneDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPinterestDiscriminatedConnectorConfig {
    config: ConnectorPinterestDiscriminatedConnectorConfig.Config;

    connector_name: 'pinterest';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPinterestDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPipedriveDiscriminatedConnectorConfig {
    config: ConnectorPipedriveDiscriminatedConnectorConfig.Config;

    connector_name: 'pipedrive';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPipedriveDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorPodiumDiscriminatedConnectorConfig {
    config: ConnectorPodiumDiscriminatedConnectorConfig.Config;

    connector_name: 'podium';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPodiumDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorProductboardDiscriminatedConnectorConfig {
    config: ConnectorProductboardDiscriminatedConnectorConfig.Config;

    connector_name: 'productboard';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorProductboardDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorQualtricsDiscriminatedConnectorConfig {
    config: ConnectorQualtricsDiscriminatedConnectorConfig.Config;

    connector_name: 'qualtrics';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorQualtricsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorQuickbooksDiscriminatedConnectorConfig {
    config: ConnectorQuickbooksDiscriminatedConnectorConfig.Config;

    connector_name: 'quickbooks';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorQuickbooksDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorRedditDiscriminatedConnectorConfig {
    config: ConnectorRedditDiscriminatedConnectorConfig.Config;

    connector_name: 'reddit';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorRedditDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSageDiscriminatedConnectorConfig {
    config: ConnectorSageDiscriminatedConnectorConfig.Config;

    connector_name: 'sage';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSageDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSalesforceDiscriminatedConnectorConfig {
    config: ConnectorSalesforceDiscriminatedConnectorConfig.Config;

    connector_name: 'salesforce';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSalesforceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSalesloftDiscriminatedConnectorConfig {
    config: ConnectorSalesloftDiscriminatedConnectorConfig.Config;

    connector_name: 'salesloft';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSalesloftDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSegmentDiscriminatedConnectorConfig {
    config: ConnectorSegmentDiscriminatedConnectorConfig.Config;

    connector_name: 'segment';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSegmentDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorServicem8DiscriminatedConnectorConfig {
    config: ConnectorServicem8DiscriminatedConnectorConfig.Config;

    connector_name: 'servicem8';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorServicem8DiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorServicenowDiscriminatedConnectorConfig {
    config: ConnectorServicenowDiscriminatedConnectorConfig.Config;

    connector_name: 'servicenow';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorServicenowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSharepointDiscriminatedConnectorConfig {
    config: ConnectorSharepointDiscriminatedConnectorConfig.Config;

    connector_name: 'sharepoint';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSharepointDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorShopifyDiscriminatedConnectorConfig {
    config: ConnectorShopifyDiscriminatedConnectorConfig.Config;

    connector_name: 'shopify';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorShopifyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSignnowDiscriminatedConnectorConfig {
    config: ConnectorSignnowDiscriminatedConnectorConfig.Config;

    connector_name: 'signnow';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSignnowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSlackDiscriminatedConnectorConfig {
    config: ConnectorSlackDiscriminatedConnectorConfig.Config;

    connector_name: 'slack';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSlackDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSmartsheetDiscriminatedConnectorConfig {
    config: ConnectorSmartsheetDiscriminatedConnectorConfig.Config;

    connector_name: 'smartsheet';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSmartsheetDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSnowflakeDiscriminatedConnectorConfig {
    config: ConnectorSnowflakeDiscriminatedConnectorConfig.Config;

    connector_name: 'snowflake';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSnowflakeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSpotifyDiscriminatedConnectorConfig {
    config: ConnectorSpotifyDiscriminatedConnectorConfig.Config;

    connector_name: 'spotify';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSpotifyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSquarespaceDiscriminatedConnectorConfig {
    config: ConnectorSquarespaceDiscriminatedConnectorConfig.Config;

    connector_name: 'squarespace';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSquarespaceDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorSquareupDiscriminatedConnectorConfig {
    config: ConnectorSquareupDiscriminatedConnectorConfig.Config;

    connector_name: 'squareup';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSquareupDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorStackexchangeDiscriminatedConnectorConfig {
    config: ConnectorStackexchangeDiscriminatedConnectorConfig.Config;

    connector_name: 'stackexchange';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStackexchangeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorStravaDiscriminatedConnectorConfig {
    config: ConnectorStravaDiscriminatedConnectorConfig.Config;

    connector_name: 'strava';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStravaDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTeamworkDiscriminatedConnectorConfig {
    config: ConnectorTeamworkDiscriminatedConnectorConfig.Config;

    connector_name: 'teamwork';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTeamworkDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTicktickDiscriminatedConnectorConfig {
    config: ConnectorTicktickDiscriminatedConnectorConfig.Config;

    connector_name: 'ticktick';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTicktickDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTimelyDiscriminatedConnectorConfig {
    config: ConnectorTimelyDiscriminatedConnectorConfig.Config;

    connector_name: 'timely';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTimelyDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTodoistDiscriminatedConnectorConfig {
    config: ConnectorTodoistDiscriminatedConnectorConfig.Config;

    connector_name: 'todoist';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTodoistDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTremendousDiscriminatedConnectorConfig {
    config: ConnectorTremendousDiscriminatedConnectorConfig.Config;

    connector_name: 'tremendous';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTremendousDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTsheetsteamDiscriminatedConnectorConfig {
    config: ConnectorTsheetsteamDiscriminatedConnectorConfig.Config;

    connector_name: 'tsheetsteam';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTsheetsteamDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTumblrDiscriminatedConnectorConfig {
    config: ConnectorTumblrDiscriminatedConnectorConfig.Config;

    connector_name: 'tumblr';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTumblrDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwinfieldDiscriminatedConnectorConfig {
    config: ConnectorTwinfieldDiscriminatedConnectorConfig.Config;

    connector_name: 'twinfield';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwinfieldDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwitchDiscriminatedConnectorConfig {
    config: ConnectorTwitchDiscriminatedConnectorConfig.Config;

    connector_name: 'twitch';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwitchDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTwitterDiscriminatedConnectorConfig {
    config: ConnectorTwitterDiscriminatedConnectorConfig.Config;

    connector_name: 'twitter';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTwitterDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorTypeformDiscriminatedConnectorConfig {
    config: ConnectorTypeformDiscriminatedConnectorConfig.Config;

    connector_name: 'typeform';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTypeformDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorUberDiscriminatedConnectorConfig {
    config: ConnectorUberDiscriminatedConnectorConfig.Config;

    connector_name: 'uber';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorUberDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorVimeoDiscriminatedConnectorConfig {
    config: ConnectorVimeoDiscriminatedConnectorConfig.Config;

    connector_name: 'vimeo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorVimeoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWakatimeDiscriminatedConnectorConfig {
    config: ConnectorWakatimeDiscriminatedConnectorConfig.Config;

    connector_name: 'wakatime';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWakatimeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWealthboxDiscriminatedConnectorConfig {
    config: ConnectorWealthboxDiscriminatedConnectorConfig.Config;

    connector_name: 'wealthbox';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWealthboxDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWebflowDiscriminatedConnectorConfig {
    config: ConnectorWebflowDiscriminatedConnectorConfig.Config;

    connector_name: 'webflow';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWebflowDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWhoopDiscriminatedConnectorConfig {
    config: ConnectorWhoopDiscriminatedConnectorConfig.Config;

    connector_name: 'whoop';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWhoopDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWordpressDiscriminatedConnectorConfig {
    config: ConnectorWordpressDiscriminatedConnectorConfig.Config;

    connector_name: 'wordpress';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWordpressDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorWrikeDiscriminatedConnectorConfig {
    config: ConnectorWrikeDiscriminatedConnectorConfig.Config;

    connector_name: 'wrike';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorWrikeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorXeroDiscriminatedConnectorConfig {
    config: ConnectorXeroDiscriminatedConnectorConfig.Config;

    connector_name: 'xero';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorXeroDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorYahooDiscriminatedConnectorConfig {
    config: ConnectorYahooDiscriminatedConnectorConfig.Config;

    connector_name: 'yahoo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYahooDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorYandexDiscriminatedConnectorConfig {
    config: ConnectorYandexDiscriminatedConnectorConfig.Config;

    connector_name: 'yandex';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYandexDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZapierDiscriminatedConnectorConfig {
    config: ConnectorZapierDiscriminatedConnectorConfig.Config;

    connector_name: 'zapier';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZapierDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZendeskDiscriminatedConnectorConfig {
    config: ConnectorZendeskDiscriminatedConnectorConfig.Config;

    connector_name: 'zendesk';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZendeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZenefitsDiscriminatedConnectorConfig {
    config: ConnectorZenefitsDiscriminatedConnectorConfig.Config;

    connector_name: 'zenefits';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZenefitsDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZohoDeskDiscriminatedConnectorConfig {
    config: ConnectorZohoDeskDiscriminatedConnectorConfig.Config;

    connector_name: 'zoho-desk';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZohoDeskDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZohoDiscriminatedConnectorConfig {
    config: ConnectorZohoDiscriminatedConnectorConfig.Config;

    connector_name: 'zoho';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZohoDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorZoomDiscriminatedConnectorConfig {
    config: ConnectorZoomDiscriminatedConnectorConfig.Config;

    connector_name: 'zoom';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorZoomDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * Base oauth configuration for the connector
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Base oauth configuration for the connector
       */
      export interface OAuth {
        client_id?: string | null;

        client_secret?: string | null;

        /**
         * Custom redirect URI
         */
        redirect_uri?: string | null;

        scopes?: Array<string> | null;
      }
    }
  }

  export interface ConnectorAirtableDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'airtable';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorApolloDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'apollo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorBrexDiscriminatedConnectorConfig {
    config: ConnectorBrexDiscriminatedConnectorConfig.Config;

    connector_name: 'brex';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorBrexDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorCodaDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'coda';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorFinchDiscriminatedConnectorConfig {
    config: ConnectorFinchDiscriminatedConnectorConfig.Config;

    connector_name: 'finch';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorFinchDiscriminatedConnectorConfig {
    export interface Config {
      client_id: string;

      client_secret: string;

      /**
       * Finch products to access, @see
       * https://developer.tryfinch.com/api-reference/development-guides/Permissions
       */
      products: Array<
        | 'company'
        | 'directory'
        | 'individual'
        | 'ssn'
        | 'employment'
        | 'payment'
        | 'pay_statement'
        | 'benefits'
      >;

      /**
       * Finch API version
       */
      api_version?: string;
    }
  }

  export interface ConnectorFirebaseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'firebase';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorForeceiptDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'foreceipt';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorGreenhouseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'greenhouse';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorHeronDiscriminatedConnectorConfig {
    config: ConnectorHeronDiscriminatedConnectorConfig.Config;

    connector_name: 'heron';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorHeronDiscriminatedConnectorConfig {
    export interface Config {
      apiKey: string;
    }
  }

  export interface ConnectorLunchmoneyDiscriminatedConnectorConfig {
    config: ConnectorLunchmoneyDiscriminatedConnectorConfig.Config;

    connector_name: 'lunchmoney';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorLunchmoneyDiscriminatedConnectorConfig {
    export interface Config {
      accessToken: string;
    }
  }

  export interface ConnectorMercuryDiscriminatedConnectorConfig {
    config: ConnectorMercuryDiscriminatedConnectorConfig.Config;

    connector_name: 'mercury';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMercuryDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorMergeDiscriminatedConnectorConfig {
    config: ConnectorMergeDiscriminatedConnectorConfig.Config;

    connector_name: 'merge';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMergeDiscriminatedConnectorConfig {
    export interface Config {
      apiKey: string;
    }
  }

  export interface ConnectorMootaDiscriminatedConnectorConfig {
    config: ConnectorMootaDiscriminatedConnectorConfig.Config;

    connector_name: 'moota';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorMootaDiscriminatedConnectorConfig {
    export interface Config {
      token: string;
    }
  }

  export interface ConnectorOnebrickDiscriminatedConnectorConfig {
    config: ConnectorOnebrickDiscriminatedConnectorConfig.Config;

    connector_name: 'onebrick';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOnebrickDiscriminatedConnectorConfig {
    export interface Config {
      clientId: string;

      clientSecret: string;

      envName: 'sandbox' | 'production';

      publicToken: string;

      accessToken?: string | null;

      redirectUrl?: string | null;
    }
  }

  export interface ConnectorOpenledgerDiscriminatedConnectorConfig {
    config: ConnectorOpenledgerDiscriminatedConnectorConfig.Config;

    connector_name: 'openledger';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorOpenledgerDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API endpoint
       */
      api_url: string;

      /**
       * Your developer ID for authentication
       */
      developer_id: string;

      /**
       * Your developer secret
       */
      developer_secret: string;

      /**
       * Switch to "production" for live data
       */
      environment: 'development' | 'production';
    }
  }

  export interface ConnectorPlaidDiscriminatedConnectorConfig {
    config: ConnectorPlaidDiscriminatedConnectorConfig.Config;

    connector_name: 'plaid';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorPlaidDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * The name of your application, as it should be displayed in Link. Maximum length
       * of 30 characters. If a value longer than 30 characters is provided, Link will
       * display "This Application" instead.
       */
      clientName: string;

      countryCodes: Array<
        | 'US'
        | 'GB'
        | 'ES'
        | 'NL'
        | 'FR'
        | 'IE'
        | 'CA'
        | 'DE'
        | 'IT'
        | 'PL'
        | 'DK'
        | 'NO'
        | 'SE'
        | 'EE'
        | 'LT'
        | 'LV'
      >;

      envName: 'sandbox' | 'development' | 'production';

      language: 'en' | 'fr' | 'es' | 'nl' | 'de';

      products: Array<
        | 'assets'
        | 'auth'
        | 'balance'
        | 'identity'
        | 'investments'
        | 'liabilities'
        | 'payment_initiation'
        | 'identity_verification'
        | 'transactions'
        | 'credit_details'
        | 'income'
        | 'income_verification'
        | 'deposit_switch'
        | 'standing_orders'
        | 'transfer'
        | 'employment'
        | 'recurring_transactions'
      >;

      credentials?: Config.Credentials | null;
    }

    export namespace Config {
      export interface Credentials {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorPostgresDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'postgres';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorRampDiscriminatedConnectorConfig {
    config: ConnectorRampDiscriminatedConnectorConfig.Config;

    connector_name: 'ramp';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorRampDiscriminatedConnectorConfig {
    export interface Config {
      oauth: Config.OAuth;
    }

    export namespace Config {
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorSaltedgeDiscriminatedConnectorConfig {
    config: ConnectorSaltedgeDiscriminatedConnectorConfig.Config;

    connector_name: 'saltedge';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorSaltedgeDiscriminatedConnectorConfig {
    export interface Config {
      appId: string;

      secret: string;

      url?: string | null;
    }
  }

  export interface ConnectorSharepointOnpremDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'sharepoint-onprem';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorSplitwiseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'splitwise';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorStripeDiscriminatedConnectorConfig {
    config: ConnectorStripeDiscriminatedConnectorConfig.Config;

    connector_name: 'stripe';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorStripeDiscriminatedConnectorConfig {
    export interface Config {
      /**
       * API key auth support
       */
      apikeyAuth?: boolean;

      /**
       * Configure oauth
       */
      oauth?: Config.OAuth | null;
    }

    export namespace Config {
      /**
       * Configure oauth
       */
      export interface OAuth {
        clientId: string;

        clientSecret: string;
      }
    }
  }

  export interface ConnectorTellerDiscriminatedConnectorConfig {
    config: ConnectorTellerDiscriminatedConnectorConfig.Config;

    connector_name: 'teller';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorTellerDiscriminatedConnectorConfig {
    export interface Config {
      applicationId: string;

      token?: string | null;
    }
  }

  export interface ConnectorTogglDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'toggl';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorTwentyDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'twenty';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorVenmoDiscriminatedConnectorConfig {
    config: ConnectorVenmoDiscriminatedConnectorConfig.Config;

    connector_name: 'venmo';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorVenmoDiscriminatedConnectorConfig {
    export interface Config {
      proxy?: Config.Proxy | null;

      v1BaseURL?: string | null;

      v5BaseURL?: string | null;
    }

    export namespace Config {
      export interface Proxy {
        cert: string;

        url: string;
      }
    }
  }

  export interface ConnectorWiseDiscriminatedConnectorConfig {
    config: unknown;

    connector_name: 'wise';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export interface ConnectorYodleeDiscriminatedConnectorConfig {
    config: ConnectorYodleeDiscriminatedConnectorConfig.Config;

    connector_name: 'yodlee';

    id?: string;

    created_at?: string;

    disabled?: boolean | null;

    display_name?: string | null;

    /**
     * JSON object can can be used to associate arbitrary metadata to avoid needing a
     * separate 1-1 table just for simple key values in your application. During
     * updates this object will be shallowly merged
     */
    metadata?: { [key: string]: unknown } | null;

    org_id?: string;

    updated_at?: string;
  }

  export namespace ConnectorYodleeDiscriminatedConnectorConfig {
    export interface Config {
      adminLoginName: string;

      clientId: string;

      clientSecret: string;

      envName: 'sandbox' | 'development' | 'production';

      proxy?: Config.Proxy | null;

      sandboxLoginName?: string | null;
    }

    export namespace Config {
      export interface Proxy {
        cert: string;

        url: string;
      }
    }
  }
}

export interface UpsertCustomerResponse {
  id: string;

  api_key: string | null;

  created_at: string;

  metadata: string | number | boolean | { [key: string]: unknown } | Array<unknown> | null;

  org_id: string;

  updated_at: string;
}

export interface CreateConnectionParams {
  /**
   * The id of the connector config, starts with `ccfg_`
   */
  connector_config_id: string;

  /**
   * The id of the customer in your application. Ensure it is unique for that
   * customer.
   */
  customer_id: string;

  /**
   * Connector specific data
   */
  data:
    | CreateConnectionParams.ConnectorAcceloDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAcmeApikeyDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAcmeOauth2DiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAdobeDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAdyenDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAircallDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAmazonDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorApaleoDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAsanaDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAttioDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAuth0DiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAutodeskDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAwsDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorBamboohrDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorBasecampDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorBattlenetDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorBigcommerceDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorBitbucketDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorBitlyDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorBlackbaudDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorBoldsignDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorBoxDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorBraintreeDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorCalendlyDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorClickupDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorCloseDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorConfluenceDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorContentfulDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorContentstackDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorCopperDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorCorosDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorDatevDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorDeelDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorDialpadDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorDigitaloceanDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorDiscordDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorDocusignDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorDropboxDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorEbayDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorEgnyteDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorEnvoyDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorEventbriteDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorExistDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorFacebookDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorFactorialDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorFigmaDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorFitbitDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorFortnoxDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorFreshbooksDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorFrontDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGitHubDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGitlabDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGongDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGoogleCalendarDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGoogleDocsDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGoogleDriveDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGoogleMailDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGoogleSheetDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGorgiasDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGrainDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGumroadDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGustoDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorHarvestDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorHighlevelDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorHubspotDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorInstagramDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorIntercomDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorJiraDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorKeapDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorLeverDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorLinearDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorLinkedinDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorLinkhutDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorMailchimpDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorMiroDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorMondayDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorMuralDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorNamelyDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorNationbuilderDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorNetsuiteDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorNotionDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorOdooDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorOktaDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorOsuDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorOuraDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorOutreachDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorPagerdutyDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorPandadocDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorPayfitDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorPaypalDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorPennylaneDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorPinterestDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorPipedriveDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorPodiumDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorProductboardDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorQualtricsDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorQuickbooksDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorRedditDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSageDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSalesforceDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSalesloftDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSegmentDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorServicem8DiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorServicenowDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSharepointDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorShopifyDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSignnowDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSlackDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSmartsheetDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSnowflakeDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSpotifyDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSquarespaceDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSquareupDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorStackexchangeDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorStravaDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTeamworkDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTicktickDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTimelyDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTodoistDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTremendousDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTsheetsteamDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTumblrDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTwinfieldDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTwitchDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTwitterDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTypeformDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorUberDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorVimeoDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorWakatimeDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorWealthboxDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorWebflowDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorWhoopDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorWordpressDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorWrikeDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorXeroDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorYahooDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorYandexDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorZapierDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorZendeskDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorZenefitsDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorZohoDeskDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorZohoDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorZoomDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorAirtableDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorApolloDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorBrexDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorCodaDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorFinchDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorFirebaseDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorForeceiptDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorGreenhouseDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorHeronDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorLunchmoneyDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorMercuryDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorMergeDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorMootaDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorOnebrickDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorOpenledgerDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorPlaidDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorPostgresDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorRampDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSaltedgeDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSharepointOnpremDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorSplitwiseDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorStripeDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTellerDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTogglDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorTwentyDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorVenmoDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorWiseDiscriminatedConnectionSettings
    | CreateConnectionParams.ConnectorYodleeDiscriminatedConnectionSettings;

  /**
   * Perform a synchronous connection check before creating it.
   */
  check_connection?: boolean;

  metadata?: { [key: string]: unknown };
}

export namespace CreateConnectionParams {
  export interface ConnectorAcceloDiscriminatedConnectionSettings {
    connector_name: 'accelo';

    settings?: ConnectorAcceloDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAcceloDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Accelo account (e.g., https://domain.api.accelo.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAcmeApikeyDiscriminatedConnectionSettings {
    connector_name: 'acme-apikey';

    settings?: ConnectorAcmeApikeyDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAcmeApikeyDiscriminatedConnectionSettings {
    export interface Settings {
      api_key: string;
    }
  }

  export interface ConnectorAcmeOauth2DiscriminatedConnectionSettings {
    connector_name: 'acme-oauth2';

    settings?: ConnectorAcmeOauth2DiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAcmeOauth2DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAdobeDiscriminatedConnectionSettings {
    connector_name: 'adobe';

    settings?: ConnectorAdobeDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAdobeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAdyenDiscriminatedConnectionSettings {
    connector_name: 'adyen';

    settings?: ConnectorAdyenDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAdyenDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The environment to use (e.g., live|test)
       */
      environment: string;

      oauth: Settings.OAuth;

      /**
       * The resource to use for your various requests (e.g.,
       * https://kyc-(live|test).adyen.com)
       */
      resource: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAircallDiscriminatedConnectionSettings {
    connector_name: 'aircall';

    settings?: ConnectorAircallDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAircallDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAmazonDiscriminatedConnectionSettings {
    connector_name: 'amazon';

    settings?: ConnectorAmazonDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAmazonDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension for your Amazon account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorApaleoDiscriminatedConnectionSettings {
    connector_name: 'apaleo';

    settings?: ConnectorApaleoDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorApaleoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAsanaDiscriminatedConnectionSettings {
    connector_name: 'asana';

    settings?: ConnectorAsanaDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAsanaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAttioDiscriminatedConnectionSettings {
    connector_name: 'attio';

    settings?: ConnectorAttioDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAttioDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAuth0DiscriminatedConnectionSettings {
    connector_name: 'auth0';

    settings?: ConnectorAuth0DiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAuth0DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Auth0 account (e.g., https://domain.auth0.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAutodeskDiscriminatedConnectionSettings {
    connector_name: 'autodesk';

    settings?: ConnectorAutodeskDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAutodeskDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAwsDiscriminatedConnectionSettings {
    connector_name: 'aws';

    settings?: ConnectorAwsDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAwsDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API subdomain to the API you want to connect to (e.g.,
       * https://cognito-idp.us-east-2.amazonaws.com)
       */
      apiSubdomain: string;

      /**
       * The domain extension of your AWS account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * The subdomain of your AWS account (e.g., https://domain.amazoncognito.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBamboohrDiscriminatedConnectionSettings {
    connector_name: 'bamboohr';

    settings?: ConnectorBamboohrDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorBamboohrDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your BambooHR account (e.g., https://domain.bamboohr.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBasecampDiscriminatedConnectionSettings {
    connector_name: 'basecamp';

    settings?: ConnectorBasecampDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorBasecampDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * Your Account ID (e.g., 5899981)
       */
      accountId: string;

      /**
       * The details of your app (e.g., example-subdomain)
       */
      appDetails: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBattlenetDiscriminatedConnectionSettings {
    connector_name: 'battlenet';

    settings?: ConnectorBattlenetDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorBattlenetDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to where you will access your API (e.g., https://us.api.blizzard.com)
       */
      apiDomain: string;

      /**
       * The domain extension of your Battle.net account (e.g., com)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBigcommerceDiscriminatedConnectionSettings {
    connector_name: 'bigcommerce';

    settings?: ConnectorBigcommerceDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorBigcommerceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account UUID of your BigCommerce account (e.g.,
       * 123e4567-e89b-12d3-a456-426614174000)
       */
      accountUuid: string;

      oauth: Settings.OAuth;

      /**
       * The store hash of your BigCommerce account (e.g., Example123)
       */
      storeHash: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBitbucketDiscriminatedConnectionSettings {
    connector_name: 'bitbucket';

    settings?: ConnectorBitbucketDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorBitbucketDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBitlyDiscriminatedConnectionSettings {
    connector_name: 'bitly';

    settings?: ConnectorBitlyDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorBitlyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBlackbaudDiscriminatedConnectionSettings {
    connector_name: 'blackbaud';

    settings?: ConnectorBlackbaudDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorBlackbaudDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBoldsignDiscriminatedConnectionSettings {
    connector_name: 'boldsign';

    settings?: ConnectorBoldsignDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorBoldsignDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBoxDiscriminatedConnectionSettings {
    connector_name: 'box';

    settings?: ConnectorBoxDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorBoxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorBraintreeDiscriminatedConnectionSettings {
    connector_name: 'braintree';

    settings?: ConnectorBraintreeDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorBraintreeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCalendlyDiscriminatedConnectionSettings {
    connector_name: 'calendly';

    settings?: ConnectorCalendlyDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorCalendlyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorClickupDiscriminatedConnectionSettings {
    connector_name: 'clickup';

    settings?: ConnectorClickupDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorClickupDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCloseDiscriminatedConnectionSettings {
    connector_name: 'close';

    settings?: ConnectorCloseDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorCloseDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorConfluenceDiscriminatedConnectionSettings {
    connector_name: 'confluence';

    settings?: ConnectorConfluenceDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorConfluenceDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorContentfulDiscriminatedConnectionSettings {
    connector_name: 'contentful';

    settings?: ConnectorContentfulDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorContentfulDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Contentful account (e.g., https://domain.contentful.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorContentstackDiscriminatedConnectionSettings {
    connector_name: 'contentstack';

    settings?: ConnectorContentstackDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorContentstackDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to where you will access your API (e.g.,
       * https://eu-api.contentstack.com)
       */
      apiDomain: string;

      /**
       * The app ID of your Contentstack account (e.g., example-subdomain)
       */
      appId: string;

      oauth: Settings.OAuth;

      /**
       * The subdomain of your Contentstack account (e.g.,
       * https://domain.contentstack.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCopperDiscriminatedConnectionSettings {
    connector_name: 'copper';

    settings?: ConnectorCopperDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorCopperDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorCorosDiscriminatedConnectionSettings {
    connector_name: 'coros';

    settings?: ConnectorCorosDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorCorosDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDatevDiscriminatedConnectionSettings {
    connector_name: 'datev';

    settings?: ConnectorDatevDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorDatevDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDeelDiscriminatedConnectionSettings {
    connector_name: 'deel';

    settings?: ConnectorDeelDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorDeelDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDialpadDiscriminatedConnectionSettings {
    connector_name: 'dialpad';

    settings?: ConnectorDialpadDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorDialpadDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDigitaloceanDiscriminatedConnectionSettings {
    connector_name: 'digitalocean';

    settings?: ConnectorDigitaloceanDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorDigitaloceanDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDiscordDiscriminatedConnectionSettings {
    connector_name: 'discord';

    settings?: ConnectorDiscordDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorDiscordDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDocusignDiscriminatedConnectionSettings {
    connector_name: 'docusign';

    settings?: ConnectorDocusignDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorDocusignDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorDropboxDiscriminatedConnectionSettings {
    connector_name: 'dropbox';

    settings?: ConnectorDropboxDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorDropboxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEbayDiscriminatedConnectionSettings {
    connector_name: 'ebay';

    settings?: ConnectorEbayDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorEbayDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEgnyteDiscriminatedConnectionSettings {
    connector_name: 'egnyte';

    settings?: ConnectorEgnyteDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorEgnyteDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Egnyte account (e.g., https://domain.egnyte.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEnvoyDiscriminatedConnectionSettings {
    connector_name: 'envoy';

    settings?: ConnectorEnvoyDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorEnvoyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorEventbriteDiscriminatedConnectionSettings {
    connector_name: 'eventbrite';

    settings?: ConnectorEventbriteDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorEventbriteDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorExistDiscriminatedConnectionSettings {
    connector_name: 'exist';

    settings?: ConnectorExistDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorExistDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFacebookDiscriminatedConnectionSettings {
    connector_name: 'facebook';

    settings?: ConnectorFacebookDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorFacebookDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFactorialDiscriminatedConnectionSettings {
    connector_name: 'factorial';

    settings?: ConnectorFactorialDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorFactorialDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFigmaDiscriminatedConnectionSettings {
    connector_name: 'figma';

    settings?: ConnectorFigmaDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorFigmaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFitbitDiscriminatedConnectionSettings {
    connector_name: 'fitbit';

    settings?: ConnectorFitbitDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorFitbitDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFortnoxDiscriminatedConnectionSettings {
    connector_name: 'fortnox';

    settings?: ConnectorFortnoxDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorFortnoxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFreshbooksDiscriminatedConnectionSettings {
    connector_name: 'freshbooks';

    settings?: ConnectorFreshbooksDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorFreshbooksDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorFrontDiscriminatedConnectionSettings {
    connector_name: 'front';

    settings?: ConnectorFrontDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorFrontDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGitHubDiscriminatedConnectionSettings {
    connector_name: 'github';

    settings?: ConnectorGitHubDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGitHubDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGitlabDiscriminatedConnectionSettings {
    connector_name: 'gitlab';

    settings?: ConnectorGitlabDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGitlabDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGongDiscriminatedConnectionSettings {
    connector_name: 'gong';

    settings?: ConnectorGongDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGongDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The base URL of your Gong account (e.g., example)
       */
      api_base_url_for_customer: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleCalendarDiscriminatedConnectionSettings {
    connector_name: 'google-calendar';

    settings?: ConnectorGoogleCalendarDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGoogleCalendarDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleDocsDiscriminatedConnectionSettings {
    connector_name: 'google-docs';

    settings?: ConnectorGoogleDocsDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGoogleDocsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleDriveDiscriminatedConnectionSettings {
    connector_name: 'google-drive';

    settings?: ConnectorGoogleDriveDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGoogleDriveDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleMailDiscriminatedConnectionSettings {
    connector_name: 'google-mail';

    settings?: ConnectorGoogleMailDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGoogleMailDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGoogleSheetDiscriminatedConnectionSettings {
    connector_name: 'google-sheet';

    settings?: ConnectorGoogleSheetDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGoogleSheetDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGorgiasDiscriminatedConnectionSettings {
    connector_name: 'gorgias';

    settings?: ConnectorGorgiasDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGorgiasDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Gorgias account (e.g., https://domain.gorgias.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGrainDiscriminatedConnectionSettings {
    connector_name: 'grain';

    settings?: ConnectorGrainDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGrainDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGumroadDiscriminatedConnectionSettings {
    connector_name: 'gumroad';

    settings?: ConnectorGumroadDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGumroadDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorGustoDiscriminatedConnectionSettings {
    connector_name: 'gusto';

    settings?: ConnectorGustoDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGustoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHarvestDiscriminatedConnectionSettings {
    connector_name: 'harvest';

    settings?: ConnectorHarvestDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorHarvestDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The details of your app (e.g., example-subdomain)
       */
      appDetails: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHighlevelDiscriminatedConnectionSettings {
    connector_name: 'highlevel';

    settings?: ConnectorHighlevelDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorHighlevelDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorHubspotDiscriminatedConnectionSettings {
    connector_name: 'hubspot';

    settings?: ConnectorHubspotDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorHubspotDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorInstagramDiscriminatedConnectionSettings {
    connector_name: 'instagram';

    settings?: ConnectorInstagramDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorInstagramDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorIntercomDiscriminatedConnectionSettings {
    connector_name: 'intercom';

    settings?: ConnectorIntercomDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorIntercomDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorJiraDiscriminatedConnectionSettings {
    connector_name: 'jira';

    settings?: ConnectorJiraDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorJiraDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorKeapDiscriminatedConnectionSettings {
    connector_name: 'keap';

    settings?: ConnectorKeapDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorKeapDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLeverDiscriminatedConnectionSettings {
    connector_name: 'lever';

    settings?: ConnectorLeverDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorLeverDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinearDiscriminatedConnectionSettings {
    connector_name: 'linear';

    settings?: ConnectorLinearDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorLinearDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinkedinDiscriminatedConnectionSettings {
    connector_name: 'linkedin';

    settings?: ConnectorLinkedinDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorLinkedinDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorLinkhutDiscriminatedConnectionSettings {
    connector_name: 'linkhut';

    settings?: ConnectorLinkhutDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorLinkhutDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMailchimpDiscriminatedConnectionSettings {
    connector_name: 'mailchimp';

    settings?: ConnectorMailchimpDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorMailchimpDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The data center for your account (e.g., us6)
       */
      dc: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMiroDiscriminatedConnectionSettings {
    connector_name: 'miro';

    settings?: ConnectorMiroDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorMiroDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMondayDiscriminatedConnectionSettings {
    connector_name: 'monday';

    settings?: ConnectorMondayDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorMondayDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorMuralDiscriminatedConnectionSettings {
    connector_name: 'mural';

    settings?: ConnectorMuralDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorMuralDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNamelyDiscriminatedConnectionSettings {
    connector_name: 'namely';

    settings?: ConnectorNamelyDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorNamelyDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The name of your Namely company (e.g., example)
       */
      company: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNationbuilderDiscriminatedConnectionSettings {
    connector_name: 'nationbuilder';

    settings?: ConnectorNationbuilderDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorNationbuilderDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account ID of your NationBuilder account (e.g., example-subdomain)
       */
      accountId: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNetsuiteDiscriminatedConnectionSettings {
    connector_name: 'netsuite';

    settings?: ConnectorNetsuiteDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorNetsuiteDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The account ID of your NetSuite account (e.g., tstdrv231585)
       */
      accountId: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorNotionDiscriminatedConnectionSettings {
    connector_name: 'notion';

    settings?: ConnectorNotionDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorNotionDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOdooDiscriminatedConnectionSettings {
    connector_name: 'odoo';

    settings?: ConnectorOdooDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorOdooDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The domain of your Odoo account (e.g., https://example-subdomain)
       */
      serverUrl: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOktaDiscriminatedConnectionSettings {
    connector_name: 'okta';

    settings?: ConnectorOktaDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorOktaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Okta account (e.g., https://domain.okta.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOsuDiscriminatedConnectionSettings {
    connector_name: 'osu';

    settings?: ConnectorOsuDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorOsuDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOuraDiscriminatedConnectionSettings {
    connector_name: 'oura';

    settings?: ConnectorOuraDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorOuraDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorOutreachDiscriminatedConnectionSettings {
    connector_name: 'outreach';

    settings?: ConnectorOutreachDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorOutreachDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPagerdutyDiscriminatedConnectionSettings {
    connector_name: 'pagerduty';

    settings?: ConnectorPagerdutyDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorPagerdutyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPandadocDiscriminatedConnectionSettings {
    connector_name: 'pandadoc';

    settings?: ConnectorPandadocDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorPandadocDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPayfitDiscriminatedConnectionSettings {
    connector_name: 'payfit';

    settings?: ConnectorPayfitDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorPayfitDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPaypalDiscriminatedConnectionSettings {
    connector_name: 'paypal';

    settings?: ConnectorPaypalDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorPaypalDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPennylaneDiscriminatedConnectionSettings {
    connector_name: 'pennylane';

    settings?: ConnectorPennylaneDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorPennylaneDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPinterestDiscriminatedConnectionSettings {
    connector_name: 'pinterest';

    settings?: ConnectorPinterestDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorPinterestDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPipedriveDiscriminatedConnectionSettings {
    connector_name: 'pipedrive';

    settings?: ConnectorPipedriveDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorPipedriveDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API URL of your Pipedrive account (e.g., example)
       */
      api_domain: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorPodiumDiscriminatedConnectionSettings {
    connector_name: 'podium';

    settings?: ConnectorPodiumDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorPodiumDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The API version of your Podium account (e.g., example-subdomain)
       */
      apiVersion: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorProductboardDiscriminatedConnectionSettings {
    connector_name: 'productboard';

    settings?: ConnectorProductboardDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorProductboardDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorQualtricsDiscriminatedConnectionSettings {
    connector_name: 'qualtrics';

    settings?: ConnectorQualtricsDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorQualtricsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Qualtrics account (e.g., https://domain.qualtrics.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorQuickbooksDiscriminatedConnectionSettings {
    connector_name: 'quickbooks';

    settings?: ConnectorQuickbooksDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorQuickbooksDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorRedditDiscriminatedConnectionSettings {
    connector_name: 'reddit';

    settings?: ConnectorRedditDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorRedditDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSageDiscriminatedConnectionSettings {
    connector_name: 'sage';

    settings?: ConnectorSageDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSageDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSalesforceDiscriminatedConnectionSettings {
    connector_name: 'salesforce';

    settings?: ConnectorSalesforceDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSalesforceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The instance URL of your Salesforce account (e.g., example)
       */
      instance_url: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSalesloftDiscriminatedConnectionSettings {
    connector_name: 'salesloft';

    settings?: ConnectorSalesloftDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSalesloftDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSegmentDiscriminatedConnectionSettings {
    connector_name: 'segment';

    settings?: ConnectorSegmentDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSegmentDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorServicem8DiscriminatedConnectionSettings {
    connector_name: 'servicem8';

    settings?: ConnectorServicem8DiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorServicem8DiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorServicenowDiscriminatedConnectionSettings {
    connector_name: 'servicenow';

    settings?: ConnectorServicenowDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorServicenowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your ServiceNow account (e.g., https://domain.service-now.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSharepointDiscriminatedConnectionSettings {
    connector_name: 'sharepoint';

    settings?: ConnectorSharepointDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSharepointDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorShopifyDiscriminatedConnectionSettings {
    connector_name: 'shopify';

    settings?: ConnectorShopifyDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorShopifyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Shopify account (e.g., https://domain.myshopify.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSignnowDiscriminatedConnectionSettings {
    connector_name: 'signnow';

    settings?: ConnectorSignnowDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSignnowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSlackDiscriminatedConnectionSettings {
    connector_name: 'slack';

    settings?: ConnectorSlackDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSlackDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSmartsheetDiscriminatedConnectionSettings {
    connector_name: 'smartsheet';

    settings?: ConnectorSmartsheetDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSmartsheetDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSnowflakeDiscriminatedConnectionSettings {
    connector_name: 'snowflake';

    settings?: ConnectorSnowflakeDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSnowflakeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The domain of your Snowflake account (e.g., https://example-subdomain)
       */
      snowflake_account_url: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSpotifyDiscriminatedConnectionSettings {
    connector_name: 'spotify';

    settings?: ConnectorSpotifyDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSpotifyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSquarespaceDiscriminatedConnectionSettings {
    connector_name: 'squarespace';

    settings?: ConnectorSquarespaceDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSquarespaceDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The user agent of your custom app (e.g., example-subdomain)
       */
      customappDescription: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorSquareupDiscriminatedConnectionSettings {
    connector_name: 'squareup';

    settings?: ConnectorSquareupDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSquareupDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorStackexchangeDiscriminatedConnectionSettings {
    connector_name: 'stackexchange';

    settings?: ConnectorStackexchangeDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorStackexchangeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorStravaDiscriminatedConnectionSettings {
    connector_name: 'strava';

    settings?: ConnectorStravaDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorStravaDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTeamworkDiscriminatedConnectionSettings {
    connector_name: 'teamwork';

    settings?: ConnectorTeamworkDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTeamworkDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTicktickDiscriminatedConnectionSettings {
    connector_name: 'ticktick';

    settings?: ConnectorTicktickDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTicktickDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTimelyDiscriminatedConnectionSettings {
    connector_name: 'timely';

    settings?: ConnectorTimelyDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTimelyDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTodoistDiscriminatedConnectionSettings {
    connector_name: 'todoist';

    settings?: ConnectorTodoistDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTodoistDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTremendousDiscriminatedConnectionSettings {
    connector_name: 'tremendous';

    settings?: ConnectorTremendousDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTremendousDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTsheetsteamDiscriminatedConnectionSettings {
    connector_name: 'tsheetsteam';

    settings?: ConnectorTsheetsteamDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTsheetsteamDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTumblrDiscriminatedConnectionSettings {
    connector_name: 'tumblr';

    settings?: ConnectorTumblrDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTumblrDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwinfieldDiscriminatedConnectionSettings {
    connector_name: 'twinfield';

    settings?: ConnectorTwinfieldDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTwinfieldDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The cluster to your Twinfield instance (e.g., https://accounting.twinfield.com)
       */
      cluster: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwitchDiscriminatedConnectionSettings {
    connector_name: 'twitch';

    settings?: ConnectorTwitchDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTwitchDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTwitterDiscriminatedConnectionSettings {
    connector_name: 'twitter';

    settings?: ConnectorTwitterDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTwitterDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorTypeformDiscriminatedConnectionSettings {
    connector_name: 'typeform';

    settings?: ConnectorTypeformDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTypeformDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorUberDiscriminatedConnectionSettings {
    connector_name: 'uber';

    settings?: ConnectorUberDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorUberDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorVimeoDiscriminatedConnectionSettings {
    connector_name: 'vimeo';

    settings?: ConnectorVimeoDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorVimeoDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWakatimeDiscriminatedConnectionSettings {
    connector_name: 'wakatime';

    settings?: ConnectorWakatimeDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorWakatimeDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWealthboxDiscriminatedConnectionSettings {
    connector_name: 'wealthbox';

    settings?: ConnectorWealthboxDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorWealthboxDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWebflowDiscriminatedConnectionSettings {
    connector_name: 'webflow';

    settings?: ConnectorWebflowDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorWebflowDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWhoopDiscriminatedConnectionSettings {
    connector_name: 'whoop';

    settings?: ConnectorWhoopDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorWhoopDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWordpressDiscriminatedConnectionSettings {
    connector_name: 'wordpress';

    settings?: ConnectorWordpressDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorWordpressDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorWrikeDiscriminatedConnectionSettings {
    connector_name: 'wrike';

    settings?: ConnectorWrikeDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorWrikeDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain of your Wrike account (e.g., https://example-subdomain)
       */
      host: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorXeroDiscriminatedConnectionSettings {
    connector_name: 'xero';

    settings?: ConnectorXeroDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorXeroDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorYahooDiscriminatedConnectionSettings {
    connector_name: 'yahoo';

    settings?: ConnectorYahooDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorYahooDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain to the API you want to connect to (e.g.,
       * https://fantasysports.yahooapis.com)
       */
      apiDomain: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorYandexDiscriminatedConnectionSettings {
    connector_name: 'yandex';

    settings?: ConnectorYandexDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorYandexDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZapierDiscriminatedConnectionSettings {
    connector_name: 'zapier';

    settings?: ConnectorZapierDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorZapierDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZendeskDiscriminatedConnectionSettings {
    connector_name: 'zendesk';

    settings?: ConnectorZendeskDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorZendeskDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * The subdomain of your Zendesk account (e.g., https://domain.zendesk.com)
       */
      subdomain: string;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZenefitsDiscriminatedConnectionSettings {
    connector_name: 'zenefits';

    settings?: ConnectorZenefitsDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorZenefitsDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZohoDeskDiscriminatedConnectionSettings {
    connector_name: 'zoho-desk';

    settings?: ConnectorZohoDeskDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorZohoDeskDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension of your Zoho account (e.g., https://accounts.zoho.com/)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZohoDiscriminatedConnectionSettings {
    connector_name: 'zoho';

    settings?: ConnectorZohoDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorZohoDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * The domain extension of your Zoho account (e.g., https://accounts.zoho.com/)
       */
      extension: string;

      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorZoomDiscriminatedConnectionSettings {
    connector_name: 'zoom';

    settings?: ConnectorZoomDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorZoomDiscriminatedConnectionSettings {
    export interface Settings {
      oauth: Settings.OAuth;

      /**
       * Same as oauth.credentials.access_token, but more convenient to access. Optional
       * for backward compatibility until we remove the oauth field
       */
      access_token?: string;
    }

    export namespace Settings {
      export interface OAuth {
        created_at?: string;

        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        credentials?: OAuth.Credentials;

        last_fetched_at?: string;

        metadata?: { [key: string]: unknown } | null;

        updated_at?: string;
      }

      export namespace OAuth {
        /**
         * Output of the postConnect hook for oauth2 connectors
         */
        export interface Credentials {
          access_token: string;

          /**
           * Client ID used for the connection
           */
          client_id?: string;

          expires_at?: string;

          expires_in?: number;

          raw?: { [key: string]: unknown };

          refresh_token?: string;

          scope?: string;

          token_type?: string;
        }
      }
    }
  }

  export interface ConnectorAirtableDiscriminatedConnectionSettings {
    connector_name: 'airtable';

    settings?: ConnectorAirtableDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorAirtableDiscriminatedConnectionSettings {
    export interface Settings {
      airtableBase: string;

      apiKey: string;
    }
  }

  export interface ConnectorApolloDiscriminatedConnectionSettings {
    connector_name: 'apollo';

    settings?: ConnectorApolloDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorApolloDiscriminatedConnectionSettings {
    export interface Settings {
      api_key: string;
    }
  }

  export interface ConnectorBrexDiscriminatedConnectionSettings {
    connector_name: 'brex';

    settings?: ConnectorBrexDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorBrexDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;
    }
  }

  export interface ConnectorCodaDiscriminatedConnectionSettings {
    connector_name: 'coda';

    settings?: ConnectorCodaDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorCodaDiscriminatedConnectionSettings {
    export interface Settings {
      apiKey: string;
    }
  }

  export interface ConnectorFinchDiscriminatedConnectionSettings {
    connector_name: 'finch';

    settings?: ConnectorFinchDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorFinchDiscriminatedConnectionSettings {
    export interface Settings {
      access_token: string;
    }
  }

  export interface ConnectorFirebaseDiscriminatedConnectionSettings {
    connector_name: 'firebase';

    settings?:
      | ConnectorFirebaseDiscriminatedConnectionSettings.UnionMember0
      | ConnectorFirebaseDiscriminatedConnectionSettings.UnionMember1;
  }

  export namespace ConnectorFirebaseDiscriminatedConnectionSettings {
    export interface UnionMember0 {
      role: 'admin';

      serviceAccount: UnionMember0.ServiceAccount;
    }

    export namespace UnionMember0 {
      export interface ServiceAccount {
        project_id: string;

        [k: string]: unknown;
      }
    }

    export interface UnionMember1 {
      authData: UnionMember1.UnionMember0 | UnionMember1.UnionMember1 | UnionMember1.UnionMember2;

      firebaseConfig: UnionMember1.FirebaseConfig;

      role: 'user';
    }

    export namespace UnionMember1 {
      export interface UnionMember0 {
        method: 'userJson';

        userJson: UnionMember0.UserJson;
      }

      export namespace UnionMember0 {
        export interface UserJson {
          appName: string;

          stsTokenManager: { [key: string]: unknown };

          uid: string;

          [k: string]: unknown;
        }
      }

      export interface UnionMember1 {
        customToken: string;

        method: 'customToken';
      }

      export interface UnionMember2 {
        email: string;

        method: 'emailPassword';

        password: string;
      }

      export interface FirebaseConfig {
        apiKey: string;

        appId: string;

        authDomain: string;

        databaseURL: string;

        projectId: string;

        measurementId?: string;

        messagingSenderId?: string;

        storageBucket?: string;
      }
    }
  }

  export interface ConnectorForeceiptDiscriminatedConnectionSettings {
    connector_name: 'foreceipt';

    settings?: ConnectorForeceiptDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorForeceiptDiscriminatedConnectionSettings {
    export interface Settings {
      envName: 'staging' | 'production';

      _id?: unknown;

      credentials?: unknown;
    }
  }

  export interface ConnectorGreenhouseDiscriminatedConnectionSettings {
    connector_name: 'greenhouse';

    settings?: ConnectorGreenhouseDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorGreenhouseDiscriminatedConnectionSettings {
    export interface Settings {
      apiKey: string;
    }
  }

  export interface ConnectorHeronDiscriminatedConnectionSettings {
    connector_name: 'heron';

    settings?: unknown;
  }

  export interface ConnectorLunchmoneyDiscriminatedConnectionSettings {
    connector_name: 'lunchmoney';

    settings?: unknown;
  }

  export interface ConnectorMercuryDiscriminatedConnectionSettings {
    connector_name: 'mercury';

    settings?: unknown;
  }

  export interface ConnectorMergeDiscriminatedConnectionSettings {
    connector_name: 'merge';

    settings?: ConnectorMergeDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorMergeDiscriminatedConnectionSettings {
    export interface Settings {
      accountToken: string;

      accountDetails?: unknown;
    }
  }

  export interface ConnectorMootaDiscriminatedConnectionSettings {
    connector_name: 'moota';

    settings?: unknown;
  }

  export interface ConnectorOnebrickDiscriminatedConnectionSettings {
    connector_name: 'onebrick';

    settings?: ConnectorOnebrickDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorOnebrickDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;
    }
  }

  export interface ConnectorOpenledgerDiscriminatedConnectionSettings {
    connector_name: 'openledger';

    settings?: ConnectorOpenledgerDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorOpenledgerDiscriminatedConnectionSettings {
    export interface Settings {
      /**
       * Your entity's identifier, aka customer ID
       */
      entity_id: string;
    }
  }

  export interface ConnectorPlaidDiscriminatedConnectionSettings {
    connector_name: 'plaid';

    settings?: ConnectorPlaidDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorPlaidDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;

      institution?: unknown;

      item?: unknown;

      itemId?: string | null;

      status?: unknown;

      webhookItemError?: null;
    }
  }

  export interface ConnectorPostgresDiscriminatedConnectionSettings {
    connector_name: 'postgres';

    settings?: ConnectorPostgresDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorPostgresDiscriminatedConnectionSettings {
    export interface Settings {
      databaseURL?: string;
    }
  }

  export interface ConnectorRampDiscriminatedConnectionSettings {
    connector_name: 'ramp';

    settings?: ConnectorRampDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorRampDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken?: string | null;

      startAfterTransactionId?: string | null;
    }
  }

  export interface ConnectorSaltedgeDiscriminatedConnectionSettings {
    connector_name: 'saltedge';

    settings?: unknown;
  }

  export interface ConnectorSharepointOnpremDiscriminatedConnectionSettings {
    connector_name: 'sharepoint-onprem';

    settings?: ConnectorSharepointOnpremDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSharepointOnpremDiscriminatedConnectionSettings {
    export interface Settings {
      password: string;

      site_url: string;

      username: string;
    }
  }

  export interface ConnectorSplitwiseDiscriminatedConnectionSettings {
    connector_name: 'splitwise';

    settings?: ConnectorSplitwiseDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorSplitwiseDiscriminatedConnectionSettings {
    export interface Settings {
      accessToken: string;

      currentUser?: Settings.CurrentUser | null;
    }

    export namespace Settings {
      export interface CurrentUser {
        id: number;

        country_code: string;

        custom_picture: boolean;

        date_format: string;

        default_currency: string;

        default_group_id: number;

        email: string;

        first_name: string;

        force_refresh_at: string;

        last_name: string;

        locale: string;

        notifications: CurrentUser.Notifications;

        notifications_count: number;

        notifications_read: string;

        picture: CurrentUser.Picture;

        registration_status: string;
      }

      export namespace CurrentUser {
        export interface Notifications {
          added_as_friend: boolean;

          added_to_group: boolean;

          announcements: boolean;

          bills: boolean;

          expense_added: boolean;

          expense_updated: boolean;

          monthly_summary: boolean;

          payments: boolean;
        }

        export interface Picture {
          large?: string | null;

          medium?: string | null;

          original?: string | null;

          small?: string | null;

          xlarge?: string | null;

          xxlarge?: string | null;
        }
      }
    }
  }

  export interface ConnectorStripeDiscriminatedConnectionSettings {
    connector_name: 'stripe';

    settings?: ConnectorStripeDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorStripeDiscriminatedConnectionSettings {
    export interface Settings {
      secretKey: string;
    }
  }

  export interface ConnectorTellerDiscriminatedConnectionSettings {
    connector_name: 'teller';

    settings?: ConnectorTellerDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTellerDiscriminatedConnectionSettings {
    export interface Settings {
      token: string;
    }
  }

  export interface ConnectorTogglDiscriminatedConnectionSettings {
    connector_name: 'toggl';

    settings?: ConnectorTogglDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTogglDiscriminatedConnectionSettings {
    export interface Settings {
      apiToken: string;

      email?: string | null;

      password?: string | null;
    }
  }

  export interface ConnectorTwentyDiscriminatedConnectionSettings {
    connector_name: 'twenty';

    settings?: ConnectorTwentyDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorTwentyDiscriminatedConnectionSettings {
    export interface Settings {
      access_token: string;
    }
  }

  export interface ConnectorVenmoDiscriminatedConnectionSettings {
    connector_name: 'venmo';

    settings?: ConnectorVenmoDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorVenmoDiscriminatedConnectionSettings {
    export interface Settings {
      credentials?: unknown;

      me?: unknown;
    }
  }

  export interface ConnectorWiseDiscriminatedConnectionSettings {
    connector_name: 'wise';

    settings?: ConnectorWiseDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorWiseDiscriminatedConnectionSettings {
    export interface Settings {
      envName: 'sandbox' | 'live';

      apiToken?: string | null;
    }
  }

  export interface ConnectorYodleeDiscriminatedConnectionSettings {
    connector_name: 'yodlee';

    settings?: ConnectorYodleeDiscriminatedConnectionSettings.Settings;
  }

  export namespace ConnectorYodleeDiscriminatedConnectionSettings {
    export interface Settings {
      loginName: string;

      providerAccountId: number | string;

      accessToken?: Settings.AccessToken | null;

      provider?: null;

      providerAccount?: Settings.ProviderAccount | null;

      user?: null;
    }

    export namespace Settings {
      export interface AccessToken {
        accessToken: string;

        expiresIn: number;

        issuedAt: string;
      }

      export interface ProviderAccount {
        id: number;

        aggregationSource: string;

        createdDate: string;

        dataset: Array<unknown>;

        isManual: boolean;

        providerId: number;

        status:
          | 'LOGIN_IN_PROGRESS'
          | 'USER_INPUT_REQUIRED'
          | 'IN_PROGRESS'
          | 'PARTIAL_SUCCESS'
          | 'SUCCESS'
          | 'FAILED';

        isDeleted?: boolean | null;
      }
    }
  }
}

export interface CreateConnnectorConfigParams {
  connector_name: string;

  config?: { [key: string]: unknown } | null;

  disabled?: boolean | null;

  display_name?: string | null;

  metadata?: { [key: string]: unknown } | null;
}

export interface CreateTokenParams {
  connect_options?: CreateTokenParams.ConnectOptions;

  /**
   * How long the publishable token and magic link url will be valid for (in seconds)
   * before it expires. By default it will be valid for 30 days unless otherwise
   * specified.
   */
  validity_in_seconds?: number;
}

export namespace CreateTokenParams {
  export interface ConnectOptions {
    /**
     * The names of the connectors to show in the connect page. If not provided, all
     * connectors will be shown
     */
    connector_names?: Array<
      | 'accelo'
      | 'acme-apikey'
      | 'acme-oauth2'
      | 'adobe'
      | 'adyen'
      | 'aircall'
      | 'airtable'
      | 'amazon'
      | 'apaleo'
      | 'apollo'
      | 'asana'
      | 'attio'
      | 'auth0'
      | 'autodesk'
      | 'aws'
      | 'bamboohr'
      | 'basecamp'
      | 'battlenet'
      | 'bigcommerce'
      | 'bitbucket'
      | 'bitly'
      | 'blackbaud'
      | 'boldsign'
      | 'box'
      | 'braintree'
      | 'brex'
      | 'calendly'
      | 'clickup'
      | 'close'
      | 'coda'
      | 'confluence'
      | 'contentful'
      | 'contentstack'
      | 'copper'
      | 'coros'
      | 'datev'
      | 'deel'
      | 'dialpad'
      | 'digitalocean'
      | 'discord'
      | 'docusign'
      | 'dropbox'
      | 'ebay'
      | 'egnyte'
      | 'envoy'
      | 'eventbrite'
      | 'exist'
      | 'facebook'
      | 'factorial'
      | 'figma'
      | 'finch'
      | 'firebase'
      | 'fitbit'
      | 'foreceipt'
      | 'fortnox'
      | 'freshbooks'
      | 'front'
      | 'github'
      | 'gitlab'
      | 'gong'
      | 'google-calendar'
      | 'google-docs'
      | 'google-drive'
      | 'google-mail'
      | 'google-sheet'
      | 'gorgias'
      | 'grain'
      | 'greenhouse'
      | 'gumroad'
      | 'gusto'
      | 'harvest'
      | 'heron'
      | 'highlevel'
      | 'hubspot'
      | 'instagram'
      | 'intercom'
      | 'jira'
      | 'keap'
      | 'lever'
      | 'linear'
      | 'linkedin'
      | 'linkhut'
      | 'lunchmoney'
      | 'mailchimp'
      | 'mercury'
      | 'merge'
      | 'miro'
      | 'monday'
      | 'moota'
      | 'mural'
      | 'namely'
      | 'nationbuilder'
      | 'netsuite'
      | 'notion'
      | 'odoo'
      | 'okta'
      | 'onebrick'
      | 'openledger'
      | 'osu'
      | 'oura'
      | 'outreach'
      | 'pagerduty'
      | 'pandadoc'
      | 'payfit'
      | 'paypal'
      | 'pennylane'
      | 'pinterest'
      | 'pipedrive'
      | 'plaid'
      | 'podium'
      | 'postgres'
      | 'productboard'
      | 'qualtrics'
      | 'quickbooks'
      | 'ramp'
      | 'reddit'
      | 'sage'
      | 'salesforce'
      | 'salesloft'
      | 'saltedge'
      | 'segment'
      | 'servicem8'
      | 'servicenow'
      | 'sharepoint'
      | 'sharepoint-onprem'
      | 'shopify'
      | 'signnow'
      | 'slack'
      | 'smartsheet'
      | 'snowflake'
      | 'splitwise'
      | 'spotify'
      | 'squarespace'
      | 'squareup'
      | 'stackexchange'
      | 'strava'
      | 'stripe'
      | 'teamwork'
      | 'teller'
      | 'ticktick'
      | 'timely'
      | 'todoist'
      | 'toggl'
      | 'tremendous'
      | 'tsheetsteam'
      | 'tumblr'
      | 'twenty'
      | 'twinfield'
      | 'twitch'
      | 'twitter'
      | 'typeform'
      | 'uber'
      | 'venmo'
      | 'vimeo'
      | 'wakatime'
      | 'wealthbox'
      | 'webflow'
      | 'whoop'
      | 'wise'
      | 'wordpress'
      | 'wrike'
      | 'xero'
      | 'yahoo'
      | 'yandex'
      | 'yodlee'
      | 'zapier'
      | 'zendesk'
      | 'zenefits'
      | 'zoho'
      | 'zoho-desk'
      | 'zoom'
    >;

    /**
     * Whether to enable debug mode
     */
    debug?: boolean;

    /**
     * Whether to enable embedded mode. Embedded mode hides the side bar with extra
     * context for the end user (customer) on the organization
     */
    is_embedded?: boolean;

    /**
     * Optional URL to return customers after adding a connection or if they press the
     * Return To Organization button
     */
    return_url?: string;

    /**
     * The default view to show when the magic link is opened. If omitted, by default
     * it will smartly load the right view based on whether the user has connections or
     * not
     */
    view?: 'add' | 'manage';
  }
}

export interface GetConectorConfigParams {
  expand?: Array<'connector' | 'connector.schemas' | 'connection_count'>;
}

export interface GetConnectionParams {
  expand?: Array<'connector'>;

  include_secrets?: boolean;

  /**
   * Controls credential refresh: none (never), force (always), or auto (when
   * expired, default)
   */
  refresh_policy?: 'none' | 'force' | 'auto';
}

export interface GetMessageTemplateParams {
  customer_id: string;

  language?: 'javascript';

  use_environment_variables?: boolean;
}

export interface ListConnectionConfigsParams extends OffsetPaginationParams {
  connector_names?: Array<
    | 'accelo'
    | 'acme-apikey'
    | 'acme-oauth2'
    | 'adobe'
    | 'adyen'
    | 'aircall'
    | 'airtable'
    | 'amazon'
    | 'apaleo'
    | 'apollo'
    | 'asana'
    | 'attio'
    | 'auth0'
    | 'autodesk'
    | 'aws'
    | 'bamboohr'
    | 'basecamp'
    | 'battlenet'
    | 'bigcommerce'
    | 'bitbucket'
    | 'bitly'
    | 'blackbaud'
    | 'boldsign'
    | 'box'
    | 'braintree'
    | 'brex'
    | 'calendly'
    | 'clickup'
    | 'close'
    | 'coda'
    | 'confluence'
    | 'contentful'
    | 'contentstack'
    | 'copper'
    | 'coros'
    | 'datev'
    | 'deel'
    | 'dialpad'
    | 'digitalocean'
    | 'discord'
    | 'docusign'
    | 'dropbox'
    | 'ebay'
    | 'egnyte'
    | 'envoy'
    | 'eventbrite'
    | 'exist'
    | 'facebook'
    | 'factorial'
    | 'figma'
    | 'finch'
    | 'firebase'
    | 'fitbit'
    | 'foreceipt'
    | 'fortnox'
    | 'freshbooks'
    | 'front'
    | 'github'
    | 'gitlab'
    | 'gong'
    | 'google-calendar'
    | 'google-docs'
    | 'google-drive'
    | 'google-mail'
    | 'google-sheet'
    | 'gorgias'
    | 'grain'
    | 'greenhouse'
    | 'gumroad'
    | 'gusto'
    | 'harvest'
    | 'heron'
    | 'highlevel'
    | 'hubspot'
    | 'instagram'
    | 'intercom'
    | 'jira'
    | 'keap'
    | 'lever'
    | 'linear'
    | 'linkedin'
    | 'linkhut'
    | 'lunchmoney'
    | 'mailchimp'
    | 'mercury'
    | 'merge'
    | 'miro'
    | 'monday'
    | 'moota'
    | 'mural'
    | 'namely'
    | 'nationbuilder'
    | 'netsuite'
    | 'notion'
    | 'odoo'
    | 'okta'
    | 'onebrick'
    | 'openledger'
    | 'osu'
    | 'oura'
    | 'outreach'
    | 'pagerduty'
    | 'pandadoc'
    | 'payfit'
    | 'paypal'
    | 'pennylane'
    | 'pinterest'
    | 'pipedrive'
    | 'plaid'
    | 'podium'
    | 'postgres'
    | 'productboard'
    | 'qualtrics'
    | 'quickbooks'
    | 'ramp'
    | 'reddit'
    | 'sage'
    | 'salesforce'
    | 'salesloft'
    | 'saltedge'
    | 'segment'
    | 'servicem8'
    | 'servicenow'
    | 'sharepoint'
    | 'sharepoint-onprem'
    | 'shopify'
    | 'signnow'
    | 'slack'
    | 'smartsheet'
    | 'snowflake'
    | 'splitwise'
    | 'spotify'
    | 'squarespace'
    | 'squareup'
    | 'stackexchange'
    | 'strava'
    | 'stripe'
    | 'teamwork'
    | 'teller'
    | 'ticktick'
    | 'timely'
    | 'todoist'
    | 'toggl'
    | 'tremendous'
    | 'tsheetsteam'
    | 'tumblr'
    | 'twenty'
    | 'twinfield'
    | 'twitch'
    | 'twitter'
    | 'typeform'
    | 'uber'
    | 'venmo'
    | 'vimeo'
    | 'wakatime'
    | 'wealthbox'
    | 'webflow'
    | 'whoop'
    | 'wise'
    | 'wordpress'
    | 'wrike'
    | 'xero'
    | 'yahoo'
    | 'yandex'
    | 'yodlee'
    | 'zapier'
    | 'zendesk'
    | 'zenefits'
    | 'zoho'
    | 'zoho-desk'
    | 'zoom'
  >;

  expand?: Array<'connector' | 'connector.schemas' | 'connection_count'>;

  /**
   * Limit the number of items returned
   */
  limit?: number;

  search_query?: string | null;
}

export interface ListConnectionsParams extends OffsetPaginationParams {
  /**
   * The id of the connector config, starts with `ccfg_`
   */
  connector_config_id?: string;

  connector_names?: Array<
    | 'accelo'
    | 'acme-apikey'
    | 'acme-oauth2'
    | 'adobe'
    | 'adyen'
    | 'aircall'
    | 'airtable'
    | 'amazon'
    | 'apaleo'
    | 'apollo'
    | 'asana'
    | 'attio'
    | 'auth0'
    | 'autodesk'
    | 'aws'
    | 'bamboohr'
    | 'basecamp'
    | 'battlenet'
    | 'bigcommerce'
    | 'bitbucket'
    | 'bitly'
    | 'blackbaud'
    | 'boldsign'
    | 'box'
    | 'braintree'
    | 'brex'
    | 'calendly'
    | 'clickup'
    | 'close'
    | 'coda'
    | 'confluence'
    | 'contentful'
    | 'contentstack'
    | 'copper'
    | 'coros'
    | 'datev'
    | 'deel'
    | 'dialpad'
    | 'digitalocean'
    | 'discord'
    | 'docusign'
    | 'dropbox'
    | 'ebay'
    | 'egnyte'
    | 'envoy'
    | 'eventbrite'
    | 'exist'
    | 'facebook'
    | 'factorial'
    | 'figma'
    | 'finch'
    | 'firebase'
    | 'fitbit'
    | 'foreceipt'
    | 'fortnox'
    | 'freshbooks'
    | 'front'
    | 'github'
    | 'gitlab'
    | 'gong'
    | 'google-calendar'
    | 'google-docs'
    | 'google-drive'
    | 'google-mail'
    | 'google-sheet'
    | 'gorgias'
    | 'grain'
    | 'greenhouse'
    | 'gumroad'
    | 'gusto'
    | 'harvest'
    | 'heron'
    | 'highlevel'
    | 'hubspot'
    | 'instagram'
    | 'intercom'
    | 'jira'
    | 'keap'
    | 'lever'
    | 'linear'
    | 'linkedin'
    | 'linkhut'
    | 'lunchmoney'
    | 'mailchimp'
    | 'mercury'
    | 'merge'
    | 'miro'
    | 'monday'
    | 'moota'
    | 'mural'
    | 'namely'
    | 'nationbuilder'
    | 'netsuite'
    | 'notion'
    | 'odoo'
    | 'okta'
    | 'onebrick'
    | 'openledger'
    | 'osu'
    | 'oura'
    | 'outreach'
    | 'pagerduty'
    | 'pandadoc'
    | 'payfit'
    | 'paypal'
    | 'pennylane'
    | 'pinterest'
    | 'pipedrive'
    | 'plaid'
    | 'podium'
    | 'postgres'
    | 'productboard'
    | 'qualtrics'
    | 'quickbooks'
    | 'ramp'
    | 'reddit'
    | 'sage'
    | 'salesforce'
    | 'salesloft'
    | 'saltedge'
    | 'segment'
    | 'servicem8'
    | 'servicenow'
    | 'sharepoint'
    | 'sharepoint-onprem'
    | 'shopify'
    | 'signnow'
    | 'slack'
    | 'smartsheet'
    | 'snowflake'
    | 'splitwise'
    | 'spotify'
    | 'squarespace'
    | 'squareup'
    | 'stackexchange'
    | 'strava'
    | 'stripe'
    | 'teamwork'
    | 'teller'
    | 'ticktick'
    | 'timely'
    | 'todoist'
    | 'toggl'
    | 'tremendous'
    | 'tsheetsteam'
    | 'tumblr'
    | 'twenty'
    | 'twinfield'
    | 'twitch'
    | 'twitter'
    | 'typeform'
    | 'uber'
    | 'venmo'
    | 'vimeo'
    | 'wakatime'
    | 'wealthbox'
    | 'webflow'
    | 'whoop'
    | 'wise'
    | 'wordpress'
    | 'wrike'
    | 'xero'
    | 'yahoo'
    | 'yandex'
    | 'yodlee'
    | 'zapier'
    | 'zendesk'
    | 'zenefits'
    | 'zoho'
    | 'zoho-desk'
    | 'zoom'
  >;

  /**
   * The id of the customer in your application. Ensure it is unique for that
   * customer.
   */
  customer_id?: string;

  /**
   * Expand the response with additional optionals
   */
  expand?: Array<'connector'>;

  include_secrets?: boolean;

  /**
   * Limit the number of items returned
   */
  limit?: number;

  /**
   * Controls credential refresh: none (never), force (always), or auto (when
   * expired, default)
   */
  refresh_policy?: 'none' | 'force' | 'auto';

  search_query?: string;
}

export interface ListConnectorsParams extends OffsetPaginationParams {
  expand?: Array<'schemas'>;

  /**
   * Limit the number of items returned
   */
  limit?: number;
}

export interface ListConnnectorConfigsParams extends OffsetPaginationParams {
  connector_names?: Array<
    | 'accelo'
    | 'acme-apikey'
    | 'acme-oauth2'
    | 'adobe'
    | 'adyen'
    | 'aircall'
    | 'airtable'
    | 'amazon'
    | 'apaleo'
    | 'apollo'
    | 'asana'
    | 'attio'
    | 'auth0'
    | 'autodesk'
    | 'aws'
    | 'bamboohr'
    | 'basecamp'
    | 'battlenet'
    | 'bigcommerce'
    | 'bitbucket'
    | 'bitly'
    | 'blackbaud'
    | 'boldsign'
    | 'box'
    | 'braintree'
    | 'brex'
    | 'calendly'
    | 'clickup'
    | 'close'
    | 'coda'
    | 'confluence'
    | 'contentful'
    | 'contentstack'
    | 'copper'
    | 'coros'
    | 'datev'
    | 'deel'
    | 'dialpad'
    | 'digitalocean'
    | 'discord'
    | 'docusign'
    | 'dropbox'
    | 'ebay'
    | 'egnyte'
    | 'envoy'
    | 'eventbrite'
    | 'exist'
    | 'facebook'
    | 'factorial'
    | 'figma'
    | 'finch'
    | 'firebase'
    | 'fitbit'
    | 'foreceipt'
    | 'fortnox'
    | 'freshbooks'
    | 'front'
    | 'github'
    | 'gitlab'
    | 'gong'
    | 'google-calendar'
    | 'google-docs'
    | 'google-drive'
    | 'google-mail'
    | 'google-sheet'
    | 'gorgias'
    | 'grain'
    | 'greenhouse'
    | 'gumroad'
    | 'gusto'
    | 'harvest'
    | 'heron'
    | 'highlevel'
    | 'hubspot'
    | 'instagram'
    | 'intercom'
    | 'jira'
    | 'keap'
    | 'lever'
    | 'linear'
    | 'linkedin'
    | 'linkhut'
    | 'lunchmoney'
    | 'mailchimp'
    | 'mercury'
    | 'merge'
    | 'miro'
    | 'monday'
    | 'moota'
    | 'mural'
    | 'namely'
    | 'nationbuilder'
    | 'netsuite'
    | 'notion'
    | 'odoo'
    | 'okta'
    | 'onebrick'
    | 'openledger'
    | 'osu'
    | 'oura'
    | 'outreach'
    | 'pagerduty'
    | 'pandadoc'
    | 'payfit'
    | 'paypal'
    | 'pennylane'
    | 'pinterest'
    | 'pipedrive'
    | 'plaid'
    | 'podium'
    | 'postgres'
    | 'productboard'
    | 'qualtrics'
    | 'quickbooks'
    | 'ramp'
    | 'reddit'
    | 'sage'
    | 'salesforce'
    | 'salesloft'
    | 'saltedge'
    | 'segment'
    | 'servicem8'
    | 'servicenow'
    | 'sharepoint'
    | 'sharepoint-onprem'
    | 'shopify'
    | 'signnow'
    | 'slack'
    | 'smartsheet'
    | 'snowflake'
    | 'splitwise'
    | 'spotify'
    | 'squarespace'
    | 'squareup'
    | 'stackexchange'
    | 'strava'
    | 'stripe'
    | 'teamwork'
    | 'teller'
    | 'ticktick'
    | 'timely'
    | 'todoist'
    | 'toggl'
    | 'tremendous'
    | 'tsheetsteam'
    | 'tumblr'
    | 'twenty'
    | 'twinfield'
    | 'twitch'
    | 'twitter'
    | 'typeform'
    | 'uber'
    | 'venmo'
    | 'vimeo'
    | 'wakatime'
    | 'wealthbox'
    | 'webflow'
    | 'whoop'
    | 'wise'
    | 'wordpress'
    | 'wrike'
    | 'xero'
    | 'yahoo'
    | 'yandex'
    | 'yodlee'
    | 'zapier'
    | 'zendesk'
    | 'zenefits'
    | 'zoho'
    | 'zoho-desk'
    | 'zoom'
  >;

  expand?: Array<'connector' | 'connector.schemas' | 'connection_count'>;

  /**
   * Limit the number of items returned
   */
  limit?: number;

  search_query?: string | null;
}

export interface ListCustomersParams extends OffsetPaginationParams {
  /**
   * Limit the number of items returned
   */
  limit?: number;

  search_query?: string | null;
}

export interface ListEventsParams extends OffsetPaginationParams {
  expand?: Array<'prompt'>;

  /**
   * Limit the number of items returned
   */
  limit?: number;

  search_query?: string;

  since?: string;
}

export interface UpsertConnnectorConfigParams {
  config?: { [key: string]: unknown } | null;

  disabled?: boolean;

  display_name?: string;
}

export interface UpsertCustomerParams {
  id?: string;

  metadata?: { [key: string]: unknown };
}

export declare namespace TopLevel {
  export {
    type Connector as Connector,
    type Integration as Integration,
    type CheckConnectionResponse as CheckConnectionResponse,
    type CreateConnectionResponse as CreateConnectionResponse,
    type CreateConnnectorConfigResponse as CreateConnnectorConfigResponse,
    type CreateTokenResponse as CreateTokenResponse,
    type DeleteConnectionResponse as DeleteConnectionResponse,
    type GetConectorConfigResponse as GetConectorConfigResponse,
    type GetConnectionResponse as GetConnectionResponse,
    type GetCurrentUserResponse as GetCurrentUserResponse,
    type GetMessageTemplateResponse as GetMessageTemplateResponse,
    type ListConnectionConfigsResponse as ListConnectionConfigsResponse,
    type ListConnectionsResponse as ListConnectionsResponse,
    type ListConnectorsResponse as ListConnectorsResponse,
    type ListConnnectorConfigsResponse as ListConnnectorConfigsResponse,
    type ListCustomersResponse as ListCustomersResponse,
    type ListEventsResponse as ListEventsResponse,
    type UpsertConnnectorConfigResponse as UpsertConnnectorConfigResponse,
    type UpsertCustomerResponse as UpsertCustomerResponse,
    type ListConnectionConfigsResponsesOffsetPagination as ListConnectionConfigsResponsesOffsetPagination,
    type ListConnectionsResponsesOffsetPagination as ListConnectionsResponsesOffsetPagination,
    type ListConnectorsResponsesOffsetPagination as ListConnectorsResponsesOffsetPagination,
    type ListConnnectorConfigsResponsesOffsetPagination as ListConnnectorConfigsResponsesOffsetPagination,
    type ListCustomersResponsesOffsetPagination as ListCustomersResponsesOffsetPagination,
    type ListEventsResponsesOffsetPagination as ListEventsResponsesOffsetPagination,
    type CreateConnectionParams as CreateConnectionParams,
    type CreateConnnectorConfigParams as CreateConnnectorConfigParams,
    type CreateTokenParams as CreateTokenParams,
    type GetConectorConfigParams as GetConectorConfigParams,
    type GetConnectionParams as GetConnectionParams,
    type GetMessageTemplateParams as GetMessageTemplateParams,
    type ListConnectionConfigsParams as ListConnectionConfigsParams,
    type ListConnectionsParams as ListConnectionsParams,
    type ListConnectorsParams as ListConnectorsParams,
    type ListConnnectorConfigsParams as ListConnnectorConfigsParams,
    type ListCustomersParams as ListCustomersParams,
    type ListEventsParams as ListEventsParams,
    type UpsertConnnectorConfigParams as UpsertConnnectorConfigParams,
    type UpsertCustomerParams as UpsertCustomerParams,
  };
}
